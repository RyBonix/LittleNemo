#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	float Constants_SystemState_LoopDelay;
	float Constants_SystemState_LoopDuration;
	float Constants_Sparks_02_EmitterState_LoopDuration;
	float Constants_Sparks_02_EmitterState_LoopDelay;
	int Constants_Sparks_02_UniformRangedInt_Minimum;
	int Constants_Sparks_02_UniformRangedInt_Maximum;
	int Constants_Sparks_02_UniformRangedInt_RandomSeed;
	float Constants_Sparks_02_SpawnBurst_Instantaneous_SpawnTime;
	int Constants_Sparks_02_SpawnBurst_Instantaneous_SpawnGroup;
	float Constants_Sparks_02_SpawnBurst_Instantaneous_SpawnProbability;
	float Constants_Ground_Lightning_EmitterState_LoopDuration;
	float Constants_Ground_Lightning_EmitterState_LoopDelay;
	int Constants_Ground_Lightning_SpawnRate_SpawnGroup;
	float Constants_Ground_Lightning_SpawnRate_SpawnProbability;
	float Constants_Sparks_01_EmitterState001_LoopDuration;
	float Constants_Sparks_01_EmitterState001_LoopDelay;
	int Constants_Sparks_01_UniformRangedInt_Minimum;
	int Constants_Sparks_01_UniformRangedInt_Maximum;
	int Constants_Sparks_01_UniformRangedInt_RandomSeed;
	float Constants_Sparks_01_SpawnBurst_Instantaneous_SpawnTime;
	int Constants_Sparks_01_SpawnBurst_Instantaneous_SpawnGroup;
	float Constants_Sparks_01_SpawnBurst_Instantaneous_SpawnProbability;
	float Constants_Lightning_03_Multiply_VectorByFloat_FLOAT_VAR;
	float3 Constants_Lightning_03_Multiply_VectorByFloat001_VECTOR_VAR;
	float Constants_Lightning_03_Multiply_VectorByFloat001_FLOAT_VAR;
	float Constants_Lightning_03_EmitterState_LoopDuration;
	float Constants_Lightning_03_EmitterState_LoopDelay;
	float Constants_Lightning_03_Multiply_Float003_B;
	float Constants_Lightning_03_SpawnBurst_Instantaneous_SpawnTime;
	int Constants_Lightning_03_SpawnBurst_Instantaneous_SpawnGroup;
	float Constants_Lightning_03_SpawnBurst_Instantaneous_SpawnProbability;
	float Constants_Lightning_02_Multiply_VectorByFloat_FLOAT_VAR;
	float3 Constants_Lightning_02_Multiply_VectorByFloat001_VECTOR_VAR;
	float Constants_Lightning_02_Multiply_VectorByFloat001_FLOAT_VAR;
	float Constants_Lightning_02_EmitterState001_LoopDuration;
	float Constants_Lightning_02_EmitterState001_LoopDelay;
	float Constants_Lightning_02_Multiply_Float003_B;
	float Constants_Lightning_02_SpawnBurst_Instantaneous_SpawnTime;
	int Constants_Lightning_02_SpawnBurst_Instantaneous_SpawnGroup;
	float Constants_Lightning_02_SpawnBurst_Instantaneous_SpawnProbability;
	float Constants_Lightning_01_Multiply_VectorByFloat_FLOAT_VAR;
	float3 Constants_Lightning_01_Multiply_VectorByFloat001_VECTOR_VAR;
	float Constants_Lightning_01_Multiply_VectorByFloat001_FLOAT_VAR;
	float Constants_Lightning_01_EmitterState001_LoopDuration;
	float Constants_Lightning_01_EmitterState001_LoopDelay;
	float Constants_Lightning_01_Multiply_Float003_B;
	float Constants_Lightning_01_SpawnBurst_Instantaneous_SpawnTime;
	int Constants_Lightning_01_SpawnBurst_Instantaneous_SpawnGroup;
	float Constants_Lightning_01_SpawnBurst_Instantaneous_SpawnProbability;
	int Emitter_RandomSeed;
}

struct FParamMap0_VectorFromFloat002
{
	float Value;
};

struct FParamMap0_VectorFromFloat001
{
	float Value;
};

struct FParamMap0_VectorFromFloat
{
	float Value;
};

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_Vector2DFromCurve
{
	float CurveIndex;
	float2 ScaleCurve;
};

struct FParamMap0_User_Sparks_02
{
	int RandomSeed;
};

struct FParamMap0_User
{
	bool ArcDeclining;
	bool ArcReverse;
	float BeamCurveMinFactor;
	float4 Color;
	float ColorBoost;
	float CurvePower;
	float3 End;
	float3 End2;
	float MaxLifeTime;
	float MinLifeTime;
	float Power;
	float Quantity;
	float RibbonWidth;
	float Size;
	FParamMap0_User_Sparks_02 Sparks_02;
};

struct FParamMap0_UpdateAge
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_UniformRangedInt
{
	bool FixedRandomSeed;
	int Maximum;
	int Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat002
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float CollisionDistanceToCollision;
	float CollisionFriction;
	bool CollisionIsResting;
	float3 CollisionNormal;
	float3 CollisionParticleRelativeCollisionLocation;
	float3 CollisionParticleWorldPosition;
	float CollisionRestitution;
	float CollisionSize;
	bool CollisionValid;
	float3 CollisionVelocity;
	float3 CollisionWorldPosition;
	float3 MeshScaleFactor;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	int ScalabilityExecutionState;
	bool SpawningbCanEverSpawn;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SystemState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_Subtract_Vector003
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Vector002
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Vector001
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0_SpriteSizeScaleBySpeed
{
	float2 InitialSpriteSize;
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	bool SampleScaleFactorByCurve;
	float3 SourceVelocity;
	float VelocityThreshold;
};

struct FParamMap0_SphereLocation
{
	int CoordinateSpace;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	bool HemisphereZ;
	float3 NonUniformScale;
	bool NormalizeThickness;
	float3 Offset;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	float3 SphereOrigin;
	float SphereRadius;
	int SurfaceExpansionMode;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnRate;
};

struct FParamMap0_SpawnBurst_Instantaneous
{
	float Age;
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_SpawnBeam
{
	float SplinePositionErrorThreshold;
};

struct FParamMap0_Sparks_02_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Sparks_02_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Sparks_02
{
	float Age;
	float AlphaScale;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Sparks_02_Scalability Scalability;
	FParamMap0_Sparks_02_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_Sparks_01_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Sparks_01_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Sparks_01
{
	float Age;
	float AlphaScale;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Sparks_01_Scalability Scalability;
	FParamMap0_Sparks_01_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_SetVariables_EFC671304423FD02F8C7FBA80A98EB9F_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_EFC671304423FD02F8C7FBA80A98EB9F
{
	FParamMap0_SetVariables_EFC671304423FD02F8C7FBA80A98EB9F_Particles Particles;
};

struct FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_03
{
	float BeamCurve2;
	float3 RandomVector;
};

struct FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_02
{
	float BeamCurve2;
	float3 RandomVector;
};

struct FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_01
{
	float BeamCurve2;
	float3 RandomVector;
};

struct FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F
{
	FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_01 Lightning_01;
	FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_02 Lightning_02;
	FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_03 Lightning_03;
};

struct FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22
{
	FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Particles Particles;
};

struct FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_03
{
	float LifeTime;
};

struct FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_02
{
	float LifeTime;
};

struct FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_01
{
	float LifeTime;
};

struct FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08
{
	FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_01 Lightning_01;
	FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_02 Lightning_02;
	FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_03 Lightning_03;
};

struct FParamMap0_SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7_Lightning_01
{
	int Complexity;
};

struct FParamMap0_SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7
{
	FParamMap0_SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7_Lightning_01 Lightning_01;
};

struct FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA
{
	FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA_Particles Particles;
};

struct FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Particles
{
	float3 RandomMovement;
};

struct FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7
{
	FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Particles Particles;
};

struct FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_03
{
	int Complexity;
};

struct FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_02
{
	int Complexity;
};

struct FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A
{
	FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_02 Lightning_02;
	FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_03 Lightning_03;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_RibbonWidthScale
{
	float RibbonWidthScale;
};

struct FParamMap0_RandomVector002
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector001
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float RibbonWidth;
	float3 Scale;
	float2 SpriteSize;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse001
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision
{
	FParamMap0_Particles_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Particles_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
};

struct FParamMap0_Particles
{
	float Age;
	float3 BeamSplineBinormal;
	float3 BeamSplineNormal;
	float3 BeamSplineTangent;
	FParamMap0_Particles_Collision Collision;
	float4 Color;
	float4 DynamicMaterialParameter;
	bool HasCollided;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	int NumberOfCollisions;
	float3 Position;
	float3 PreviousVelocity;
	float3 RandomMovement;
	float RestCounter;
	NiagaraID RibbonID;
	float RibbonLinkOrder;
	float RibbonTwist;
	float RibbonWidth;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_UpdateAge
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_SphereLocation
{
	float3 SphereNormal;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision
{
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool CollisionValid;
	float3 ModuleCollision1Normal;
	bool ModuleCollision1Valid;
	float3 ModuleCollision2Normal;
	bool ModuleCollision2Valid;
	float3 ModuleCombinedCollisionNormal;
	float3 TempPreviousForce;
	float3 TempPreviousPosition;
	float3 TempPreviousVelocity;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_Collision Collision;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SphereLocation SphereLocation;
	FParamMap0_OUTPUT_VAR_UpdateAge UpdateAge;
};

struct FParamMap0_NormalizeVector
{
	float3 VectorToNormalize;
};

struct FParamMap0_NormalizedAngleToDegrees001
{
	float NormalizedAngle;
};

struct FParamMap0_NMS_BeamComplexity
{
	float3 EndLocation;
	float3 StartLocation;
};

struct FParamMap0_Multiply_VectorByFloat005
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat004
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat003
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat002
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat001
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_Float004
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float003
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float002
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float001
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float
{
	float A;
	float B;
};

struct FParamMap0_MeshSizeScale
{
	float3 InitialMeshScale;
	float3 ScaleFactor;
};

struct FParamMap0_MakeIntFromFloat
{
	float FLOAT_VAR;
};

struct FParamMap0_MakeFloatFromInt
{
	int INT_VAR;
};

struct FParamMap0_MakeCustomVectorFromBool002
{
	bool BOOL_VAR;
	float3 FalseVector;
	float3 TrueVector;
};

struct FParamMap0_MakeCustomVectorFromBool001
{
	bool BOOL_VAR;
	float3 FalseVector;
	float3 TrueVector;
};

struct FParamMap0_MakeCustomVectorFromBool
{
	bool BOOL_VAR;
	float3 FalseVector;
	float3 TrueVector;
};

struct FParamMap0_MakeCustomFloatFromBool001
{
	bool BOOL_VAR;
	float FalseFloat;
	float TrueFloat;
};

struct FParamMap0_MakeCustomFloatFromBool
{
	bool BOOL_VAR;
	float FalseFloat;
	float TrueFloat;
};

struct FParamMap0_Local_SystemState
{
	bool LoopCountIncreased;
};

struct FParamMap0_Local_SpriteSizeScaleBySpeed
{
	float NormalizedVelocityRange;
};

struct FParamMap0_Local_SphereLocation
{
	float3 SphereVector;
};

struct FParamMap0_Local_SpawnRate
{
	float InterpStartDT;
	float IntervalDT;
	int SpawnCount;
	float SpawnRate;
};

struct FParamMap0_Local_SpawnBeam
{
	float3 BeamDirection;
	float3 BeamVector;
	float NormalizedExecIndex;
	float StartEndVecLength;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_InitialMeshOrientation
{
	bool Temp;
};

struct FParamMap0_Local_EmitterState001
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse001
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision
{
	FParamMap0_Local_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Local_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	float ModuleParticleRadius;
	bool UpdateMeshRotation;
};

struct FParamMap0_Local_BeamEmitterSetup
{
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
};

struct FParamMap0_Local_AddVelocityInCone
{
	float3 ConeVector;
	float DotBetweenConeVectorAndAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Local_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_Local_Collision Collision;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_EmitterState001 EmitterState001;
	FParamMap0_Local_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SpawnBeam SpawnBeam;
	FParamMap0_Local_SpawnRate SpawnRate;
	FParamMap0_Local_SphereLocation SphereLocation;
	FParamMap0_Local_SpriteSizeScaleBySpeed SpriteSizeScaleBySpeed;
	FParamMap0_Local_SystemState SystemState;
};

struct FParamMap0_Lightning_03_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Lightning_03_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Lightning_03
{
	float Age;
	float BeamCurve2;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	int Complexity;
	float CurrentLoopDuration;
	int DustParticlesQuantity;
	int ExecutionState;
	int ExecutionStateSource;
	float LifeTime;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	float3 RandomVector;
	FParamMap0_Lightning_03_Scalability Scalability;
	FParamMap0_Lightning_03_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_Lightning_02_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Lightning_02_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Lightning_02
{
	float Age;
	float BeamCurve2;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	int Complexity;
	float CurrentLoopDuration;
	int DustParticlesQuantity;
	int ExecutionState;
	int ExecutionStateSource;
	float LifeTime;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	float3 RandomVector;
	FParamMap0_Lightning_02_Scalability Scalability;
	FParamMap0_Lightning_02_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_Lightning_01_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Lightning_01_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Lightning_01
{
	float Age;
	float BeamCurve2;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	int Complexity;
	float CurrentLoopDuration;
	int DustParticlesQuantity;
	int ExecutionState;
	int ExecutionStateSource;
	float LifeTime;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	float3 RandomVector;
	FParamMap0_Lightning_01_Scalability Scalability;
	FParamMap0_Lightning_01_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_InitialMeshOrientation
{
	float3 OrientationAxis;
	int OrientationCoordinateSpace;
	float3 OrientationVector;
	float3 Rotation;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_Ground_Lightning_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_Ground_Lightning_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Ground_Lightning
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Ground_Lightning_Scalability Scalability;
	FParamMap0_Ground_Lightning_SpawnRate SpawnRate;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve008
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve007
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve006
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve005
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve004
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve003
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Sparks_02
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Sparks_01
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float3 SystemXAxis;
};

struct FParamMap0_Engine_Lightning_03
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Lightning_02
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Lightning_01
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Ground_Lightning
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	FParamMap0_Engine_Ground_Lightning Ground_Lightning;
	float InverseDeltaTime;
	FParamMap0_Engine_Lightning_01 Lightning_01;
	FParamMap0_Engine_Lightning_02 Lightning_02;
	FParamMap0_Engine_Lightning_03 Lightning_03;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_Sparks_01 Sparks_01;
	FParamMap0_Engine_Sparks_02 Sparks_02;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_EmitterState001
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_DynamicMaterialParameters
{
	float Index0Param1;
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
	bool Param0WriteEnabled;
	bool Param1WriteEnabled;
	bool Param2WriteEnabled;
	bool Param3WriteEnabled;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_Divide_Float
{
	float A;
	float B;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CrossProduct001
{
	bool NormalizeIncomingVectors;
	float3 VectorA;
	float3 VectorB;
};

struct FParamMap0_CrossProduct
{
	bool NormalizeIncomingVectors;
	float3 VectorA;
	float3 VectorB;
};

struct FParamMap0_Constants_SystemState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Sparks_02_UniformRangedInt
{
	int Maximum;
	int Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Sparks_02_SpawnBurst_Instantaneous
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_Constants_Sparks_02_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Sparks_02
{
	FParamMap0_Constants_Sparks_02_EmitterState EmitterState;
	FParamMap0_Constants_Sparks_02_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_Constants_Sparks_02_UniformRangedInt UniformRangedInt;
};

struct FParamMap0_Constants_Sparks_01_UniformRangedInt
{
	int Maximum;
	int Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Sparks_01_SpawnBurst_Instantaneous
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_Constants_Sparks_01_EmitterState001
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Sparks_01
{
	FParamMap0_Constants_Sparks_01_EmitterState001 EmitterState001;
	FParamMap0_Constants_Sparks_01_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_Constants_Sparks_01_UniformRangedInt UniformRangedInt;
};

struct FParamMap0_Constants_Lightning_03_SpawnBurst_Instantaneous
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_Constants_Lightning_03_Multiply_VectorByFloat001
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Constants_Lightning_03_Multiply_VectorByFloat
{
	float FLOAT_VAR;
};

struct FParamMap0_Constants_Lightning_03_Multiply_Float003
{
	float B;
};

struct FParamMap0_Constants_Lightning_03_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Lightning_03
{
	FParamMap0_Constants_Lightning_03_EmitterState EmitterState;
	FParamMap0_Constants_Lightning_03_Multiply_Float003 Multiply_Float003;
	FParamMap0_Constants_Lightning_03_Multiply_VectorByFloat Multiply_VectorByFloat;
	FParamMap0_Constants_Lightning_03_Multiply_VectorByFloat001 Multiply_VectorByFloat001;
	FParamMap0_Constants_Lightning_03_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_Constants_Lightning_02_SpawnBurst_Instantaneous
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_Constants_Lightning_02_Multiply_VectorByFloat001
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Constants_Lightning_02_Multiply_VectorByFloat
{
	float FLOAT_VAR;
};

struct FParamMap0_Constants_Lightning_02_Multiply_Float003
{
	float B;
};

struct FParamMap0_Constants_Lightning_02_EmitterState001
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Lightning_02
{
	FParamMap0_Constants_Lightning_02_EmitterState001 EmitterState001;
	FParamMap0_Constants_Lightning_02_Multiply_Float003 Multiply_Float003;
	FParamMap0_Constants_Lightning_02_Multiply_VectorByFloat Multiply_VectorByFloat;
	FParamMap0_Constants_Lightning_02_Multiply_VectorByFloat001 Multiply_VectorByFloat001;
	FParamMap0_Constants_Lightning_02_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_Constants_Lightning_01_SpawnBurst_Instantaneous
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_Constants_Lightning_01_Multiply_VectorByFloat001
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Constants_Lightning_01_Multiply_VectorByFloat
{
	float FLOAT_VAR;
};

struct FParamMap0_Constants_Lightning_01_Multiply_Float003
{
	float B;
};

struct FParamMap0_Constants_Lightning_01_EmitterState001
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Lightning_01
{
	FParamMap0_Constants_Lightning_01_EmitterState001 EmitterState001;
	FParamMap0_Constants_Lightning_01_Multiply_Float003 Multiply_Float003;
	FParamMap0_Constants_Lightning_01_Multiply_VectorByFloat Multiply_VectorByFloat;
	FParamMap0_Constants_Lightning_01_Multiply_VectorByFloat001 Multiply_VectorByFloat001;
	FParamMap0_Constants_Lightning_01_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_Constants_Ground_Lightning_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
};

struct FParamMap0_Constants_Ground_Lightning_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_Ground_Lightning
{
	FParamMap0_Constants_Ground_Lightning_EmitterState EmitterState;
	FParamMap0_Constants_Ground_Lightning_SpawnRate SpawnRate;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Ground_Lightning Ground_Lightning;
	FParamMap0_Constants_Lightning_01 Lightning_01;
	FParamMap0_Constants_Lightning_02 Lightning_02;
	FParamMap0_Constants_Lightning_03 Lightning_03;
	FParamMap0_Constants_Sparks_01 Sparks_01;
	FParamMap0_Constants_Sparks_02 Sparks_02;
	FParamMap0_Constants_SystemState SystemState;
};

struct FParamMap0_ColorFromCurve
{
	float CurveIndex;
};

struct FParamMap0_Color
{
	float4 Color;
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_Collision_CollisionQueryAndResponse001
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision_CollisionQueryAndResponse
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision
{
	float AdvancedAgingRate;
	bool CollisionEnabled;
	FParamMap0_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool ControlRestStateViaSurfaceNormal;
	bool CorrectInterpenetration;
	float CPUTraceVectorLengthMultiplier;
	bool EnableRestState;
	float Friction;
	float FrictionDuringaBounce;
	float MaxCPUTraceLength;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	bool RandomizeCollisionNormalVector;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_BeamWidth
{
	float BeamTwistAmount;
	float BeamWidth;
};

struct FParamMap0_BeamEmitterSetup
{
	bool AbsoluteEndTangent;
	bool AbsoluteStartTangent;
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float3 BeamStartTangent;
	bool UseBeamTangents;
};

struct FParamMap0_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	int ConeAxisCoordinateSpace;
	bool UseVelocityFalloffOnConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
	float VelocityStrength;
};

struct FParamMap0_Add_Vector005
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector003
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector002
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector001
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Float
{
	float A;
	float B;
};

struct FParamMap0
{
	FParamMap0_Add_Float Add_Float;
	FParamMap0_Add_Vector Add_Vector;
	FParamMap0_Add_Vector001 Add_Vector001;
	FParamMap0_Add_Vector002 Add_Vector002;
	FParamMap0_Add_Vector003 Add_Vector003;
	FParamMap0_Add_Vector005 Add_Vector005;
	FParamMap0_AddVelocityInCone AddVelocityInCone;
	FParamMap0_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_BeamWidth BeamWidth;
	FParamMap0_Collision Collision;
	FParamMap0_Color Color;
	FParamMap0_ColorFromCurve ColorFromCurve;
	FParamMap0_Constants Constants;
	FParamMap0_CrossProduct CrossProduct;
	FParamMap0_CrossProduct001 CrossProduct001;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Divide_Float Divide_Float;
	FParamMap0_Drag Drag;
	FParamMap0_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_EmitterState001 EmitterState001;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_FloatFromCurve003 FloatFromCurve003;
	FParamMap0_FloatFromCurve004 FloatFromCurve004;
	FParamMap0_FloatFromCurve005 FloatFromCurve005;
	FParamMap0_FloatFromCurve006 FloatFromCurve006;
	FParamMap0_FloatFromCurve007 FloatFromCurve007;
	FParamMap0_FloatFromCurve008 FloatFromCurve008;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_Ground_Lightning Ground_Lightning;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Lightning_01 Lightning_01;
	FParamMap0_Lightning_02 Lightning_02;
	FParamMap0_Lightning_03 Lightning_03;
	FParamMap0_Local Local;
	FParamMap0_MakeCustomFloatFromBool MakeCustomFloatFromBool;
	FParamMap0_MakeCustomFloatFromBool001 MakeCustomFloatFromBool001;
	FParamMap0_MakeCustomVectorFromBool MakeCustomVectorFromBool;
	FParamMap0_MakeCustomVectorFromBool001 MakeCustomVectorFromBool001;
	FParamMap0_MakeCustomVectorFromBool002 MakeCustomVectorFromBool002;
	FParamMap0_MakeFloatFromInt MakeFloatFromInt;
	FParamMap0_MakeIntFromFloat MakeIntFromFloat;
	FParamMap0_MeshSizeScale MeshSizeScale;
	FParamMap0_Multiply_Float Multiply_Float;
	FParamMap0_Multiply_Float001 Multiply_Float001;
	FParamMap0_Multiply_Float002 Multiply_Float002;
	FParamMap0_Multiply_Float003 Multiply_Float003;
	FParamMap0_Multiply_Float004 Multiply_Float004;
	FParamMap0_Multiply_VectorByFloat Multiply_VectorByFloat;
	FParamMap0_Multiply_VectorByFloat001 Multiply_VectorByFloat001;
	FParamMap0_Multiply_VectorByFloat002 Multiply_VectorByFloat002;
	FParamMap0_Multiply_VectorByFloat003 Multiply_VectorByFloat003;
	FParamMap0_Multiply_VectorByFloat004 Multiply_VectorByFloat004;
	FParamMap0_Multiply_VectorByFloat005 Multiply_VectorByFloat005;
	FParamMap0_NMS_BeamComplexity NMS_BeamComplexity;
	FParamMap0_NormalizedAngleToDegrees001 NormalizedAngleToDegrees001;
	FParamMap0_NormalizeVector NormalizeVector;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_RandomVector RandomVector;
	FParamMap0_RandomVector001 RandomVector001;
	FParamMap0_RandomVector002 RandomVector002;
	FParamMap0_RibbonWidthScale RibbonWidthScale;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A SetVariables_12051185420E7D3D5817F28DD2F3D62A;
	FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7 SetVariables_37EFE94048FF0092BAD12B9767DEC3B7;
	FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA SetVariables_39F275A84050437F282DE79201AD7DEA;
	FParamMap0_SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7 SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7;
	FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08 SetVariables_7B66B97741ECF3EC033ECC9678557D08;
	FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22 SetVariables_B8B0EADE49895CE1E100F6AAB756CA22;
	FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F;
	FParamMap0_SetVariables_EFC671304423FD02F8C7FBA80A98EB9F SetVariables_EFC671304423FD02F8C7FBA80A98EB9F;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Sparks_01 Sparks_01;
	FParamMap0_Sparks_02 Sparks_02;
	FParamMap0_SpawnBeam SpawnBeam;
	FParamMap0_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_SpawnRate SpawnRate;
	FParamMap0_SphereLocation SphereLocation;
	FParamMap0_SpriteSizeScaleBySpeed SpriteSizeScaleBySpeed;
	FParamMap0_Subtract_Vector Subtract_Vector;
	FParamMap0_Subtract_Vector001 Subtract_Vector001;
	FParamMap0_Subtract_Vector002 Subtract_Vector002;
	FParamMap0_Subtract_Vector003 Subtract_Vector003;
	FParamMap0_System System;
	FParamMap0_SystemState SystemState;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_UniformRangedInt UniformRangedInt;
	FParamMap0_UpdateAge UpdateAge;
	FParamMap0_User User;
	FParamMap0_Vector2DFromCurve Vector2DFromCurve;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
	FParamMap0_VectorFromFloat VectorFromFloat;
	FParamMap0_VectorFromFloat001 VectorFromFloat001;
	FParamMap0_VectorFromFloat002 VectorFromFloat002;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_Sparks_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState_Sparks_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_Sparks_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_Sparks_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_Sparks_02_Func_(inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeInteger_Func_(int In_Min, int In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out int Out_Result, inout FSimulationContext Context);
void UniformRangedInt_Sparks_02_Func_(out int Out_UniformRangedInt, inout FSimulationContext Context);
void SpawnBurst_Instantaneous_Sparks_02_Func_(inout FSimulationContext Context);
void Sparks_02_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_Ground_Lightning_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState_Ground_Lightning_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_Ground_Lightning_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_Ground_Lightning_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_Ground_Lightning_Func_(inout FSimulationContext Context);
void SpawnRate_Ground_Lightning_Func_(inout FSimulationContext Context);
void Ground_Lightning_Func_(inout FSimulationContext Context);
void EmitterState001_EmitterChangeState002_Sparks_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_EmitterChangeState_Sparks_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_EmitterChangeState005_Sparks_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_EmitterChangeState003_Sparks_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_Sparks_01_Func_(inout FSimulationContext Context);
void UniformRangedInt_Sparks_01_Func_(out int Out_UniformRangedInt, inout FSimulationContext Context);
void SpawnBurst_Instantaneous_Sparks_01_Func_(inout FSimulationContext Context);
void Sparks_01_Func_(inout FSimulationContext Context);
void SimulationPosition_Lightning_03_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void SimulationPosition002_Lightning_03_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void Multiply_VectorByFloat_Lightning_03_Func_(out float3 Out_Result, inout FSimulationContext Context);
void Multiply_VectorByFloat001_Lightning_03_Func_(out float3 Out_Result, inout FSimulationContext Context);
void MakeCustomVectorFromBool_Lightning_03_Func_(out float3 Out_NewOutput, inout FSimulationContext Context);
void MakeCustomVectorFromBool001_Lightning_03_Func_(out float3 Out_NewOutput, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void BeamEmitterSetup_Lightning_03_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_Lightning_03_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState_Lightning_03_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_Lightning_03_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_Lightning_03_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_Lightning_03_Func_(inout FSimulationContext Context);
void SimulationPosition003_Lightning_03_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void NMS_BeamComplexity_Lightning_03_Func_(inout FSimulationContext Context);
void MakeFloatFromInt_Lightning_03_Func_(out float Out_Output, inout FSimulationContext Context);
void Multiply_Float003_Lightning_03_Func_(out float Out_Result, inout FSimulationContext Context);
void MakeIntFromFloat_Lightning_03_Func_(out int Out_NewOutput, inout FSimulationContext Context);
void SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_03_Func_(inout FSimulationContext Context);
void SpawnBurst_Instantaneous_Lightning_03_Func_(inout FSimulationContext Context);
void Lightning_03_Func_(inout FSimulationContext Context);
void SimulationPosition_Lightning_02_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void SimulationPosition002_Lightning_02_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void Multiply_VectorByFloat_Lightning_02_Func_(out float3 Out_Result, inout FSimulationContext Context);
void Multiply_VectorByFloat001_Lightning_02_Func_(out float3 Out_Result, inout FSimulationContext Context);
void MakeCustomVectorFromBool_Lightning_02_Func_(out float3 Out_NewOutput, inout FSimulationContext Context);
void MakeCustomVectorFromBool001_Lightning_02_Func_(out float3 Out_NewOutput, inout FSimulationContext Context);
void BeamEmitterSetup_Lightning_02_Func_(inout FSimulationContext Context);
void EmitterState001_EmitterChangeState002_Lightning_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_EmitterChangeState_Lightning_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_EmitterChangeState005_Lightning_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_EmitterChangeState003_Lightning_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_Lightning_02_Func_(inout FSimulationContext Context);
void SimulationPosition003_Lightning_02_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void NMS_BeamComplexity_Lightning_02_Func_(inout FSimulationContext Context);
void MakeFloatFromInt_Lightning_02_Func_(out float Out_Output, inout FSimulationContext Context);
void Multiply_Float003_Lightning_02_Func_(out float Out_Result, inout FSimulationContext Context);
void MakeIntFromFloat_Lightning_02_Func_(out int Out_NewOutput, inout FSimulationContext Context);
void SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_02_Func_(inout FSimulationContext Context);
void SpawnBurst_Instantaneous_Lightning_02_Func_(inout FSimulationContext Context);
void Lightning_02_Func_(inout FSimulationContext Context);
void SimulationPosition_Lightning_01_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void SimulationPosition002_Lightning_01_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void MakeCustomVectorFromBool_Lightning_01_Func_(out float3 Out_NewOutput, inout FSimulationContext Context);
void Multiply_VectorByFloat_Lightning_01_Func_(out float3 Out_Result, inout FSimulationContext Context);
void Multiply_VectorByFloat001_Lightning_01_Func_(out float3 Out_Result, inout FSimulationContext Context);
void MakeCustomVectorFromBool001_Lightning_01_Func_(out float3 Out_NewOutput, inout FSimulationContext Context);
void BeamEmitterSetup_Lightning_01_Func_(inout FSimulationContext Context);
void EmitterState001_EmitterChangeState002_Lightning_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_EmitterChangeState_Lightning_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_EmitterChangeState005_Lightning_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_EmitterChangeState003_Lightning_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState001_Lightning_01_Func_(inout FSimulationContext Context);
void SimulationPosition003_Lightning_01_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void NMS_BeamComplexity_Lightning_01_Func_(inout FSimulationContext Context);
void MakeFloatFromInt_Lightning_01_Func_(out float Out_Output, inout FSimulationContext Context);
void Multiply_Float003_Lightning_01_Func_(out float Out_Result, inout FSimulationContext Context);
void MakeIntFromFloat_Lightning_01_Func_(out int Out_NewOutput, inout FSimulationContext Context);
void SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7_Lightning_01_Func_(inout FSimulationContext Context);
void SpawnBurst_Instantaneous_Lightning_01_Func_(inout FSimulationContext Context);
void Lightning_01_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result6 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result7 = In_Condition && Result6;
	int ENiagaraExecutionState_IfResult;
	int ENiagaraExecutionStateSource_IfResult;
	if(Result7)
	{
	ENiagaraExecutionState_IfResult = In_NewState;
	ENiagaraExecutionStateSource_IfResult = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult;
}

void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result11 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result12 = In_Condition && Result11;
	int ENiagaraExecutionState_IfResult1;
	int ENiagaraExecutionStateSource_IfResult1;
	if(Result12)
	{
	ENiagaraExecutionState_IfResult1 = In_NewState;
	ENiagaraExecutionStateSource_IfResult1 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult1 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult1 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult1;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult1;
}

void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result14 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result15 = In_Condition && Result14;
	int ENiagaraExecutionState_IfResult2;
	int ENiagaraExecutionStateSource_IfResult2;
	if(Result15)
	{
	ENiagaraExecutionState_IfResult2 = In_NewState;
	ENiagaraExecutionStateSource_IfResult2 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult2 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult2 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult2;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult2;
}

void SystemState_Func_(inout FSimulationContext Context)
{
	float Constant2 = 0;
	bool Result = NiagaraAll(Context.Map.System.Age == Constant2);
	float Constant3 = 0.016667;
	float Result1 = max(Context.Map.Constants.SystemState.LoopDuration, Constant3);
	float Duration_IfResult;
	if(Result)
	{
	Duration_IfResult = Result1;
	}
	else
	{
	Duration_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float Constant4 = 0;
	Context.Map.System.CurrentLoopDuration = Duration_IfResult;
	Context.Map.SystemState.LoopDelay = Constant4;
	float Result2 = Context.Map.System.Age + Context.Map.Engine.DeltaTime;
	float Result3 = Context.Map.Engine.DeltaTime + Context.Map.System.LoopedAge;
	bool Result4 = NiagaraAll(Result3 >= Context.Map.System.CurrentLoopDuration);
	int Constant5 = 0;
	Context.Map.System.Age = Result2;
	Context.Map.System.LoopedAge = Result3;
	Context.Map.Local.SystemState.LoopCountIncreased = Result4;
	Context.Map.System.LoopCount = Constant5;
	float Constant6 = 0;
	float Duration_IfResult1;
	float LoopedAge_IfResult;
	if(Context.Map.Local.SystemState.LoopCountIncreased)
	{
	Duration_IfResult1 = Context.Map.Constants.SystemState.LoopDuration;
	LoopedAge_IfResult = Constant6;
	}
	else
	{
	Duration_IfResult1 = Context.Map.System.CurrentLoopDuration;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	Context.Map.System.CurrentLoopDuration = Duration_IfResult1;
	Context.Map.System.LoopedAge = LoopedAge_IfResult;
	float Result5 = Context.Map.System.LoopedAge / Context.Map.System.CurrentLoopDuration;
	Context.Map.System.NormalizedLoopAge = Result5;
	bool Constant7 = true;
	int Constant8 = 0;
	SystemState_SystemChangeState002_Func_(Context.Map.Transient.ScalabilityExecutionState, Constant7, Constant8, Context);
	int Constant9 = 1;
	int Constant10 = 1;
	SystemState_SystemChangeState002_Func_(Constant9, Context.Map.Local.SystemState.LoopCountIncreased, Constant10, Context);
	int Constant11 = 3;
	int Constant12 = 0;
	bool Result8 = NiagaraAll(Context.Map.System.ExecutionState != Constant12);
	int Constant13 = 0;
	bool Result9 = NiagaraAll(Context.Map.System.ExecutionStateSource != Constant13);
	bool Result10 = Result8 && Result9;
	int Constant14 = 3;
	SystemState_SystemChangeState_Func_(Constant11, Result10, Constant14, Context);
	bool Constant15 = false;
	Context.Map.System.bCompleteOnInactive = Constant15;
	int Constant16 = 0;
	bool Result13 = NiagaraAll(Context.Map.Engine.Owner.ExecutionState != Constant16);
	int Constant17 = 2;
	SystemState_SystemChangeState001_Func_(Context.Map.Engine.Owner.ExecutionState, Result13, Constant17, Context);
}

void EmitterState_EmitterChangeState002_Sparks_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant28 = 3;
	bool Result25 = NiagaraAll(Context.Map.Sparks_02.ExecutionState != Constant28);
	int Constant29 = 4;
	bool Result26 = NiagaraAll(Context.Map.Sparks_02.ExecutionState != Constant29);
	bool Result27 = Result25 && Result26;
	bool Result28 = In_Condition && Result27;
	bool Result29 = NiagaraAll(Context.Map.Sparks_02.ExecutionStateSource <= In_NewStateSource);
	bool Result30 = Result28 && Result29;
	int ENiagaraExecutionState_IfResult3;
	int ENiagaraExecutionStateSource_IfResult3;
	if(Result30)
	{
	ENiagaraExecutionState_IfResult3 = In_NewState;
	ENiagaraExecutionStateSource_IfResult3 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult3 = Context.Map.Sparks_02.ExecutionState;
	ENiagaraExecutionStateSource_IfResult3 = Context.Map.Sparks_02.ExecutionStateSource;
	}
	Context.Map.Sparks_02.ExecutionState = ENiagaraExecutionState_IfResult3;
	Context.Map.Sparks_02.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult3;
}

void EmitterState_EmitterChangeState_Sparks_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant32 = 3;
	bool Result31 = NiagaraAll(Context.Map.Sparks_02.ExecutionState != Constant32);
	int Constant33 = 4;
	bool Result32 = NiagaraAll(Context.Map.Sparks_02.ExecutionState != Constant33);
	bool Result33 = Result31 && Result32;
	bool Result34 = In_Condition && Result33;
	bool Result35 = NiagaraAll(Context.Map.Sparks_02.ExecutionStateSource <= In_NewStateSource);
	bool Result36 = Result34 && Result35;
	int ENiagaraExecutionState_IfResult4;
	int ENiagaraExecutionStateSource_IfResult4;
	if(Result36)
	{
	ENiagaraExecutionState_IfResult4 = In_NewState;
	ENiagaraExecutionStateSource_IfResult4 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult4 = Context.Map.Sparks_02.ExecutionState;
	ENiagaraExecutionStateSource_IfResult4 = Context.Map.Sparks_02.ExecutionStateSource;
	}
	Context.Map.Sparks_02.ExecutionState = ENiagaraExecutionState_IfResult4;
	Context.Map.Sparks_02.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult4;
}

void EmitterState_EmitterChangeState005_Sparks_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant38 = 3;
	bool Result40 = NiagaraAll(Context.Map.Sparks_02.ExecutionState != Constant38);
	int Constant39 = 4;
	bool Result41 = NiagaraAll(Context.Map.Sparks_02.ExecutionState != Constant39);
	bool Result42 = Result40 && Result41;
	bool Result43 = In_Condition && Result42;
	bool Result44 = NiagaraAll(Context.Map.Sparks_02.ExecutionStateSource <= In_NewStateSource);
	bool Result45 = Result43 && Result44;
	int ENiagaraExecutionState_IfResult5;
	int ENiagaraExecutionStateSource_IfResult5;
	if(Result45)
	{
	ENiagaraExecutionState_IfResult5 = In_NewState;
	ENiagaraExecutionStateSource_IfResult5 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult5 = Context.Map.Sparks_02.ExecutionState;
	ENiagaraExecutionStateSource_IfResult5 = Context.Map.Sparks_02.ExecutionStateSource;
	}
	Context.Map.Sparks_02.ExecutionState = ENiagaraExecutionState_IfResult5;
	Context.Map.Sparks_02.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult5;
}

void EmitterState_EmitterChangeState003_Sparks_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant44 = 3;
	bool Result50 = NiagaraAll(Context.Map.Sparks_02.ExecutionState != Constant44);
	int Constant45 = 4;
	bool Result51 = NiagaraAll(Context.Map.Sparks_02.ExecutionState != Constant45);
	bool Result52 = Result50 && Result51;
	bool Result53 = In_Condition && Result52;
	bool Result54 = NiagaraAll(Context.Map.Sparks_02.ExecutionStateSource <= In_NewStateSource);
	bool Result55 = Result53 && Result54;
	int ENiagaraExecutionState_IfResult6;
	int ENiagaraExecutionStateSource_IfResult6;
	if(Result55)
	{
	ENiagaraExecutionState_IfResult6 = In_NewState;
	ENiagaraExecutionStateSource_IfResult6 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult6 = Context.Map.Sparks_02.ExecutionState;
	ENiagaraExecutionStateSource_IfResult6 = Context.Map.Sparks_02.ExecutionStateSource;
	}
	Context.Map.Sparks_02.ExecutionState = ENiagaraExecutionState_IfResult6;
	Context.Map.Sparks_02.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult6;
}

void EmitterState_Sparks_02_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.Sparks_02.ExecutionState;
	float Constant18 = 0.016667;
	float Result16 = max(Context.Map.Constants.Sparks_02.EmitterState.LoopDuration, Constant18);
	Context.Map.Local.EmitterState.LoopDuration = Result16;
	float Constant19 = 0;
	bool Result17 = NiagaraAll(Context.Map.Sparks_02.Age == Constant19);
	float Duration_IfResult2;
	if(Result17)
	{
	Duration_IfResult2 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult2 = Context.Map.Sparks_02.CurrentLoopDuration;
	}
	float Constant20 = 0;
	Context.Map.Sparks_02.CurrentLoopDuration = Duration_IfResult2;
	Context.Map.EmitterState.LoopDelay = Constant20;
	float Result18 = Context.Map.Sparks_02.Age + Context.Map.Engine.DeltaTime;
	float Result19 = Context.Map.Engine.DeltaTime + Context.Map.Sparks_02.LoopedAge;
	bool Result20 = NiagaraAll(Result19 >= Context.Map.Sparks_02.CurrentLoopDuration);
	int Constant21 = 0;
	Context.Map.Sparks_02.Age = Result18;
	Context.Map.Sparks_02.LoopedAge = Result19;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result20;
	Context.Map.Sparks_02.LoopCount = Constant21;
	float Constant22 = 0;
	float Duration_IfResult3;
	float LoopedAge_IfResult1;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	Duration_IfResult3 = Context.Map.Local.EmitterState.LoopDuration;
	LoopedAge_IfResult1 = Constant22;
	}
	else
	{
	Duration_IfResult3 = Context.Map.Sparks_02.CurrentLoopDuration;
	LoopedAge_IfResult1 = Context.Map.Sparks_02.LoopedAge;
	}
	Context.Map.Sparks_02.CurrentLoopDuration = Duration_IfResult3;
	Context.Map.Sparks_02.LoopedAge = LoopedAge_IfResult1;
	float Result21 = Context.Map.Sparks_02.LoopedAge / Context.Map.Sparks_02.CurrentLoopDuration;
	Context.Map.Sparks_02.NormalizedLoopAge = Result21;
	float Constant23 = 0;
	float Constant24 = 1.0001;
	float Result22 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant23,Constant24);
	Context.Map.Sparks_02.Scalability.DistanceFraction = Result22;
	int Constant25 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant25;
	int Constant26 = 0;
	bool Result23 = NiagaraAll(Context.Map.Engine.Sparks_02.NumParticles == Constant26);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result23;
	int Constant27 = 0;
	bool Result24 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant27);
	EmitterState_EmitterChangeState002_Sparks_02_Func_(Context.Map.System.ExecutionState, Result24, Context.Map.System.ExecutionStateSource, Context);
	int Constant30 = 1;
	int Constant31 = 1;
	EmitterState_EmitterChangeState_Sparks_02_Func_(Constant30, Context.Map.Local.EmitterState.LoopCountIncreased, Constant31, Context);
	int Constant34 = 1;
	int Constant35 = 0;
	bool Result37 = NiagaraAll(Context.Map.System.ExecutionState != Constant35);
	int Constant36 = 2;
	bool Result38 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant36);
	bool Result39 = Result37 && Result38;
	int Constant37 = 1;
	EmitterState_EmitterChangeState005_Sparks_02_Func_(Constant34, Result39, Constant37, Context);
	int Constant40 = 3;
	int Constant41 = 0;
	bool Result46 = NiagaraAll(Context.Map.Sparks_02.ExecutionState != Constant41);
	int Constant42 = 0;
	bool Result47 = NiagaraAll(Context.Map.Sparks_02.ExecutionStateSource != Constant42);
	bool Result48 = Result46 && Result47;
	bool Result49 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result48;
	int Constant43 = 3;
	EmitterState_EmitterChangeState003_Sparks_02_Func_(Constant40, Result49, Constant43, Context);
}

void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant56 = false;
	int Constant57 = 0;
	bool Result56 = NiagaraAll(In_RandomnessMode == Constant57);
	bool Result57 = Constant56 && Result56;
	int Constant58 = 1;
	bool Result58 = NiagaraAll(In_RandomnessMode == Constant58);
	bool Result59 = Result57 || Result58;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.User.Sparks_02.RandomSeed;
	}
	int Constant59 = 0;
	int Constant60 = 0;
	int Constant61 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant59;
	Seed3_IfResult = Constant60;
	}
	else
	{
	Seed1_IfResult = Constant61;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant62 = -1;
	int Constant63 = -1;
	int Constant64 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result59)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant62;
	Seed2_IfResult1 = Constant63;
	Seed3_IfResult1 = Constant64;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result59;
}

void RandomRangeInteger_Func_(int In_Min, int In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out int Out_Result, inout FSimulationContext Context)
{
	int Constant52 = (0);
	bool Constant53 = false;
	int Constant54 = 0;
	int Constant55 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant52, In_OverrideSeed, Constant54, Constant55, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms, Context);
	int Result60 = In_Max - In_Min;
	int Constant65 = 1;
	int Result61 = Result60 + Constant65;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed3;
	int Result62 = rand_int(Result61, Seed1, Seed2, Seed3);
	int Result63 = rand_int(Result61);
	int Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result62;
	}
	else
	{
	Random_IfResult = Result63;
	}
	int Result64 = In_Min + Random_IfResult;
	Out_Result = Result64;
}

void UniformRangedInt_Sparks_02_Func_(out int Out_UniformRangedInt, inout FSimulationContext Context)
{
	bool Constant46 = false;
	Context.Map.UniformRangedInt.OverrideRandomness = Constant46;
	int Constant47 = 0;
	Context.Map.UniformRangedInt.RandomnessMode = Constant47;
	bool Constant48 = false;
	Context.Map.UniformRangedInt.OverrideSeed = Constant48;
	bool Constant49 = false;
	Context.Map.UniformRangedInt.FixedRandomSeed = Constant49;
	int Constant50 = 0;
	bool Constant51 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.Map.UniformRangedInt.OverrideRandomness)
	{
	Mode_IfResult = Context.Map.UniformRangedInt.RandomnessMode;
	Override_IfResult = Context.Map.UniformRangedInt.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant50;
	Override_IfResult = Constant51;
	}
	int RandomRangeInteger_Func_Output_Result;
	RandomRangeInteger_Func_(Context.Map.Constants.Sparks_02.UniformRangedInt.Minimum, Context.Map.Constants.Sparks_02.UniformRangedInt.Maximum, Context.Map.Constants.Sparks_02.UniformRangedInt.RandomSeed, Mode_IfResult, Override_IfResult, Context.Map.UniformRangedInt.FixedRandomSeed, RandomRangeInteger_Func_Output_Result, Context);
	Out_UniformRangedInt = RandomRangeInteger_Func_Output_Result;
}

void SpawnBurst_Instantaneous_Sparks_02_Func_(inout FSimulationContext Context)
{
	Context.Map.SpawnBurst_Instantaneous.Age = Context.Map.Sparks_02.LoopedAge;
	float Result65 = Context.Map.SpawnBurst_Instantaneous.Age - Context.Map.Engine.DeltaTime;
	float Result66 = Context.Map.Constants.Sparks_02.SpawnBurst_Instantaneous.SpawnTime - Result65;
	float Constant66 = 0;
	float Output11;
	Output11 = Constant66;
	bool Result67 = NiagaraAll(Result66 >= Output11);
	float Result68 = Context.Map.Constants.Sparks_02.SpawnBurst_Instantaneous.SpawnTime - Context.Map.SpawnBurst_Instantaneous.Age;
	bool Result69 = NiagaraAll(Result68 < Output11);
	bool Result70 = Result67 && Result69;
	float Constant67 = 1;
	Context.Map.Transient.ScalabilityEmitterSpawnCountScale = Constant67;
	int Constant68 = 0;
	bool Result71 = NiagaraAll(Context.Map.SpawnBurst_Instantaneous.SpawnCount == Constant68);
	float Constant69 = 0;
	float Result72 = Context.Map.SpawnBurst_Instantaneous.SpawnCount * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.Sparks_02.SpawnCountScale;
	float Constant70 = 1;
	float Result73 = max(Result72, Constant70);
	float float_IfResult;
	if(Result71)
	{
	float_IfResult = Constant69;
	}
	else
	{
	float_IfResult = Result73;
	}
	float Constant71 = 0;
	NiagaraSpawnInfo Output12;
	Output12.Count = float_IfResult;
	Output12.InterpStartDt = Result66;
	Output12.IntervalDt = Constant71;
	Output12.SpawnGroup = Context.Map.Constants.Sparks_02.SpawnBurst_Instantaneous.SpawnGroup;
	int Constant72 = 0;
	float Constant73 = 0;
	float Constant74 = 0;
	NiagaraSpawnInfo Output13;
	Output13.Count = Constant72;
	Output13.InterpStartDt = Constant73;
	Output13.SpawnGroup = Context.Map.Constants.Sparks_02.SpawnBurst_Instantaneous.SpawnGroup;
	Output13.IntervalDt = Constant74;
	NiagaraSpawnInfo SpawnInfo_IfResult;
	if(Result70)
	{
	SpawnInfo_IfResult = Output12;
	}
	else
	{
	SpawnInfo_IfResult = Output13;
	}
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst = SpawnInfo_IfResult;
	bool Constant75 = false;
	Context.Map.Transient.SpawningbCanEverSpawn = Constant75;
	bool Result74 = NiagaraAll(Context.Map.Sparks_02.LoopedAge <= Context.Map.Constants.Sparks_02.SpawnBurst_Instantaneous.SpawnTime);
	bool Result75 = Context.Map.Transient.SpawningbCanEverSpawn || Result74;
	Context.Map.Transient.SpawningbCanEverSpawn = Result75;
}

void Sparks_02_Func_(inout FSimulationContext Context)
{
	EnterStatScope(3 );
	EmitterState_Sparks_02_Func_(Context);
	ExitStatScope( );
	int UniformRangedInt_Sparks_02_Func_Output_UniformRangedInt;
	UniformRangedInt_Sparks_02_Func_(UniformRangedInt_Sparks_02_Func_Output_UniformRangedInt, Context);
	Context.Map.SpawnBurst_Instantaneous.SpawnCount = UniformRangedInt_Sparks_02_Func_Output_UniformRangedInt;
	EnterStatScope(4 );
	SpawnBurst_Instantaneous_Sparks_02_Func_(Context);
	ExitStatScope( );
}

void EmitterState_EmitterChangeState002_Ground_Lightning_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant86 = 3;
	bool Result85 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionState != Constant86);
	int Constant87 = 4;
	bool Result86 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionState != Constant87);
	bool Result87 = Result85 && Result86;
	bool Result88 = In_Condition && Result87;
	bool Result89 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionStateSource <= In_NewStateSource);
	bool Result90 = Result88 && Result89;
	int ENiagaraExecutionState_IfResult7;
	int ENiagaraExecutionStateSource_IfResult7;
	if(Result90)
	{
	ENiagaraExecutionState_IfResult7 = In_NewState;
	ENiagaraExecutionStateSource_IfResult7 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult7 = Context.Map.Ground_Lightning.ExecutionState;
	ENiagaraExecutionStateSource_IfResult7 = Context.Map.Ground_Lightning.ExecutionStateSource;
	}
	Context.Map.Ground_Lightning.ExecutionState = ENiagaraExecutionState_IfResult7;
	Context.Map.Ground_Lightning.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult7;
}

void EmitterState_EmitterChangeState_Ground_Lightning_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant90 = 3;
	bool Result91 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionState != Constant90);
	int Constant91 = 4;
	bool Result92 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionState != Constant91);
	bool Result93 = Result91 && Result92;
	bool Result94 = In_Condition && Result93;
	bool Result95 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionStateSource <= In_NewStateSource);
	bool Result96 = Result94 && Result95;
	int ENiagaraExecutionState_IfResult8;
	int ENiagaraExecutionStateSource_IfResult8;
	if(Result96)
	{
	ENiagaraExecutionState_IfResult8 = In_NewState;
	ENiagaraExecutionStateSource_IfResult8 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult8 = Context.Map.Ground_Lightning.ExecutionState;
	ENiagaraExecutionStateSource_IfResult8 = Context.Map.Ground_Lightning.ExecutionStateSource;
	}
	Context.Map.Ground_Lightning.ExecutionState = ENiagaraExecutionState_IfResult8;
	Context.Map.Ground_Lightning.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult8;
}

void EmitterState_EmitterChangeState005_Ground_Lightning_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant96 = 3;
	bool Result100 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionState != Constant96);
	int Constant97 = 4;
	bool Result101 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionState != Constant97);
	bool Result102 = Result100 && Result101;
	bool Result103 = In_Condition && Result102;
	bool Result104 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionStateSource <= In_NewStateSource);
	bool Result105 = Result103 && Result104;
	int ENiagaraExecutionState_IfResult9;
	int ENiagaraExecutionStateSource_IfResult9;
	if(Result105)
	{
	ENiagaraExecutionState_IfResult9 = In_NewState;
	ENiagaraExecutionStateSource_IfResult9 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult9 = Context.Map.Ground_Lightning.ExecutionState;
	ENiagaraExecutionStateSource_IfResult9 = Context.Map.Ground_Lightning.ExecutionStateSource;
	}
	Context.Map.Ground_Lightning.ExecutionState = ENiagaraExecutionState_IfResult9;
	Context.Map.Ground_Lightning.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult9;
}

void EmitterState_EmitterChangeState003_Ground_Lightning_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant102 = 3;
	bool Result110 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionState != Constant102);
	int Constant103 = 4;
	bool Result111 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionState != Constant103);
	bool Result112 = Result110 && Result111;
	bool Result113 = In_Condition && Result112;
	bool Result114 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionStateSource <= In_NewStateSource);
	bool Result115 = Result113 && Result114;
	int ENiagaraExecutionState_IfResult10;
	int ENiagaraExecutionStateSource_IfResult10;
	if(Result115)
	{
	ENiagaraExecutionState_IfResult10 = In_NewState;
	ENiagaraExecutionStateSource_IfResult10 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult10 = Context.Map.Ground_Lightning.ExecutionState;
	ENiagaraExecutionStateSource_IfResult10 = Context.Map.Ground_Lightning.ExecutionStateSource;
	}
	Context.Map.Ground_Lightning.ExecutionState = ENiagaraExecutionState_IfResult10;
	Context.Map.Ground_Lightning.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult10;
}

void EmitterState_Ground_Lightning_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.Ground_Lightning.ExecutionState;
	float Constant76 = 0.016667;
	float Result76 = max(Context.Map.Constants.Ground_Lightning.EmitterState.LoopDuration, Constant76);
	Context.Map.Local.EmitterState.LoopDuration = Result76;
	float Constant77 = 0;
	bool Result77 = NiagaraAll(Context.Map.Ground_Lightning.Age == Constant77);
	float Duration_IfResult4;
	if(Result77)
	{
	Duration_IfResult4 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult4 = Context.Map.Ground_Lightning.CurrentLoopDuration;
	}
	float Constant78 = 0;
	Context.Map.Ground_Lightning.CurrentLoopDuration = Duration_IfResult4;
	Context.Map.EmitterState.LoopDelay = Constant78;
	float Result78 = Context.Map.Ground_Lightning.Age + Context.Map.Engine.DeltaTime;
	float Result79 = Context.Map.Engine.DeltaTime + Context.Map.Ground_Lightning.LoopedAge;
	bool Result80 = NiagaraAll(Result79 >= Context.Map.Ground_Lightning.CurrentLoopDuration);
	int Constant79 = 0;
	Context.Map.Ground_Lightning.Age = Result78;
	Context.Map.Ground_Lightning.LoopedAge = Result79;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result80;
	Context.Map.Ground_Lightning.LoopCount = Constant79;
	float Constant80 = 0;
	float Duration_IfResult5;
	float LoopedAge_IfResult2;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	Duration_IfResult5 = Context.Map.Local.EmitterState.LoopDuration;
	LoopedAge_IfResult2 = Constant80;
	}
	else
	{
	Duration_IfResult5 = Context.Map.Ground_Lightning.CurrentLoopDuration;
	LoopedAge_IfResult2 = Context.Map.Ground_Lightning.LoopedAge;
	}
	Context.Map.Ground_Lightning.CurrentLoopDuration = Duration_IfResult5;
	Context.Map.Ground_Lightning.LoopedAge = LoopedAge_IfResult2;
	float Result81 = Context.Map.Ground_Lightning.LoopedAge / Context.Map.Ground_Lightning.CurrentLoopDuration;
	Context.Map.Ground_Lightning.NormalizedLoopAge = Result81;
	float Constant81 = 0;
	float Constant82 = 1.0001;
	float Result82 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant81,Constant82);
	Context.Map.Ground_Lightning.Scalability.DistanceFraction = Result82;
	int Constant83 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant83;
	int Constant84 = 0;
	bool Result83 = NiagaraAll(Context.Map.Engine.Ground_Lightning.NumParticles == Constant84);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result83;
	int Constant85 = 0;
	bool Result84 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant85);
	EmitterState_EmitterChangeState002_Ground_Lightning_Func_(Context.Map.System.ExecutionState, Result84, Context.Map.System.ExecutionStateSource, Context);
	int Constant88 = 1;
	int Constant89 = 1;
	EmitterState_EmitterChangeState_Ground_Lightning_Func_(Constant88, Context.Map.Local.EmitterState.LoopCountIncreased, Constant89, Context);
	int Constant92 = 1;
	int Constant93 = 0;
	bool Result97 = NiagaraAll(Context.Map.System.ExecutionState != Constant93);
	int Constant94 = 2;
	bool Result98 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant94);
	bool Result99 = Result97 && Result98;
	int Constant95 = 1;
	EmitterState_EmitterChangeState005_Ground_Lightning_Func_(Constant92, Result99, Constant95, Context);
	int Constant98 = 3;
	int Constant99 = 0;
	bool Result106 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionState != Constant99);
	int Constant100 = 0;
	bool Result107 = NiagaraAll(Context.Map.Ground_Lightning.ExecutionStateSource != Constant100);
	bool Result108 = Result106 && Result107;
	bool Result109 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result108;
	int Constant101 = 3;
	EmitterState_EmitterChangeState003_Ground_Lightning_Func_(Constant98, Result109, Constant101, Context);
}

void SpawnRate_Ground_Lightning_Func_(inout FSimulationContext Context)
{
	float Result116 = Context.Map.SpawnRate.SpawnRate * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.Ground_Lightning.SpawnCountScale;
	float Result117 = Reciprocal(Result116);
	float Result118 = 1 - Context.Map.Ground_Lightning.SpawnRate.SpawnRemainder;
	float Result119 = Result117 * Result118;
	Context.Map.Local.SpawnRate.SpawnRate = Result116;
	Context.Map.Local.SpawnRate.IntervalDT = Result117;
	Context.Map.Local.SpawnRate.InterpStartDT = Result119;
	float Constant104 = 0;
	bool Result120 = NiagaraAll(Context.Map.Ground_Lightning.LoopedAge >= Constant104);
	float Constant105 = 1;
	float Constant106 = 0;
	float float_IfResult1;
	if(Result120)
	{
	float_IfResult1 = Constant105;
	}
	else
	{
	float_IfResult1 = Constant106;
	}
	float Result121 = Context.Map.Local.SpawnRate.SpawnRate * float_IfResult1;
	float Result122 = Result121 * Context.Map.Engine.DeltaTime + Context.Map.Ground_Lightning.SpawnRate.SpawnRemainder;
	float Result123 = floor(Result122);
	float Result124 = Result122 - Result123;
	Context.Map.Local.SpawnRate.SpawnCount = Result123;
	Context.Map.Ground_Lightning.SpawnRate.SpawnRemainder = Result124;
	NiagaraSpawnInfo Output14;
	Output14.Count = Context.Map.Local.SpawnRate.SpawnCount;
	Output14.InterpStartDt = Context.Map.Local.SpawnRate.InterpStartDT;
	Output14.IntervalDt = Context.Map.Local.SpawnRate.IntervalDT;
	Output14.SpawnGroup = Context.Map.Constants.Ground_Lightning.SpawnRate.SpawnGroup;
	bool Constant107 = true;
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo = Output14;
	Context.Map.Transient.SpawningbCanEverSpawn = Constant107;
}

void Ground_Lightning_Func_(inout FSimulationContext Context)
{
	EnterStatScope(6 );
	EmitterState_Ground_Lightning_Func_(Context);
	ExitStatScope( );
	Context.Map.SpawnRate.SpawnRate = Context.Map.User.Quantity;
	EnterStatScope(7 );
	SpawnRate_Ground_Lightning_Func_(Context);
	ExitStatScope( );
}

void EmitterState001_EmitterChangeState002_Sparks_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant118 = 3;
	bool Result134 = NiagaraAll(Context.Map.Sparks_01.ExecutionState != Constant118);
	int Constant119 = 4;
	bool Result135 = NiagaraAll(Context.Map.Sparks_01.ExecutionState != Constant119);
	bool Result136 = Result134 && Result135;
	bool Result137 = In_Condition && Result136;
	bool Result138 = NiagaraAll(Context.Map.Sparks_01.ExecutionStateSource <= In_NewStateSource);
	bool Result139 = Result137 && Result138;
	int ENiagaraExecutionState_IfResult11;
	int ENiagaraExecutionStateSource_IfResult11;
	if(Result139)
	{
	ENiagaraExecutionState_IfResult11 = In_NewState;
	ENiagaraExecutionStateSource_IfResult11 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult11 = Context.Map.Sparks_01.ExecutionState;
	ENiagaraExecutionStateSource_IfResult11 = Context.Map.Sparks_01.ExecutionStateSource;
	}
	Context.Map.Sparks_01.ExecutionState = ENiagaraExecutionState_IfResult11;
	Context.Map.Sparks_01.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult11;
}

void EmitterState001_EmitterChangeState_Sparks_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant122 = 3;
	bool Result140 = NiagaraAll(Context.Map.Sparks_01.ExecutionState != Constant122);
	int Constant123 = 4;
	bool Result141 = NiagaraAll(Context.Map.Sparks_01.ExecutionState != Constant123);
	bool Result142 = Result140 && Result141;
	bool Result143 = In_Condition && Result142;
	bool Result144 = NiagaraAll(Context.Map.Sparks_01.ExecutionStateSource <= In_NewStateSource);
	bool Result145 = Result143 && Result144;
	int ENiagaraExecutionState_IfResult12;
	int ENiagaraExecutionStateSource_IfResult12;
	if(Result145)
	{
	ENiagaraExecutionState_IfResult12 = In_NewState;
	ENiagaraExecutionStateSource_IfResult12 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult12 = Context.Map.Sparks_01.ExecutionState;
	ENiagaraExecutionStateSource_IfResult12 = Context.Map.Sparks_01.ExecutionStateSource;
	}
	Context.Map.Sparks_01.ExecutionState = ENiagaraExecutionState_IfResult12;
	Context.Map.Sparks_01.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult12;
}

void EmitterState001_EmitterChangeState005_Sparks_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant128 = 3;
	bool Result149 = NiagaraAll(Context.Map.Sparks_01.ExecutionState != Constant128);
	int Constant129 = 4;
	bool Result150 = NiagaraAll(Context.Map.Sparks_01.ExecutionState != Constant129);
	bool Result151 = Result149 && Result150;
	bool Result152 = In_Condition && Result151;
	bool Result153 = NiagaraAll(Context.Map.Sparks_01.ExecutionStateSource <= In_NewStateSource);
	bool Result154 = Result152 && Result153;
	int ENiagaraExecutionState_IfResult13;
	int ENiagaraExecutionStateSource_IfResult13;
	if(Result154)
	{
	ENiagaraExecutionState_IfResult13 = In_NewState;
	ENiagaraExecutionStateSource_IfResult13 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult13 = Context.Map.Sparks_01.ExecutionState;
	ENiagaraExecutionStateSource_IfResult13 = Context.Map.Sparks_01.ExecutionStateSource;
	}
	Context.Map.Sparks_01.ExecutionState = ENiagaraExecutionState_IfResult13;
	Context.Map.Sparks_01.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult13;
}

void EmitterState001_EmitterChangeState003_Sparks_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant134 = 3;
	bool Result159 = NiagaraAll(Context.Map.Sparks_01.ExecutionState != Constant134);
	int Constant135 = 4;
	bool Result160 = NiagaraAll(Context.Map.Sparks_01.ExecutionState != Constant135);
	bool Result161 = Result159 && Result160;
	bool Result162 = In_Condition && Result161;
	bool Result163 = NiagaraAll(Context.Map.Sparks_01.ExecutionStateSource <= In_NewStateSource);
	bool Result164 = Result162 && Result163;
	int ENiagaraExecutionState_IfResult14;
	int ENiagaraExecutionStateSource_IfResult14;
	if(Result164)
	{
	ENiagaraExecutionState_IfResult14 = In_NewState;
	ENiagaraExecutionStateSource_IfResult14 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult14 = Context.Map.Sparks_01.ExecutionState;
	ENiagaraExecutionStateSource_IfResult14 = Context.Map.Sparks_01.ExecutionStateSource;
	}
	Context.Map.Sparks_01.ExecutionState = ENiagaraExecutionState_IfResult14;
	Context.Map.Sparks_01.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult14;
}

void EmitterState001_Sparks_01_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState001.PreviousEmitterState = Context.Map.Sparks_01.ExecutionState;
	float Constant108 = 0.016667;
	float Result125 = max(Context.Map.Constants.Sparks_01.EmitterState001.LoopDuration, Constant108);
	Context.Map.Local.EmitterState001.LoopDuration = Result125;
	float Constant109 = 0;
	bool Result126 = NiagaraAll(Context.Map.Sparks_01.Age == Constant109);
	float Duration_IfResult6;
	if(Result126)
	{
	Duration_IfResult6 = Context.Map.Local.EmitterState001.LoopDuration;
	}
	else
	{
	Duration_IfResult6 = Context.Map.Sparks_01.CurrentLoopDuration;
	}
	float Constant110 = 0;
	Context.Map.Sparks_01.CurrentLoopDuration = Duration_IfResult6;
	Context.Map.EmitterState001.LoopDelay = Constant110;
	float Result127 = Context.Map.Sparks_01.Age + Context.Map.Engine.DeltaTime;
	float Result128 = Context.Map.Engine.DeltaTime + Context.Map.Sparks_01.LoopedAge;
	bool Result129 = NiagaraAll(Result128 >= Context.Map.Sparks_01.CurrentLoopDuration);
	int Constant111 = 0;
	Context.Map.Sparks_01.Age = Result127;
	Context.Map.Sparks_01.LoopedAge = Result128;
	Context.Map.Local.EmitterState001.LoopCountIncreased = Result129;
	Context.Map.Sparks_01.LoopCount = Constant111;
	float Constant112 = 0;
	float Duration_IfResult7;
	float LoopedAge_IfResult3;
	if(Context.Map.Local.EmitterState001.LoopCountIncreased)
	{
	Duration_IfResult7 = Context.Map.Local.EmitterState001.LoopDuration;
	LoopedAge_IfResult3 = Constant112;
	}
	else
	{
	Duration_IfResult7 = Context.Map.Sparks_01.CurrentLoopDuration;
	LoopedAge_IfResult3 = Context.Map.Sparks_01.LoopedAge;
	}
	Context.Map.Sparks_01.CurrentLoopDuration = Duration_IfResult7;
	Context.Map.Sparks_01.LoopedAge = LoopedAge_IfResult3;
	float Result130 = Context.Map.Sparks_01.LoopedAge / Context.Map.Sparks_01.CurrentLoopDuration;
	Context.Map.Sparks_01.NormalizedLoopAge = Result130;
	float Constant113 = 0;
	float Constant114 = 1.0001;
	float Result131 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant113,Constant114);
	Context.Map.Sparks_01.Scalability.DistanceFraction = Result131;
	int Constant115 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant115;
	int Constant116 = 0;
	bool Result132 = NiagaraAll(Context.Map.Engine.Sparks_01.NumParticles == Constant116);
	Context.Map.Local.EmitterState001.NoActiveEmitterParticles = Result132;
	int Constant117 = 0;
	bool Result133 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant117);
	EmitterState001_EmitterChangeState002_Sparks_01_Func_(Context.Map.System.ExecutionState, Result133, Context.Map.System.ExecutionStateSource, Context);
	int Constant120 = 1;
	int Constant121 = 1;
	EmitterState001_EmitterChangeState_Sparks_01_Func_(Constant120, Context.Map.Local.EmitterState001.LoopCountIncreased, Constant121, Context);
	int Constant124 = 1;
	int Constant125 = 0;
	bool Result146 = NiagaraAll(Context.Map.System.ExecutionState != Constant125);
	int Constant126 = 2;
	bool Result147 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant126);
	bool Result148 = Result146 && Result147;
	int Constant127 = 1;
	EmitterState001_EmitterChangeState005_Sparks_01_Func_(Constant124, Result148, Constant127, Context);
	int Constant130 = 3;
	int Constant131 = 0;
	bool Result155 = NiagaraAll(Context.Map.Sparks_01.ExecutionState != Constant131);
	int Constant132 = 0;
	bool Result156 = NiagaraAll(Context.Map.Sparks_01.ExecutionStateSource != Constant132);
	bool Result157 = Result155 && Result156;
	bool Result158 = Context.Map.Local.EmitterState001.NoActiveEmitterParticles && Result157;
	int Constant133 = 3;
	EmitterState001_EmitterChangeState003_Sparks_01_Func_(Constant130, Result158, Constant133, Context);
}

void UniformRangedInt_Sparks_01_Func_(out int Out_UniformRangedInt, inout FSimulationContext Context)
{
	bool Constant136 = false;
	Context.Map.UniformRangedInt.OverrideRandomness = Constant136;
	int Constant137 = 0;
	Context.Map.UniformRangedInt.RandomnessMode = Constant137;
	bool Constant138 = false;
	Context.Map.UniformRangedInt.OverrideSeed = Constant138;
	bool Constant139 = false;
	Context.Map.UniformRangedInt.FixedRandomSeed = Constant139;
	int Constant140 = 0;
	bool Constant141 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.Map.UniformRangedInt.OverrideRandomness)
	{
	Mode_IfResult1 = Context.Map.UniformRangedInt.RandomnessMode;
	Override_IfResult1 = Context.Map.UniformRangedInt.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant140;
	Override_IfResult1 = Constant141;
	}
	int RandomRangeInteger_Func_Output_Result1;
	RandomRangeInteger_Func_(Context.Map.Constants.Sparks_01.UniformRangedInt.Minimum, Context.Map.Constants.Sparks_01.UniformRangedInt.Maximum, Context.Map.Constants.Sparks_01.UniformRangedInt.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.Map.UniformRangedInt.FixedRandomSeed, RandomRangeInteger_Func_Output_Result1, Context);
	Out_UniformRangedInt = RandomRangeInteger_Func_Output_Result1;
}

void SpawnBurst_Instantaneous_Sparks_01_Func_(inout FSimulationContext Context)
{
	Context.Map.SpawnBurst_Instantaneous.Age = Context.Map.Sparks_01.LoopedAge;
	float Result165 = Context.Map.SpawnBurst_Instantaneous.Age - Context.Map.Engine.DeltaTime;
	float Result166 = Context.Map.Constants.Sparks_01.SpawnBurst_Instantaneous.SpawnTime - Result165;
	float Constant142 = 0;
	float Output15;
	Output15 = Constant142;
	bool Result167 = NiagaraAll(Result166 >= Output15);
	float Result168 = Context.Map.Constants.Sparks_01.SpawnBurst_Instantaneous.SpawnTime - Context.Map.SpawnBurst_Instantaneous.Age;
	bool Result169 = NiagaraAll(Result168 < Output15);
	bool Result170 = Result167 && Result169;
	int Constant143 = 0;
	bool Result171 = NiagaraAll(Context.Map.SpawnBurst_Instantaneous.SpawnCount == Constant143);
	float Constant144 = 0;
	float Result172 = Context.Map.SpawnBurst_Instantaneous.SpawnCount * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.Sparks_01.SpawnCountScale;
	float Constant145 = 1;
	float Result173 = max(Result172, Constant145);
	float float_IfResult2;
	if(Result171)
	{
	float_IfResult2 = Constant144;
	}
	else
	{
	float_IfResult2 = Result173;
	}
	float Constant146 = 0;
	NiagaraSpawnInfo Output16;
	Output16.Count = float_IfResult2;
	Output16.InterpStartDt = Result166;
	Output16.IntervalDt = Constant146;
	Output16.SpawnGroup = Context.Map.Constants.Sparks_01.SpawnBurst_Instantaneous.SpawnGroup;
	int Constant147 = 0;
	float Constant148 = 0;
	float Constant149 = 0;
	NiagaraSpawnInfo Output17;
	Output17.Count = Constant147;
	Output17.InterpStartDt = Constant148;
	Output17.SpawnGroup = Context.Map.Constants.Sparks_01.SpawnBurst_Instantaneous.SpawnGroup;
	Output17.IntervalDt = Constant149;
	NiagaraSpawnInfo SpawnInfo_IfResult1;
	if(Result170)
	{
	SpawnInfo_IfResult1 = Output16;
	}
	else
	{
	SpawnInfo_IfResult1 = Output17;
	}
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst = SpawnInfo_IfResult1;
	bool Result174 = NiagaraAll(Context.Map.Sparks_01.LoopedAge <= Context.Map.Constants.Sparks_01.SpawnBurst_Instantaneous.SpawnTime);
	bool Result175 = Context.Map.Transient.SpawningbCanEverSpawn || Result174;
	Context.Map.Transient.SpawningbCanEverSpawn = Result175;
}

void Sparks_01_Func_(inout FSimulationContext Context)
{
	EnterStatScope(9 );
	EmitterState001_Sparks_01_Func_(Context);
	ExitStatScope( );
	int UniformRangedInt_Sparks_01_Func_Output_UniformRangedInt;
	UniformRangedInt_Sparks_01_Func_(UniformRangedInt_Sparks_01_Func_Output_UniformRangedInt, Context);
	Context.Map.SpawnBurst_Instantaneous.SpawnCount = UniformRangedInt_Sparks_01_Func_Output_UniformRangedInt;
	EnterStatScope(10 );
	SpawnBurst_Instantaneous_Sparks_01_Func_(Context);
	ExitStatScope( );
}

void SimulationPosition_Lightning_03_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant150 = false;
	float3 Constant151 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant150)
	{
	Vector_IfResult = Constant151;
	}
	else
	{
	Vector_IfResult = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult;
}

void SimulationPosition002_Lightning_03_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant153 = false;
	float3 Constant154 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant153)
	{
	Vector_IfResult1 = Constant154;
	}
	else
	{
	Vector_IfResult1 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult1;
}

void Multiply_VectorByFloat_Lightning_03_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result176 = Context.Map.Multiply_VectorByFloat.VECTOR_VAR * Context.Map.Constants.Lightning_03.Multiply_VectorByFloat.FLOAT_VAR;
	Out_Result = Result176;
}

void Multiply_VectorByFloat001_Lightning_03_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result177 = Context.Map.Constants.Lightning_03.Multiply_VectorByFloat001.VECTOR_VAR * Context.Map.Constants.Lightning_03.Multiply_VectorByFloat001.FLOAT_VAR;
	Out_Result = Result177;
}

void MakeCustomVectorFromBool_Lightning_03_Func_(out float3 Out_NewOutput, inout FSimulationContext Context)
{
	float3 Vector_IfResult2;
	if(Context.Map.MakeCustomVectorFromBool.BOOL_VAR)
	{
	Vector_IfResult2 = Context.Map.MakeCustomVectorFromBool.TrueVector;
	}
	else
	{
	Vector_IfResult2 = Context.Map.MakeCustomVectorFromBool.FalseVector;
	}
	Out_NewOutput = Vector_IfResult2;
}

void MakeCustomVectorFromBool001_Lightning_03_Func_(out float3 Out_NewOutput, inout FSimulationContext Context)
{
	float3 Vector_IfResult3;
	if(Context.Map.MakeCustomVectorFromBool001.BOOL_VAR)
	{
	Vector_IfResult3 = Context.Map.MakeCustomVectorFromBool001.TrueVector;
	}
	else
	{
	Vector_IfResult3 = Context.Map.MakeCustomVectorFromBool001.FalseVector;
	}
	Out_NewOutput = Vector_IfResult3;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result179 = length(In_V);
	bool Result180 = NiagaraAll(Result179 < In_Threshold);
	float Result181 = length(In_Fallback);
	float3 Vector_IfResult4;
	float float_IfResult3;
	if(Result180)
	{
	Vector_IfResult4 = In_Fallback;
	float_IfResult3 = In_FallbackLength;
	}
	else
	{
	Vector_IfResult4 = In_V;
	float_IfResult3 = Result179;
	}
	float3 Result182 = Vector_IfResult4 / float_IfResult3;
	float3 Vector_IfResult5;
	float float_IfResult4;
	if(Result180)
	{
	Vector_IfResult5 = In_Fallback;
	float_IfResult4 = Result181;
	}
	else
	{
	Vector_IfResult5 = Result182;
	float_IfResult4 = float_IfResult3;
	}
	Out_Direction = Vector_IfResult5;
	Out_Length = float_IfResult4;
	Out_BelowThreshold = Result180;
}

void BeamEmitterSetup_Lightning_03_Func_(inout FSimulationContext Context)
{
	float3 Result178 = Context.Map.BeamEmitterSetup.BeamStart - Context.Map.BeamEmitterSetup.BeamEnd;
	float3 Constant155 = float3(0,0,1);
	float Constant156 = 1e-05;
	float Constant157 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Result178, Constant155, Constant156, Constant157, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	Context.Map.Local.BeamEmitterSetup.BeamStart = Context.Map.BeamEmitterSetup.BeamStart;
	Context.Map.Local.BeamEmitterSetup.BeamStartEndLength = DirectionAndLengthSafe_Func_Output_Length;
	Context.Map.Local.BeamEmitterSetup.BeamEnd = Context.Map.BeamEmitterSetup.BeamEnd;
	bool Constant158 = false;
	Context.Map.BeamEmitterSetup.AbsoluteStartTangent = Constant158;
	float3 Result183 = Context.Map.BeamEmitterSetup.BeamStartTangent * Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	float3 Result184 = Context.Map.Local.BeamEmitterSetup.BeamStart + Result183;
	float3 Vector_IfResult6;
	if(Context.Map.BeamEmitterSetup.AbsoluteStartTangent)
	{
	Vector_IfResult6 = Context.Map.BeamEmitterSetup.BeamStartTangent;
	}
	else
	{
	Vector_IfResult6 = Result184;
	}
	bool Constant159 = false;
	Context.Map.BeamEmitterSetup.AbsoluteEndTangent = Constant159;
	float3 Result185 = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength * Context.Map.BeamEmitterSetup.BeamEndTangent;
	float3 Result186 = Result185 + Context.Map.Local.BeamEmitterSetup.BeamEnd;
	float3 Vector_IfResult7;
	if(Context.Map.BeamEmitterSetup.AbsoluteEndTangent)
	{
	Vector_IfResult7 = Context.Map.BeamEmitterSetup.BeamEndTangent;
	}
	else
	{
	Vector_IfResult7 = Result186;
	}
	Context.Map.Local.BeamEmitterSetup.BeamStartTangent = Vector_IfResult6;
	Context.Map.Local.BeamEmitterSetup.BeamEndTangent = Vector_IfResult7;
	bool Constant160 = false;
	Context.Map.BeamEmitterSetup.UseBeamTangents = Constant160;
	float3 Result187 = Context.Map.Local.BeamEmitterSetup.BeamEnd - Context.Map.Local.BeamEmitterSetup.BeamStart;
	float3 Constant161 = float3(0,0,1);
	float Constant162 = 1e-05;
	float Constant163 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Result187, Constant161, Constant162, Constant163, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	Context.Map.Lightning_03.BeamStart = Context.Map.Local.BeamEmitterSetup.BeamStart;
	Context.Map.Lightning_03.BeamStartTangent = Context.Map.Local.BeamEmitterSetup.BeamStartTangent;
	Context.Map.Lightning_03.BeamEnd = Context.Map.Local.BeamEmitterSetup.BeamEnd;
	Context.Map.Lightning_03.BeamEndTangent = Context.Map.Local.BeamEmitterSetup.BeamEndTangent;
	Context.Map.Lightning_03.UseBeamTangents = Context.Map.BeamEmitterSetup.UseBeamTangents;
	Context.Map.Lightning_03.BeamStartEndLength = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	Context.Map.Lightning_03.BeamVector = Result187;
	Context.Map.Lightning_03.BeamDirection = DirectionAndLengthSafe_Func_Output_Direction1;
	bool Result188 = NiagaraAll(Context.Map.Lightning_03.LoopCount > Context.Map.Lightning_03.BeamID);
	int Constant164 = -1;
	int int32_IfResult;
	if(Result188)
	{
	int32_IfResult = Context.Map.Lightning_03.LoopCount;
	}
	else
	{
	int32_IfResult = Constant164;
	}
	Context.Map.Lightning_03.BeamID = int32_IfResult;
}

void EmitterState_EmitterChangeState002_Lightning_03_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant175 = 3;
	bool Result198 = NiagaraAll(Context.Map.Lightning_03.ExecutionState != Constant175);
	int Constant176 = 4;
	bool Result199 = NiagaraAll(Context.Map.Lightning_03.ExecutionState != Constant176);
	bool Result200 = Result198 && Result199;
	bool Result201 = In_Condition && Result200;
	bool Result202 = NiagaraAll(Context.Map.Lightning_03.ExecutionStateSource <= In_NewStateSource);
	bool Result203 = Result201 && Result202;
	int ENiagaraExecutionState_IfResult15;
	int ENiagaraExecutionStateSource_IfResult15;
	if(Result203)
	{
	ENiagaraExecutionState_IfResult15 = In_NewState;
	ENiagaraExecutionStateSource_IfResult15 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult15 = Context.Map.Lightning_03.ExecutionState;
	ENiagaraExecutionStateSource_IfResult15 = Context.Map.Lightning_03.ExecutionStateSource;
	}
	Context.Map.Lightning_03.ExecutionState = ENiagaraExecutionState_IfResult15;
	Context.Map.Lightning_03.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult15;
}

void EmitterState_EmitterChangeState_Lightning_03_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant179 = 3;
	bool Result204 = NiagaraAll(Context.Map.Lightning_03.ExecutionState != Constant179);
	int Constant180 = 4;
	bool Result205 = NiagaraAll(Context.Map.Lightning_03.ExecutionState != Constant180);
	bool Result206 = Result204 && Result205;
	bool Result207 = In_Condition && Result206;
	bool Result208 = NiagaraAll(Context.Map.Lightning_03.ExecutionStateSource <= In_NewStateSource);
	bool Result209 = Result207 && Result208;
	int ENiagaraExecutionState_IfResult16;
	int ENiagaraExecutionStateSource_IfResult16;
	if(Result209)
	{
	ENiagaraExecutionState_IfResult16 = In_NewState;
	ENiagaraExecutionStateSource_IfResult16 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult16 = Context.Map.Lightning_03.ExecutionState;
	ENiagaraExecutionStateSource_IfResult16 = Context.Map.Lightning_03.ExecutionStateSource;
	}
	Context.Map.Lightning_03.ExecutionState = ENiagaraExecutionState_IfResult16;
	Context.Map.Lightning_03.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult16;
}

void EmitterState_EmitterChangeState005_Lightning_03_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant185 = 3;
	bool Result213 = NiagaraAll(Context.Map.Lightning_03.ExecutionState != Constant185);
	int Constant186 = 4;
	bool Result214 = NiagaraAll(Context.Map.Lightning_03.ExecutionState != Constant186);
	bool Result215 = Result213 && Result214;
	bool Result216 = In_Condition && Result215;
	bool Result217 = NiagaraAll(Context.Map.Lightning_03.ExecutionStateSource <= In_NewStateSource);
	bool Result218 = Result216 && Result217;
	int ENiagaraExecutionState_IfResult17;
	int ENiagaraExecutionStateSource_IfResult17;
	if(Result218)
	{
	ENiagaraExecutionState_IfResult17 = In_NewState;
	ENiagaraExecutionStateSource_IfResult17 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult17 = Context.Map.Lightning_03.ExecutionState;
	ENiagaraExecutionStateSource_IfResult17 = Context.Map.Lightning_03.ExecutionStateSource;
	}
	Context.Map.Lightning_03.ExecutionState = ENiagaraExecutionState_IfResult17;
	Context.Map.Lightning_03.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult17;
}

void EmitterState_EmitterChangeState003_Lightning_03_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant191 = 3;
	bool Result223 = NiagaraAll(Context.Map.Lightning_03.ExecutionState != Constant191);
	int Constant192 = 4;
	bool Result224 = NiagaraAll(Context.Map.Lightning_03.ExecutionState != Constant192);
	bool Result225 = Result223 && Result224;
	bool Result226 = In_Condition && Result225;
	bool Result227 = NiagaraAll(Context.Map.Lightning_03.ExecutionStateSource <= In_NewStateSource);
	bool Result228 = Result226 && Result227;
	int ENiagaraExecutionState_IfResult18;
	int ENiagaraExecutionStateSource_IfResult18;
	if(Result228)
	{
	ENiagaraExecutionState_IfResult18 = In_NewState;
	ENiagaraExecutionStateSource_IfResult18 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult18 = Context.Map.Lightning_03.ExecutionState;
	ENiagaraExecutionStateSource_IfResult18 = Context.Map.Lightning_03.ExecutionStateSource;
	}
	Context.Map.Lightning_03.ExecutionState = ENiagaraExecutionState_IfResult18;
	Context.Map.Lightning_03.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult18;
}

void EmitterState_Lightning_03_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.Lightning_03.ExecutionState;
	float Constant165 = 0.016667;
	float Result189 = max(Context.Map.Constants.Lightning_03.EmitterState.LoopDuration, Constant165);
	Context.Map.Local.EmitterState.LoopDuration = Result189;
	float Constant166 = 0;
	bool Result190 = NiagaraAll(Context.Map.Lightning_03.Age == Constant166);
	float Duration_IfResult8;
	if(Result190)
	{
	Duration_IfResult8 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult8 = Context.Map.Lightning_03.CurrentLoopDuration;
	}
	float Constant167 = 0;
	Context.Map.Lightning_03.CurrentLoopDuration = Duration_IfResult8;
	Context.Map.EmitterState.LoopDelay = Constant167;
	float Result191 = Context.Map.Lightning_03.Age + Context.Map.Engine.DeltaTime;
	float Result192 = Context.Map.Engine.DeltaTime + Context.Map.Lightning_03.LoopedAge;
	bool Result193 = NiagaraAll(Result192 >= Context.Map.Lightning_03.CurrentLoopDuration);
	int Constant168 = 0;
	Context.Map.Lightning_03.Age = Result191;
	Context.Map.Lightning_03.LoopedAge = Result192;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result193;
	Context.Map.Lightning_03.LoopCount = Constant168;
	float Constant169 = 0;
	float Duration_IfResult9;
	float LoopedAge_IfResult4;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	Duration_IfResult9 = Context.Map.Local.EmitterState.LoopDuration;
	LoopedAge_IfResult4 = Constant169;
	}
	else
	{
	Duration_IfResult9 = Context.Map.Lightning_03.CurrentLoopDuration;
	LoopedAge_IfResult4 = Context.Map.Lightning_03.LoopedAge;
	}
	Context.Map.Lightning_03.CurrentLoopDuration = Duration_IfResult9;
	Context.Map.Lightning_03.LoopedAge = LoopedAge_IfResult4;
	float Result194 = Context.Map.Lightning_03.LoopedAge / Context.Map.Lightning_03.CurrentLoopDuration;
	Context.Map.Lightning_03.NormalizedLoopAge = Result194;
	float Constant170 = 0;
	float Constant171 = 1.0001;
	float Result195 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant170,Constant171);
	Context.Map.Lightning_03.Scalability.DistanceFraction = Result195;
	int Constant172 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant172;
	int Constant173 = 0;
	bool Result196 = NiagaraAll(Context.Map.Engine.Lightning_03.NumParticles == Constant173);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result196;
	int Constant174 = 0;
	bool Result197 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant174);
	EmitterState_EmitterChangeState002_Lightning_03_Func_(Context.Map.System.ExecutionState, Result197, Context.Map.System.ExecutionStateSource, Context);
	int Constant177 = 1;
	int Constant178 = 1;
	EmitterState_EmitterChangeState_Lightning_03_Func_(Constant177, Context.Map.Local.EmitterState.LoopCountIncreased, Constant178, Context);
	int Constant181 = 1;
	int Constant182 = 0;
	bool Result210 = NiagaraAll(Context.Map.System.ExecutionState != Constant182);
	int Constant183 = 2;
	bool Result211 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant183);
	bool Result212 = Result210 && Result211;
	int Constant184 = 1;
	EmitterState_EmitterChangeState005_Lightning_03_Func_(Constant181, Result212, Constant184, Context);
	int Constant187 = 3;
	int Constant188 = 0;
	bool Result219 = NiagaraAll(Context.Map.Lightning_03.ExecutionState != Constant188);
	int Constant189 = 0;
	bool Result220 = NiagaraAll(Context.Map.Lightning_03.ExecutionStateSource != Constant189);
	bool Result221 = Result219 && Result220;
	bool Result222 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result221;
	int Constant190 = 3;
	EmitterState_EmitterChangeState003_Lightning_03_Func_(Constant187, Result222, Constant190, Context);
}

void SimulationPosition003_Lightning_03_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant193 = false;
	float3 Constant194 = float3(0,0,0);
	float3 Vector_IfResult8;
	if(Constant193)
	{
	Vector_IfResult8 = Constant194;
	}
	else
	{
	Vector_IfResult8 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult8;
}

void NMS_BeamComplexity_Lightning_03_Func_(inout FSimulationContext Context)
{
	float X;
	float Y;
	float Z;
	float X1;
	float Y1;
	float Z1;
	X = Context.Map.NMS_BeamComplexity.StartLocation.x;
	Y = Context.Map.NMS_BeamComplexity.StartLocation.y;
	Z = Context.Map.NMS_BeamComplexity.StartLocation.z;
	X1 = Context.Map.NMS_BeamComplexity.EndLocation.x;
	Y1 = Context.Map.NMS_BeamComplexity.EndLocation.y;
	Z1 = Context.Map.NMS_BeamComplexity.EndLocation.z;
	float Result229 = X1 - X;
	float Result230 = Result229 * Result229;
	float Result231 = Y1 - Y;
	float Result232 = Result231 * Result231;
	float Result233 = Result230 + Result232;
	float Result234 = Z1 - Z;
	float Result235 = Result234 * Result234;
	float Result236 = Result233 + Result235;
	float Result237 = sqrt(Result236);
	float Constant195 = 40;
	float Result238 = Result237 / Constant195;
	int Constant196 = 7;
	float Result239 = Result238 + Constant196;
	float Constant197 = 2;
	float Result240 = Result239 / Constant197;
	Context.Map.Lightning_03.Complexity = Result239;
	Context.Map.Lightning_03.DustParticlesQuantity = Result240;
}

void MakeFloatFromInt_Lightning_03_Func_(out float Out_Output, inout FSimulationContext Context)
{
	float NiagaraFloat;
	NiagaraFloat = Context.Map.MakeFloatFromInt.INT_VAR;
	Out_Output = NiagaraFloat;
}

void Multiply_Float003_Lightning_03_Func_(out float Out_Result, inout FSimulationContext Context)
{
	float Result241 = Context.Map.Multiply_Float003.A * Context.Map.Constants.Lightning_03.Multiply_Float003.B;
	Out_Result = Result241;
}

void MakeIntFromFloat_Lightning_03_Func_(out int Out_NewOutput, inout FSimulationContext Context)
{
	int Value;
	Value = Context.Map.MakeIntFromFloat.FLOAT_VAR;
	Out_NewOutput = Value;
}

void SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_03_Func_(inout FSimulationContext Context)
{
	Context.Map.Lightning_03.Complexity = Context.Map.SetVariables_12051185420E7D3D5817F28DD2F3D62A.Lightning_03.Complexity;
}

void SpawnBurst_Instantaneous_Lightning_03_Func_(inout FSimulationContext Context)
{
	Context.Map.SpawnBurst_Instantaneous.Age = Context.Map.Lightning_03.LoopedAge;
	float Result242 = Context.Map.SpawnBurst_Instantaneous.Age - Context.Map.Engine.DeltaTime;
	float Result243 = Context.Map.Constants.Lightning_03.SpawnBurst_Instantaneous.SpawnTime - Result242;
	float Constant198 = 0;
	float Output18;
	Output18 = Constant198;
	bool Result244 = NiagaraAll(Result243 >= Output18);
	float Result245 = Context.Map.Constants.Lightning_03.SpawnBurst_Instantaneous.SpawnTime - Context.Map.SpawnBurst_Instantaneous.Age;
	bool Result246 = NiagaraAll(Result245 < Output18);
	bool Result247 = Result244 && Result246;
	int Constant199 = 0;
	bool Result248 = NiagaraAll(Context.Map.SpawnBurst_Instantaneous.SpawnCount == Constant199);
	float Constant200 = 0;
	float Result249 = Context.Map.SpawnBurst_Instantaneous.SpawnCount * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.Lightning_03.SpawnCountScale;
	float Constant201 = 1;
	float Result250 = max(Result249, Constant201);
	float float_IfResult5;
	if(Result248)
	{
	float_IfResult5 = Constant200;
	}
	else
	{
	float_IfResult5 = Result250;
	}
	float Constant202 = 0;
	NiagaraSpawnInfo Output19;
	Output19.Count = float_IfResult5;
	Output19.InterpStartDt = Result243;
	Output19.IntervalDt = Constant202;
	Output19.SpawnGroup = Context.Map.Constants.Lightning_03.SpawnBurst_Instantaneous.SpawnGroup;
	int Constant203 = 0;
	float Constant204 = 0;
	float Constant205 = 0;
	NiagaraSpawnInfo Output110;
	Output110.Count = Constant203;
	Output110.InterpStartDt = Constant204;
	Output110.SpawnGroup = Context.Map.Constants.Lightning_03.SpawnBurst_Instantaneous.SpawnGroup;
	Output110.IntervalDt = Constant205;
	NiagaraSpawnInfo SpawnInfo_IfResult2;
	if(Result247)
	{
	SpawnInfo_IfResult2 = Output19;
	}
	else
	{
	SpawnInfo_IfResult2 = Output110;
	}
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst = SpawnInfo_IfResult2;
	bool Result251 = NiagaraAll(Context.Map.Lightning_03.LoopedAge <= Context.Map.Constants.Lightning_03.SpawnBurst_Instantaneous.SpawnTime);
	bool Result252 = Context.Map.Transient.SpawningbCanEverSpawn || Result251;
	Context.Map.Transient.SpawningbCanEverSpawn = Result252;
}

void Lightning_03_Func_(inout FSimulationContext Context)
{
	float3 SimulationPosition_Lightning_03_Func_Output_SimulationPosition;
	SimulationPosition_Lightning_03_Func_(SimulationPosition_Lightning_03_Func_Output_SimulationPosition, Context);
	bool Constant152 = false;
	float3 SimulationPosition002_Lightning_03_Func_Output_SimulationPosition;
	SimulationPosition002_Lightning_03_Func_(SimulationPosition002_Lightning_03_Func_Output_SimulationPosition, Context);
	Context.Map.Multiply_VectorByFloat.VECTOR_VAR = Context.Map.Engine.Owner.SystemXAxis;
	Context.Map.MakeCustomVectorFromBool.TrueVector = Context.Map.User.End2;
	Context.Map.MakeCustomVectorFromBool.FalseVector = SimulationPosition_Lightning_03_Func_Output_SimulationPosition;
	Context.Map.MakeCustomVectorFromBool.BOOL_VAR = Constant152;
	Context.Map.MakeCustomVectorFromBool001.BOOL_VAR = Context.Map.User.ArcReverse;
	Context.Map.MakeCustomVectorFromBool001.TrueVector = SimulationPosition002_Lightning_03_Func_Output_SimulationPosition;
	Context.Map.MakeCustomVectorFromBool001.FalseVector = Context.Map.User.End2;
	float3 Multiply_VectorByFloat_Lightning_03_Func_Output_Result;
	Multiply_VectorByFloat_Lightning_03_Func_(Multiply_VectorByFloat_Lightning_03_Func_Output_Result, Context);
	float3 Multiply_VectorByFloat001_Lightning_03_Func_Output_Result;
	Multiply_VectorByFloat001_Lightning_03_Func_(Multiply_VectorByFloat001_Lightning_03_Func_Output_Result, Context);
	float3 MakeCustomVectorFromBool_Lightning_03_Func_Output_NewOutput;
	MakeCustomVectorFromBool_Lightning_03_Func_(MakeCustomVectorFromBool_Lightning_03_Func_Output_NewOutput, Context);
	float3 MakeCustomVectorFromBool001_Lightning_03_Func_Output_NewOutput;
	MakeCustomVectorFromBool001_Lightning_03_Func_(MakeCustomVectorFromBool001_Lightning_03_Func_Output_NewOutput, Context);
	Context.Map.BeamEmitterSetup.BeamStartTangent = Multiply_VectorByFloat_Lightning_03_Func_Output_Result;
	Context.Map.BeamEmitterSetup.BeamEndTangent = Multiply_VectorByFloat001_Lightning_03_Func_Output_Result;
	Context.Map.BeamEmitterSetup.BeamStart = MakeCustomVectorFromBool_Lightning_03_Func_Output_NewOutput;
	Context.Map.BeamEmitterSetup.BeamEnd = MakeCustomVectorFromBool001_Lightning_03_Func_Output_NewOutput;
	EnterStatScope(12 );
	BeamEmitterSetup_Lightning_03_Func_(Context);
	ExitStatScope( );
	EnterStatScope(13 );
	EmitterState_Lightning_03_Func_(Context);
	ExitStatScope( );
	float3 SimulationPosition003_Lightning_03_Func_Output_SimulationPosition;
	SimulationPosition003_Lightning_03_Func_(SimulationPosition003_Lightning_03_Func_Output_SimulationPosition, Context);
	Context.Map.NMS_BeamComplexity.StartLocation = SimulationPosition003_Lightning_03_Func_Output_SimulationPosition;
	Context.Map.NMS_BeamComplexity.EndLocation = Context.Map.User.End2;
	EnterStatScope(14 );
	NMS_BeamComplexity_Lightning_03_Func_(Context);
	ExitStatScope( );
	Context.Map.MakeFloatFromInt.INT_VAR = Context.Map.Lightning_03.Complexity;
	float MakeFloatFromInt_Lightning_03_Func_Output_Output;
	MakeFloatFromInt_Lightning_03_Func_(MakeFloatFromInt_Lightning_03_Func_Output_Output, Context);
	Context.Map.Multiply_Float003.A = MakeFloatFromInt_Lightning_03_Func_Output_Output;
	float Multiply_Float003_Lightning_03_Func_Output_Result;
	Multiply_Float003_Lightning_03_Func_(Multiply_Float003_Lightning_03_Func_Output_Result, Context);
	Context.Map.MakeIntFromFloat.FLOAT_VAR = Multiply_Float003_Lightning_03_Func_Output_Result;
	int MakeIntFromFloat_Lightning_03_Func_Output_NewOutput;
	MakeIntFromFloat_Lightning_03_Func_(MakeIntFromFloat_Lightning_03_Func_Output_NewOutput, Context);
	Context.Map.SetVariables_12051185420E7D3D5817F28DD2F3D62A.Lightning_03.Complexity = MakeIntFromFloat_Lightning_03_Func_Output_NewOutput;
	EnterStatScope(15 );
	SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_03_Func_(Context);
	ExitStatScope( );
	Context.Map.SpawnBurst_Instantaneous.SpawnCount = Context.Map.Lightning_03.Complexity;
	EnterStatScope(16 );
	SpawnBurst_Instantaneous_Lightning_03_Func_(Context);
	ExitStatScope( );
}

void SimulationPosition_Lightning_02_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant206 = false;
	float3 Constant207 = float3(0,0,0);
	float3 Vector_IfResult9;
	if(Constant206)
	{
	Vector_IfResult9 = Constant207;
	}
	else
	{
	Vector_IfResult9 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult9;
}

void SimulationPosition002_Lightning_02_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant208 = false;
	float3 Constant209 = float3(0,0,0);
	float3 Vector_IfResult10;
	if(Constant208)
	{
	Vector_IfResult10 = Constant209;
	}
	else
	{
	Vector_IfResult10 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult10;
}

void Multiply_VectorByFloat_Lightning_02_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result253 = Context.Map.Multiply_VectorByFloat.VECTOR_VAR * Context.Map.Constants.Lightning_02.Multiply_VectorByFloat.FLOAT_VAR;
	Out_Result = Result253;
}

void Multiply_VectorByFloat001_Lightning_02_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result254 = Context.Map.Constants.Lightning_02.Multiply_VectorByFloat001.VECTOR_VAR * Context.Map.Constants.Lightning_02.Multiply_VectorByFloat001.FLOAT_VAR;
	Out_Result = Result254;
}

void MakeCustomVectorFromBool_Lightning_02_Func_(out float3 Out_NewOutput, inout FSimulationContext Context)
{
	float3 Vector_IfResult11;
	if(Context.Map.MakeCustomVectorFromBool.BOOL_VAR)
	{
	Vector_IfResult11 = Context.Map.MakeCustomVectorFromBool.TrueVector;
	}
	else
	{
	Vector_IfResult11 = Context.Map.MakeCustomVectorFromBool.FalseVector;
	}
	Out_NewOutput = Vector_IfResult11;
}

void MakeCustomVectorFromBool001_Lightning_02_Func_(out float3 Out_NewOutput, inout FSimulationContext Context)
{
	float3 Vector_IfResult12;
	if(Context.Map.MakeCustomVectorFromBool001.BOOL_VAR)
	{
	Vector_IfResult12 = Context.Map.MakeCustomVectorFromBool001.TrueVector;
	}
	else
	{
	Vector_IfResult12 = Context.Map.MakeCustomVectorFromBool001.FalseVector;
	}
	Out_NewOutput = Vector_IfResult12;
}

void BeamEmitterSetup_Lightning_02_Func_(inout FSimulationContext Context)
{
	float3 Result255 = Context.Map.BeamEmitterSetup.BeamStart - Context.Map.BeamEmitterSetup.BeamEnd;
	float3 Constant210 = float3(0,0,1);
	float Constant211 = 1e-05;
	float Constant212 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction2;
	float DirectionAndLengthSafe_Func_Output_Length2;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold2;
	DirectionAndLengthSafe_Func_(Result255, Constant210, Constant211, Constant212, DirectionAndLengthSafe_Func_Output_Direction2, DirectionAndLengthSafe_Func_Output_Length2, DirectionAndLengthSafe_Func_Output_BelowThreshold2, Context);
	Context.Map.Local.BeamEmitterSetup.BeamStart = Context.Map.BeamEmitterSetup.BeamStart;
	Context.Map.Local.BeamEmitterSetup.BeamStartEndLength = DirectionAndLengthSafe_Func_Output_Length2;
	Context.Map.Local.BeamEmitterSetup.BeamEnd = Context.Map.BeamEmitterSetup.BeamEnd;
	bool Constant213 = false;
	Context.Map.BeamEmitterSetup.AbsoluteStartTangent = Constant213;
	float3 Result256 = Context.Map.BeamEmitterSetup.BeamStartTangent * Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	float3 Result257 = Context.Map.Local.BeamEmitterSetup.BeamStart + Result256;
	float3 Vector_IfResult13;
	if(Context.Map.BeamEmitterSetup.AbsoluteStartTangent)
	{
	Vector_IfResult13 = Context.Map.BeamEmitterSetup.BeamStartTangent;
	}
	else
	{
	Vector_IfResult13 = Result257;
	}
	bool Constant214 = false;
	Context.Map.BeamEmitterSetup.AbsoluteEndTangent = Constant214;
	float3 Result258 = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength * Context.Map.BeamEmitterSetup.BeamEndTangent;
	float3 Result259 = Result258 + Context.Map.Local.BeamEmitterSetup.BeamEnd;
	float3 Vector_IfResult14;
	if(Context.Map.BeamEmitterSetup.AbsoluteEndTangent)
	{
	Vector_IfResult14 = Context.Map.BeamEmitterSetup.BeamEndTangent;
	}
	else
	{
	Vector_IfResult14 = Result259;
	}
	Context.Map.Local.BeamEmitterSetup.BeamStartTangent = Vector_IfResult13;
	Context.Map.Local.BeamEmitterSetup.BeamEndTangent = Vector_IfResult14;
	bool Constant215 = false;
	Context.Map.BeamEmitterSetup.UseBeamTangents = Constant215;
	float3 Result260 = Context.Map.Local.BeamEmitterSetup.BeamEnd - Context.Map.Local.BeamEmitterSetup.BeamStart;
	float3 Constant216 = float3(0,0,1);
	float Constant217 = 1e-05;
	float Constant218 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction3;
	float DirectionAndLengthSafe_Func_Output_Length3;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold3;
	DirectionAndLengthSafe_Func_(Result260, Constant216, Constant217, Constant218, DirectionAndLengthSafe_Func_Output_Direction3, DirectionAndLengthSafe_Func_Output_Length3, DirectionAndLengthSafe_Func_Output_BelowThreshold3, Context);
	Context.Map.Lightning_02.BeamStart = Context.Map.Local.BeamEmitterSetup.BeamStart;
	Context.Map.Lightning_02.BeamStartTangent = Context.Map.Local.BeamEmitterSetup.BeamStartTangent;
	Context.Map.Lightning_02.BeamEnd = Context.Map.Local.BeamEmitterSetup.BeamEnd;
	Context.Map.Lightning_02.BeamEndTangent = Context.Map.Local.BeamEmitterSetup.BeamEndTangent;
	Context.Map.Lightning_02.UseBeamTangents = Context.Map.BeamEmitterSetup.UseBeamTangents;
	Context.Map.Lightning_02.BeamStartEndLength = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	Context.Map.Lightning_02.BeamVector = Result260;
	Context.Map.Lightning_02.BeamDirection = DirectionAndLengthSafe_Func_Output_Direction3;
	bool Result261 = NiagaraAll(Context.Map.Lightning_02.LoopCount > Context.Map.Lightning_02.BeamID);
	int Constant219 = -1;
	int int32_IfResult1;
	if(Result261)
	{
	int32_IfResult1 = Context.Map.Lightning_02.LoopCount;
	}
	else
	{
	int32_IfResult1 = Constant219;
	}
	Context.Map.Lightning_02.BeamID = int32_IfResult1;
}

void EmitterState001_EmitterChangeState002_Lightning_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant230 = 3;
	bool Result271 = NiagaraAll(Context.Map.Lightning_02.ExecutionState != Constant230);
	int Constant231 = 4;
	bool Result272 = NiagaraAll(Context.Map.Lightning_02.ExecutionState != Constant231);
	bool Result273 = Result271 && Result272;
	bool Result274 = In_Condition && Result273;
	bool Result275 = NiagaraAll(Context.Map.Lightning_02.ExecutionStateSource <= In_NewStateSource);
	bool Result276 = Result274 && Result275;
	int ENiagaraExecutionState_IfResult19;
	int ENiagaraExecutionStateSource_IfResult19;
	if(Result276)
	{
	ENiagaraExecutionState_IfResult19 = In_NewState;
	ENiagaraExecutionStateSource_IfResult19 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult19 = Context.Map.Lightning_02.ExecutionState;
	ENiagaraExecutionStateSource_IfResult19 = Context.Map.Lightning_02.ExecutionStateSource;
	}
	Context.Map.Lightning_02.ExecutionState = ENiagaraExecutionState_IfResult19;
	Context.Map.Lightning_02.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult19;
}

void EmitterState001_EmitterChangeState_Lightning_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant234 = 3;
	bool Result277 = NiagaraAll(Context.Map.Lightning_02.ExecutionState != Constant234);
	int Constant235 = 4;
	bool Result278 = NiagaraAll(Context.Map.Lightning_02.ExecutionState != Constant235);
	bool Result279 = Result277 && Result278;
	bool Result280 = In_Condition && Result279;
	bool Result281 = NiagaraAll(Context.Map.Lightning_02.ExecutionStateSource <= In_NewStateSource);
	bool Result282 = Result280 && Result281;
	int ENiagaraExecutionState_IfResult20;
	int ENiagaraExecutionStateSource_IfResult20;
	if(Result282)
	{
	ENiagaraExecutionState_IfResult20 = In_NewState;
	ENiagaraExecutionStateSource_IfResult20 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult20 = Context.Map.Lightning_02.ExecutionState;
	ENiagaraExecutionStateSource_IfResult20 = Context.Map.Lightning_02.ExecutionStateSource;
	}
	Context.Map.Lightning_02.ExecutionState = ENiagaraExecutionState_IfResult20;
	Context.Map.Lightning_02.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult20;
}

void EmitterState001_EmitterChangeState005_Lightning_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant240 = 3;
	bool Result286 = NiagaraAll(Context.Map.Lightning_02.ExecutionState != Constant240);
	int Constant241 = 4;
	bool Result287 = NiagaraAll(Context.Map.Lightning_02.ExecutionState != Constant241);
	bool Result288 = Result286 && Result287;
	bool Result289 = In_Condition && Result288;
	bool Result290 = NiagaraAll(Context.Map.Lightning_02.ExecutionStateSource <= In_NewStateSource);
	bool Result291 = Result289 && Result290;
	int ENiagaraExecutionState_IfResult21;
	int ENiagaraExecutionStateSource_IfResult21;
	if(Result291)
	{
	ENiagaraExecutionState_IfResult21 = In_NewState;
	ENiagaraExecutionStateSource_IfResult21 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult21 = Context.Map.Lightning_02.ExecutionState;
	ENiagaraExecutionStateSource_IfResult21 = Context.Map.Lightning_02.ExecutionStateSource;
	}
	Context.Map.Lightning_02.ExecutionState = ENiagaraExecutionState_IfResult21;
	Context.Map.Lightning_02.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult21;
}

void EmitterState001_EmitterChangeState003_Lightning_02_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant246 = 3;
	bool Result296 = NiagaraAll(Context.Map.Lightning_02.ExecutionState != Constant246);
	int Constant247 = 4;
	bool Result297 = NiagaraAll(Context.Map.Lightning_02.ExecutionState != Constant247);
	bool Result298 = Result296 && Result297;
	bool Result299 = In_Condition && Result298;
	bool Result300 = NiagaraAll(Context.Map.Lightning_02.ExecutionStateSource <= In_NewStateSource);
	bool Result301 = Result299 && Result300;
	int ENiagaraExecutionState_IfResult22;
	int ENiagaraExecutionStateSource_IfResult22;
	if(Result301)
	{
	ENiagaraExecutionState_IfResult22 = In_NewState;
	ENiagaraExecutionStateSource_IfResult22 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult22 = Context.Map.Lightning_02.ExecutionState;
	ENiagaraExecutionStateSource_IfResult22 = Context.Map.Lightning_02.ExecutionStateSource;
	}
	Context.Map.Lightning_02.ExecutionState = ENiagaraExecutionState_IfResult22;
	Context.Map.Lightning_02.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult22;
}

void EmitterState001_Lightning_02_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState001.PreviousEmitterState = Context.Map.Lightning_02.ExecutionState;
	float Constant220 = 0.016667;
	float Result262 = max(Context.Map.Constants.Lightning_02.EmitterState001.LoopDuration, Constant220);
	Context.Map.Local.EmitterState001.LoopDuration = Result262;
	float Constant221 = 0;
	bool Result263 = NiagaraAll(Context.Map.Lightning_02.Age == Constant221);
	float Duration_IfResult10;
	if(Result263)
	{
	Duration_IfResult10 = Context.Map.Local.EmitterState001.LoopDuration;
	}
	else
	{
	Duration_IfResult10 = Context.Map.Lightning_02.CurrentLoopDuration;
	}
	float Constant222 = 0;
	Context.Map.Lightning_02.CurrentLoopDuration = Duration_IfResult10;
	Context.Map.EmitterState001.LoopDelay = Constant222;
	float Result264 = Context.Map.Lightning_02.Age + Context.Map.Engine.DeltaTime;
	float Result265 = Context.Map.Engine.DeltaTime + Context.Map.Lightning_02.LoopedAge;
	bool Result266 = NiagaraAll(Result265 >= Context.Map.Lightning_02.CurrentLoopDuration);
	int Constant223 = 0;
	Context.Map.Lightning_02.Age = Result264;
	Context.Map.Lightning_02.LoopedAge = Result265;
	Context.Map.Local.EmitterState001.LoopCountIncreased = Result266;
	Context.Map.Lightning_02.LoopCount = Constant223;
	float Constant224 = 0;
	float Duration_IfResult11;
	float LoopedAge_IfResult5;
	if(Context.Map.Local.EmitterState001.LoopCountIncreased)
	{
	Duration_IfResult11 = Context.Map.Local.EmitterState001.LoopDuration;
	LoopedAge_IfResult5 = Constant224;
	}
	else
	{
	Duration_IfResult11 = Context.Map.Lightning_02.CurrentLoopDuration;
	LoopedAge_IfResult5 = Context.Map.Lightning_02.LoopedAge;
	}
	Context.Map.Lightning_02.CurrentLoopDuration = Duration_IfResult11;
	Context.Map.Lightning_02.LoopedAge = LoopedAge_IfResult5;
	float Result267 = Context.Map.Lightning_02.LoopedAge / Context.Map.Lightning_02.CurrentLoopDuration;
	Context.Map.Lightning_02.NormalizedLoopAge = Result267;
	float Constant225 = 0;
	float Constant226 = 1.0001;
	float Result268 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant225,Constant226);
	Context.Map.Lightning_02.Scalability.DistanceFraction = Result268;
	int Constant227 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant227;
	int Constant228 = 0;
	bool Result269 = NiagaraAll(Context.Map.Engine.Lightning_02.NumParticles == Constant228);
	Context.Map.Local.EmitterState001.NoActiveEmitterParticles = Result269;
	int Constant229 = 0;
	bool Result270 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant229);
	EmitterState001_EmitterChangeState002_Lightning_02_Func_(Context.Map.System.ExecutionState, Result270, Context.Map.System.ExecutionStateSource, Context);
	int Constant232 = 1;
	int Constant233 = 1;
	EmitterState001_EmitterChangeState_Lightning_02_Func_(Constant232, Context.Map.Local.EmitterState001.LoopCountIncreased, Constant233, Context);
	int Constant236 = 1;
	int Constant237 = 0;
	bool Result283 = NiagaraAll(Context.Map.System.ExecutionState != Constant237);
	int Constant238 = 2;
	bool Result284 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant238);
	bool Result285 = Result283 && Result284;
	int Constant239 = 1;
	EmitterState001_EmitterChangeState005_Lightning_02_Func_(Constant236, Result285, Constant239, Context);
	int Constant242 = 3;
	int Constant243 = 0;
	bool Result292 = NiagaraAll(Context.Map.Lightning_02.ExecutionState != Constant243);
	int Constant244 = 0;
	bool Result293 = NiagaraAll(Context.Map.Lightning_02.ExecutionStateSource != Constant244);
	bool Result294 = Result292 && Result293;
	bool Result295 = Context.Map.Local.EmitterState001.NoActiveEmitterParticles && Result294;
	int Constant245 = 3;
	EmitterState001_EmitterChangeState003_Lightning_02_Func_(Constant242, Result295, Constant245, Context);
}

void SimulationPosition003_Lightning_02_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant248 = false;
	float3 Constant249 = float3(0,0,0);
	float3 Vector_IfResult15;
	if(Constant248)
	{
	Vector_IfResult15 = Constant249;
	}
	else
	{
	Vector_IfResult15 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult15;
}

void NMS_BeamComplexity_Lightning_02_Func_(inout FSimulationContext Context)
{
	float X2;
	float Y2;
	float Z2;
	float X3;
	float Y3;
	float Z3;
	X2 = Context.Map.NMS_BeamComplexity.StartLocation.x;
	Y2 = Context.Map.NMS_BeamComplexity.StartLocation.y;
	Z2 = Context.Map.NMS_BeamComplexity.StartLocation.z;
	X3 = Context.Map.NMS_BeamComplexity.EndLocation.x;
	Y3 = Context.Map.NMS_BeamComplexity.EndLocation.y;
	Z3 = Context.Map.NMS_BeamComplexity.EndLocation.z;
	float Result302 = X3 - X2;
	float Result303 = Result302 * Result302;
	float Result304 = Y3 - Y2;
	float Result305 = Result304 * Result304;
	float Result306 = Result303 + Result305;
	float Result307 = Z3 - Z2;
	float Result308 = Result307 * Result307;
	float Result309 = Result306 + Result308;
	float Result310 = sqrt(Result309);
	float Constant250 = 40;
	float Result311 = Result310 / Constant250;
	int Constant251 = 7;
	float Result312 = Result311 + Constant251;
	float Constant252 = 2;
	float Result313 = Result312 / Constant252;
	Context.Map.Lightning_02.Complexity = Result312;
	Context.Map.Lightning_02.DustParticlesQuantity = Result313;
}

void MakeFloatFromInt_Lightning_02_Func_(out float Out_Output, inout FSimulationContext Context)
{
	float NiagaraFloat1;
	NiagaraFloat1 = Context.Map.MakeFloatFromInt.INT_VAR;
	Out_Output = NiagaraFloat1;
}

void Multiply_Float003_Lightning_02_Func_(out float Out_Result, inout FSimulationContext Context)
{
	float Result314 = Context.Map.Multiply_Float003.A * Context.Map.Constants.Lightning_02.Multiply_Float003.B;
	Out_Result = Result314;
}

void MakeIntFromFloat_Lightning_02_Func_(out int Out_NewOutput, inout FSimulationContext Context)
{
	int Value1;
	Value1 = Context.Map.MakeIntFromFloat.FLOAT_VAR;
	Out_NewOutput = Value1;
}

void SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_02_Func_(inout FSimulationContext Context)
{
	Context.Map.Lightning_02.Complexity = Context.Map.SetVariables_12051185420E7D3D5817F28DD2F3D62A.Lightning_02.Complexity;
}

void SpawnBurst_Instantaneous_Lightning_02_Func_(inout FSimulationContext Context)
{
	Context.Map.SpawnBurst_Instantaneous.Age = Context.Map.Lightning_02.LoopedAge;
	float Result315 = Context.Map.SpawnBurst_Instantaneous.Age - Context.Map.Engine.DeltaTime;
	float Result316 = Context.Map.Constants.Lightning_02.SpawnBurst_Instantaneous.SpawnTime - Result315;
	float Constant253 = 0;
	float Output111;
	Output111 = Constant253;
	bool Result317 = NiagaraAll(Result316 >= Output111);
	float Result318 = Context.Map.Constants.Lightning_02.SpawnBurst_Instantaneous.SpawnTime - Context.Map.SpawnBurst_Instantaneous.Age;
	bool Result319 = NiagaraAll(Result318 < Output111);
	bool Result320 = Result317 && Result319;
	int Constant254 = 0;
	bool Result321 = NiagaraAll(Context.Map.SpawnBurst_Instantaneous.SpawnCount == Constant254);
	float Constant255 = 0;
	float Result322 = Context.Map.SpawnBurst_Instantaneous.SpawnCount * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.Lightning_02.SpawnCountScale;
	float Constant256 = 1;
	float Result323 = max(Result322, Constant256);
	float float_IfResult6;
	if(Result321)
	{
	float_IfResult6 = Constant255;
	}
	else
	{
	float_IfResult6 = Result323;
	}
	float Constant257 = 0;
	NiagaraSpawnInfo Output112;
	Output112.Count = float_IfResult6;
	Output112.InterpStartDt = Result316;
	Output112.IntervalDt = Constant257;
	Output112.SpawnGroup = Context.Map.Constants.Lightning_02.SpawnBurst_Instantaneous.SpawnGroup;
	int Constant258 = 0;
	float Constant259 = 0;
	float Constant260 = 0;
	NiagaraSpawnInfo Output113;
	Output113.Count = Constant258;
	Output113.InterpStartDt = Constant259;
	Output113.SpawnGroup = Context.Map.Constants.Lightning_02.SpawnBurst_Instantaneous.SpawnGroup;
	Output113.IntervalDt = Constant260;
	NiagaraSpawnInfo SpawnInfo_IfResult3;
	if(Result320)
	{
	SpawnInfo_IfResult3 = Output112;
	}
	else
	{
	SpawnInfo_IfResult3 = Output113;
	}
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst = SpawnInfo_IfResult3;
	bool Result324 = NiagaraAll(Context.Map.Lightning_02.LoopedAge <= Context.Map.Constants.Lightning_02.SpawnBurst_Instantaneous.SpawnTime);
	bool Result325 = Context.Map.Transient.SpawningbCanEverSpawn || Result324;
	Context.Map.Transient.SpawningbCanEverSpawn = Result325;
}

void Lightning_02_Func_(inout FSimulationContext Context)
{
	float3 SimulationPosition_Lightning_02_Func_Output_SimulationPosition;
	SimulationPosition_Lightning_02_Func_(SimulationPosition_Lightning_02_Func_Output_SimulationPosition, Context);
	float3 SimulationPosition002_Lightning_02_Func_Output_SimulationPosition;
	SimulationPosition002_Lightning_02_Func_(SimulationPosition002_Lightning_02_Func_Output_SimulationPosition, Context);
	Context.Map.Multiply_VectorByFloat.VECTOR_VAR = Context.Map.Engine.Owner.SystemXAxis;
	Context.Map.MakeCustomVectorFromBool.BOOL_VAR = Context.Map.User.ArcReverse;
	Context.Map.MakeCustomVectorFromBool.TrueVector = Context.Map.User.End2;
	Context.Map.MakeCustomVectorFromBool.FalseVector = SimulationPosition_Lightning_02_Func_Output_SimulationPosition;
	Context.Map.MakeCustomVectorFromBool001.BOOL_VAR = Context.Map.User.ArcReverse;
	Context.Map.MakeCustomVectorFromBool001.TrueVector = SimulationPosition002_Lightning_02_Func_Output_SimulationPosition;
	Context.Map.MakeCustomVectorFromBool001.FalseVector = Context.Map.User.End2;
	float3 Multiply_VectorByFloat_Lightning_02_Func_Output_Result;
	Multiply_VectorByFloat_Lightning_02_Func_(Multiply_VectorByFloat_Lightning_02_Func_Output_Result, Context);
	float3 Multiply_VectorByFloat001_Lightning_02_Func_Output_Result;
	Multiply_VectorByFloat001_Lightning_02_Func_(Multiply_VectorByFloat001_Lightning_02_Func_Output_Result, Context);
	float3 MakeCustomVectorFromBool_Lightning_02_Func_Output_NewOutput;
	MakeCustomVectorFromBool_Lightning_02_Func_(MakeCustomVectorFromBool_Lightning_02_Func_Output_NewOutput, Context);
	float3 MakeCustomVectorFromBool001_Lightning_02_Func_Output_NewOutput;
	MakeCustomVectorFromBool001_Lightning_02_Func_(MakeCustomVectorFromBool001_Lightning_02_Func_Output_NewOutput, Context);
	Context.Map.BeamEmitterSetup.BeamStartTangent = Multiply_VectorByFloat_Lightning_02_Func_Output_Result;
	Context.Map.BeamEmitterSetup.BeamEndTangent = Multiply_VectorByFloat001_Lightning_02_Func_Output_Result;
	Context.Map.BeamEmitterSetup.BeamStart = MakeCustomVectorFromBool_Lightning_02_Func_Output_NewOutput;
	Context.Map.BeamEmitterSetup.BeamEnd = MakeCustomVectorFromBool001_Lightning_02_Func_Output_NewOutput;
	EnterStatScope(18 );
	BeamEmitterSetup_Lightning_02_Func_(Context);
	ExitStatScope( );
	EnterStatScope(19 );
	EmitterState001_Lightning_02_Func_(Context);
	ExitStatScope( );
	float3 SimulationPosition003_Lightning_02_Func_Output_SimulationPosition;
	SimulationPosition003_Lightning_02_Func_(SimulationPosition003_Lightning_02_Func_Output_SimulationPosition, Context);
	Context.Map.NMS_BeamComplexity.StartLocation = SimulationPosition003_Lightning_02_Func_Output_SimulationPosition;
	Context.Map.NMS_BeamComplexity.EndLocation = Context.Map.User.End2;
	EnterStatScope(20 );
	NMS_BeamComplexity_Lightning_02_Func_(Context);
	ExitStatScope( );
	Context.Map.MakeFloatFromInt.INT_VAR = Context.Map.Lightning_02.Complexity;
	float MakeFloatFromInt_Lightning_02_Func_Output_Output;
	MakeFloatFromInt_Lightning_02_Func_(MakeFloatFromInt_Lightning_02_Func_Output_Output, Context);
	Context.Map.Multiply_Float003.A = MakeFloatFromInt_Lightning_02_Func_Output_Output;
	float Multiply_Float003_Lightning_02_Func_Output_Result;
	Multiply_Float003_Lightning_02_Func_(Multiply_Float003_Lightning_02_Func_Output_Result, Context);
	Context.Map.MakeIntFromFloat.FLOAT_VAR = Multiply_Float003_Lightning_02_Func_Output_Result;
	int MakeIntFromFloat_Lightning_02_Func_Output_NewOutput;
	MakeIntFromFloat_Lightning_02_Func_(MakeIntFromFloat_Lightning_02_Func_Output_NewOutput, Context);
	Context.Map.SetVariables_12051185420E7D3D5817F28DD2F3D62A.Lightning_02.Complexity = MakeIntFromFloat_Lightning_02_Func_Output_NewOutput;
	EnterStatScope(21 );
	SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_02_Func_(Context);
	ExitStatScope( );
	Context.Map.SpawnBurst_Instantaneous.SpawnCount = Context.Map.Lightning_02.Complexity;
	EnterStatScope(22 );
	SpawnBurst_Instantaneous_Lightning_02_Func_(Context);
	ExitStatScope( );
}

void SimulationPosition_Lightning_01_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant261 = false;
	float3 Constant262 = float3(0,0,0);
	float3 Vector_IfResult16;
	if(Constant261)
	{
	Vector_IfResult16 = Constant262;
	}
	else
	{
	Vector_IfResult16 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult16;
}

void SimulationPosition002_Lightning_01_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant263 = false;
	float3 Constant264 = float3(0,0,0);
	float3 Vector_IfResult17;
	if(Constant263)
	{
	Vector_IfResult17 = Constant264;
	}
	else
	{
	Vector_IfResult17 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult17;
}

void MakeCustomVectorFromBool_Lightning_01_Func_(out float3 Out_NewOutput, inout FSimulationContext Context)
{
	float3 Vector_IfResult18;
	if(Context.Map.MakeCustomVectorFromBool.BOOL_VAR)
	{
	Vector_IfResult18 = Context.Map.MakeCustomVectorFromBool.TrueVector;
	}
	else
	{
	Vector_IfResult18 = Context.Map.MakeCustomVectorFromBool.FalseVector;
	}
	Out_NewOutput = Vector_IfResult18;
}

void Multiply_VectorByFloat_Lightning_01_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result326 = Context.Map.Multiply_VectorByFloat.VECTOR_VAR * Context.Map.Constants.Lightning_01.Multiply_VectorByFloat.FLOAT_VAR;
	Out_Result = Result326;
}

void Multiply_VectorByFloat001_Lightning_01_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result327 = Context.Map.Constants.Lightning_01.Multiply_VectorByFloat001.VECTOR_VAR * Context.Map.Constants.Lightning_01.Multiply_VectorByFloat001.FLOAT_VAR;
	Out_Result = Result327;
}

void MakeCustomVectorFromBool001_Lightning_01_Func_(out float3 Out_NewOutput, inout FSimulationContext Context)
{
	float3 Vector_IfResult19;
	if(Context.Map.MakeCustomVectorFromBool001.BOOL_VAR)
	{
	Vector_IfResult19 = Context.Map.MakeCustomVectorFromBool001.TrueVector;
	}
	else
	{
	Vector_IfResult19 = Context.Map.MakeCustomVectorFromBool001.FalseVector;
	}
	Out_NewOutput = Vector_IfResult19;
}

void BeamEmitterSetup_Lightning_01_Func_(inout FSimulationContext Context)
{
	float3 Result328 = Context.Map.BeamEmitterSetup.BeamStart - Context.Map.BeamEmitterSetup.BeamEnd;
	float3 Constant265 = float3(0,0,1);
	float Constant266 = 1e-05;
	float Constant267 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction4;
	float DirectionAndLengthSafe_Func_Output_Length4;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold4;
	DirectionAndLengthSafe_Func_(Result328, Constant265, Constant266, Constant267, DirectionAndLengthSafe_Func_Output_Direction4, DirectionAndLengthSafe_Func_Output_Length4, DirectionAndLengthSafe_Func_Output_BelowThreshold4, Context);
	Context.Map.Local.BeamEmitterSetup.BeamStart = Context.Map.BeamEmitterSetup.BeamStart;
	Context.Map.Local.BeamEmitterSetup.BeamStartEndLength = DirectionAndLengthSafe_Func_Output_Length4;
	Context.Map.Local.BeamEmitterSetup.BeamEnd = Context.Map.BeamEmitterSetup.BeamEnd;
	bool Constant268 = false;
	Context.Map.BeamEmitterSetup.AbsoluteStartTangent = Constant268;
	float3 Result329 = Context.Map.BeamEmitterSetup.BeamStartTangent * Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	float3 Result330 = Context.Map.Local.BeamEmitterSetup.BeamStart + Result329;
	float3 Vector_IfResult20;
	if(Context.Map.BeamEmitterSetup.AbsoluteStartTangent)
	{
	Vector_IfResult20 = Context.Map.BeamEmitterSetup.BeamStartTangent;
	}
	else
	{
	Vector_IfResult20 = Result330;
	}
	bool Constant269 = false;
	Context.Map.BeamEmitterSetup.AbsoluteEndTangent = Constant269;
	float3 Result331 = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength * Context.Map.BeamEmitterSetup.BeamEndTangent;
	float3 Result332 = Result331 + Context.Map.Local.BeamEmitterSetup.BeamEnd;
	float3 Vector_IfResult21;
	if(Context.Map.BeamEmitterSetup.AbsoluteEndTangent)
	{
	Vector_IfResult21 = Context.Map.BeamEmitterSetup.BeamEndTangent;
	}
	else
	{
	Vector_IfResult21 = Result332;
	}
	Context.Map.Local.BeamEmitterSetup.BeamStartTangent = Vector_IfResult20;
	Context.Map.Local.BeamEmitterSetup.BeamEndTangent = Vector_IfResult21;
	bool Constant270 = false;
	Context.Map.BeamEmitterSetup.UseBeamTangents = Constant270;
	float3 Result333 = Context.Map.Local.BeamEmitterSetup.BeamEnd - Context.Map.Local.BeamEmitterSetup.BeamStart;
	float3 Constant271 = float3(0,0,1);
	float Constant272 = 1e-05;
	float Constant273 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction5;
	float DirectionAndLengthSafe_Func_Output_Length5;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold5;
	DirectionAndLengthSafe_Func_(Result333, Constant271, Constant272, Constant273, DirectionAndLengthSafe_Func_Output_Direction5, DirectionAndLengthSafe_Func_Output_Length5, DirectionAndLengthSafe_Func_Output_BelowThreshold5, Context);
	Context.Map.Lightning_01.BeamStart = Context.Map.Local.BeamEmitterSetup.BeamStart;
	Context.Map.Lightning_01.BeamStartTangent = Context.Map.Local.BeamEmitterSetup.BeamStartTangent;
	Context.Map.Lightning_01.BeamEnd = Context.Map.Local.BeamEmitterSetup.BeamEnd;
	Context.Map.Lightning_01.BeamEndTangent = Context.Map.Local.BeamEmitterSetup.BeamEndTangent;
	Context.Map.Lightning_01.UseBeamTangents = Context.Map.BeamEmitterSetup.UseBeamTangents;
	Context.Map.Lightning_01.BeamStartEndLength = Context.Map.Local.BeamEmitterSetup.BeamStartEndLength;
	Context.Map.Lightning_01.BeamVector = Result333;
	Context.Map.Lightning_01.BeamDirection = DirectionAndLengthSafe_Func_Output_Direction5;
	bool Result334 = NiagaraAll(Context.Map.Lightning_01.LoopCount > Context.Map.Lightning_01.BeamID);
	int Constant274 = -1;
	int int32_IfResult2;
	if(Result334)
	{
	int32_IfResult2 = Context.Map.Lightning_01.LoopCount;
	}
	else
	{
	int32_IfResult2 = Constant274;
	}
	Context.Map.Lightning_01.BeamID = int32_IfResult2;
}

void EmitterState001_EmitterChangeState002_Lightning_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant285 = 3;
	bool Result344 = NiagaraAll(Context.Map.Lightning_01.ExecutionState != Constant285);
	int Constant286 = 4;
	bool Result345 = NiagaraAll(Context.Map.Lightning_01.ExecutionState != Constant286);
	bool Result346 = Result344 && Result345;
	bool Result347 = In_Condition && Result346;
	bool Result348 = NiagaraAll(Context.Map.Lightning_01.ExecutionStateSource <= In_NewStateSource);
	bool Result349 = Result347 && Result348;
	int ENiagaraExecutionState_IfResult23;
	int ENiagaraExecutionStateSource_IfResult23;
	if(Result349)
	{
	ENiagaraExecutionState_IfResult23 = In_NewState;
	ENiagaraExecutionStateSource_IfResult23 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult23 = Context.Map.Lightning_01.ExecutionState;
	ENiagaraExecutionStateSource_IfResult23 = Context.Map.Lightning_01.ExecutionStateSource;
	}
	Context.Map.Lightning_01.ExecutionState = ENiagaraExecutionState_IfResult23;
	Context.Map.Lightning_01.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult23;
}

void EmitterState001_EmitterChangeState_Lightning_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant289 = 3;
	bool Result350 = NiagaraAll(Context.Map.Lightning_01.ExecutionState != Constant289);
	int Constant290 = 4;
	bool Result351 = NiagaraAll(Context.Map.Lightning_01.ExecutionState != Constant290);
	bool Result352 = Result350 && Result351;
	bool Result353 = In_Condition && Result352;
	bool Result354 = NiagaraAll(Context.Map.Lightning_01.ExecutionStateSource <= In_NewStateSource);
	bool Result355 = Result353 && Result354;
	int ENiagaraExecutionState_IfResult24;
	int ENiagaraExecutionStateSource_IfResult24;
	if(Result355)
	{
	ENiagaraExecutionState_IfResult24 = In_NewState;
	ENiagaraExecutionStateSource_IfResult24 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult24 = Context.Map.Lightning_01.ExecutionState;
	ENiagaraExecutionStateSource_IfResult24 = Context.Map.Lightning_01.ExecutionStateSource;
	}
	Context.Map.Lightning_01.ExecutionState = ENiagaraExecutionState_IfResult24;
	Context.Map.Lightning_01.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult24;
}

void EmitterState001_EmitterChangeState005_Lightning_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant295 = 3;
	bool Result359 = NiagaraAll(Context.Map.Lightning_01.ExecutionState != Constant295);
	int Constant296 = 4;
	bool Result360 = NiagaraAll(Context.Map.Lightning_01.ExecutionState != Constant296);
	bool Result361 = Result359 && Result360;
	bool Result362 = In_Condition && Result361;
	bool Result363 = NiagaraAll(Context.Map.Lightning_01.ExecutionStateSource <= In_NewStateSource);
	bool Result364 = Result362 && Result363;
	int ENiagaraExecutionState_IfResult25;
	int ENiagaraExecutionStateSource_IfResult25;
	if(Result364)
	{
	ENiagaraExecutionState_IfResult25 = In_NewState;
	ENiagaraExecutionStateSource_IfResult25 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult25 = Context.Map.Lightning_01.ExecutionState;
	ENiagaraExecutionStateSource_IfResult25 = Context.Map.Lightning_01.ExecutionStateSource;
	}
	Context.Map.Lightning_01.ExecutionState = ENiagaraExecutionState_IfResult25;
	Context.Map.Lightning_01.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult25;
}

void EmitterState001_EmitterChangeState003_Lightning_01_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant301 = 3;
	bool Result369 = NiagaraAll(Context.Map.Lightning_01.ExecutionState != Constant301);
	int Constant302 = 4;
	bool Result370 = NiagaraAll(Context.Map.Lightning_01.ExecutionState != Constant302);
	bool Result371 = Result369 && Result370;
	bool Result372 = In_Condition && Result371;
	bool Result373 = NiagaraAll(Context.Map.Lightning_01.ExecutionStateSource <= In_NewStateSource);
	bool Result374 = Result372 && Result373;
	int ENiagaraExecutionState_IfResult26;
	int ENiagaraExecutionStateSource_IfResult26;
	if(Result374)
	{
	ENiagaraExecutionState_IfResult26 = In_NewState;
	ENiagaraExecutionStateSource_IfResult26 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult26 = Context.Map.Lightning_01.ExecutionState;
	ENiagaraExecutionStateSource_IfResult26 = Context.Map.Lightning_01.ExecutionStateSource;
	}
	Context.Map.Lightning_01.ExecutionState = ENiagaraExecutionState_IfResult26;
	Context.Map.Lightning_01.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult26;
}

void EmitterState001_Lightning_01_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState001.PreviousEmitterState = Context.Map.Lightning_01.ExecutionState;
	float Constant275 = 0.016667;
	float Result335 = max(Context.Map.Constants.Lightning_01.EmitterState001.LoopDuration, Constant275);
	Context.Map.Local.EmitterState001.LoopDuration = Result335;
	float Constant276 = 0;
	bool Result336 = NiagaraAll(Context.Map.Lightning_01.Age == Constant276);
	float Duration_IfResult12;
	if(Result336)
	{
	Duration_IfResult12 = Context.Map.Local.EmitterState001.LoopDuration;
	}
	else
	{
	Duration_IfResult12 = Context.Map.Lightning_01.CurrentLoopDuration;
	}
	float Constant277 = 0;
	Context.Map.Lightning_01.CurrentLoopDuration = Duration_IfResult12;
	Context.Map.EmitterState001.LoopDelay = Constant277;
	float Result337 = Context.Map.Lightning_01.Age + Context.Map.Engine.DeltaTime;
	float Result338 = Context.Map.Engine.DeltaTime + Context.Map.Lightning_01.LoopedAge;
	bool Result339 = NiagaraAll(Result338 >= Context.Map.Lightning_01.CurrentLoopDuration);
	int Constant278 = 0;
	Context.Map.Lightning_01.Age = Result337;
	Context.Map.Lightning_01.LoopedAge = Result338;
	Context.Map.Local.EmitterState001.LoopCountIncreased = Result339;
	Context.Map.Lightning_01.LoopCount = Constant278;
	float Constant279 = 0;
	float Duration_IfResult13;
	float LoopedAge_IfResult6;
	if(Context.Map.Local.EmitterState001.LoopCountIncreased)
	{
	Duration_IfResult13 = Context.Map.Local.EmitterState001.LoopDuration;
	LoopedAge_IfResult6 = Constant279;
	}
	else
	{
	Duration_IfResult13 = Context.Map.Lightning_01.CurrentLoopDuration;
	LoopedAge_IfResult6 = Context.Map.Lightning_01.LoopedAge;
	}
	Context.Map.Lightning_01.CurrentLoopDuration = Duration_IfResult13;
	Context.Map.Lightning_01.LoopedAge = LoopedAge_IfResult6;
	float Result340 = Context.Map.Lightning_01.LoopedAge / Context.Map.Lightning_01.CurrentLoopDuration;
	Context.Map.Lightning_01.NormalizedLoopAge = Result340;
	float Constant280 = 0;
	float Constant281 = 1.0001;
	float Result341 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant280,Constant281);
	Context.Map.Lightning_01.Scalability.DistanceFraction = Result341;
	int Constant282 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant282;
	int Constant283 = 0;
	bool Result342 = NiagaraAll(Context.Map.Engine.Lightning_01.NumParticles == Constant283);
	Context.Map.Local.EmitterState001.NoActiveEmitterParticles = Result342;
	int Constant284 = 0;
	bool Result343 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant284);
	EmitterState001_EmitterChangeState002_Lightning_01_Func_(Context.Map.System.ExecutionState, Result343, Context.Map.System.ExecutionStateSource, Context);
	int Constant287 = 1;
	int Constant288 = 1;
	EmitterState001_EmitterChangeState_Lightning_01_Func_(Constant287, Context.Map.Local.EmitterState001.LoopCountIncreased, Constant288, Context);
	int Constant291 = 1;
	int Constant292 = 0;
	bool Result356 = NiagaraAll(Context.Map.System.ExecutionState != Constant292);
	int Constant293 = 2;
	bool Result357 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant293);
	bool Result358 = Result356 && Result357;
	int Constant294 = 1;
	EmitterState001_EmitterChangeState005_Lightning_01_Func_(Constant291, Result358, Constant294, Context);
	int Constant297 = 3;
	int Constant298 = 0;
	bool Result365 = NiagaraAll(Context.Map.Lightning_01.ExecutionState != Constant298);
	int Constant299 = 0;
	bool Result366 = NiagaraAll(Context.Map.Lightning_01.ExecutionStateSource != Constant299);
	bool Result367 = Result365 && Result366;
	bool Result368 = Context.Map.Local.EmitterState001.NoActiveEmitterParticles && Result367;
	int Constant300 = 3;
	EmitterState001_EmitterChangeState003_Lightning_01_Func_(Constant297, Result368, Constant300, Context);
}

void SimulationPosition003_Lightning_01_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant303 = false;
	float3 Constant304 = float3(0,0,0);
	float3 Vector_IfResult22;
	if(Constant303)
	{
	Vector_IfResult22 = Constant304;
	}
	else
	{
	Vector_IfResult22 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult22;
}

void NMS_BeamComplexity_Lightning_01_Func_(inout FSimulationContext Context)
{
	float X4;
	float Y4;
	float Z4;
	float X5;
	float Y5;
	float Z5;
	X4 = Context.Map.NMS_BeamComplexity.StartLocation.x;
	Y4 = Context.Map.NMS_BeamComplexity.StartLocation.y;
	Z4 = Context.Map.NMS_BeamComplexity.StartLocation.z;
	X5 = Context.Map.NMS_BeamComplexity.EndLocation.x;
	Y5 = Context.Map.NMS_BeamComplexity.EndLocation.y;
	Z5 = Context.Map.NMS_BeamComplexity.EndLocation.z;
	float Result375 = X5 - X4;
	float Result376 = Result375 * Result375;
	float Result377 = Y5 - Y4;
	float Result378 = Result377 * Result377;
	float Result379 = Result376 + Result378;
	float Result380 = Z5 - Z4;
	float Result381 = Result380 * Result380;
	float Result382 = Result379 + Result381;
	float Result383 = sqrt(Result382);
	float Constant305 = 40;
	float Result384 = Result383 / Constant305;
	int Constant306 = 7;
	float Result385 = Result384 + Constant306;
	float Constant307 = 2;
	float Result386 = Result385 / Constant307;
	Context.Map.Lightning_01.Complexity = Result385;
	Context.Map.Lightning_01.DustParticlesQuantity = Result386;
}

void MakeFloatFromInt_Lightning_01_Func_(out float Out_Output, inout FSimulationContext Context)
{
	float NiagaraFloat2;
	NiagaraFloat2 = Context.Map.MakeFloatFromInt.INT_VAR;
	Out_Output = NiagaraFloat2;
}

void Multiply_Float003_Lightning_01_Func_(out float Out_Result, inout FSimulationContext Context)
{
	float Result387 = Context.Map.Multiply_Float003.A * Context.Map.Constants.Lightning_01.Multiply_Float003.B;
	Out_Result = Result387;
}

void MakeIntFromFloat_Lightning_01_Func_(out int Out_NewOutput, inout FSimulationContext Context)
{
	int Value2;
	Value2 = Context.Map.MakeIntFromFloat.FLOAT_VAR;
	Out_NewOutput = Value2;
}

void SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7_Lightning_01_Func_(inout FSimulationContext Context)
{
	Context.Map.Lightning_01.Complexity = Context.Map.SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7.Lightning_01.Complexity;
}

void SpawnBurst_Instantaneous_Lightning_01_Func_(inout FSimulationContext Context)
{
	Context.Map.SpawnBurst_Instantaneous.Age = Context.Map.Lightning_01.LoopedAge;
	float Result388 = Context.Map.SpawnBurst_Instantaneous.Age - Context.Map.Engine.DeltaTime;
	float Result389 = Context.Map.Constants.Lightning_01.SpawnBurst_Instantaneous.SpawnTime - Result388;
	float Constant308 = 0;
	float Output114;
	Output114 = Constant308;
	bool Result390 = NiagaraAll(Result389 >= Output114);
	float Result391 = Context.Map.Constants.Lightning_01.SpawnBurst_Instantaneous.SpawnTime - Context.Map.SpawnBurst_Instantaneous.Age;
	bool Result392 = NiagaraAll(Result391 < Output114);
	bool Result393 = Result390 && Result392;
	int Constant309 = 0;
	bool Result394 = NiagaraAll(Context.Map.SpawnBurst_Instantaneous.SpawnCount == Constant309);
	float Constant310 = 0;
	float Result395 = Context.Map.SpawnBurst_Instantaneous.SpawnCount * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.Lightning_01.SpawnCountScale;
	float Constant311 = 1;
	float Result396 = max(Result395, Constant311);
	float float_IfResult7;
	if(Result394)
	{
	float_IfResult7 = Constant310;
	}
	else
	{
	float_IfResult7 = Result396;
	}
	float Constant312 = 0;
	NiagaraSpawnInfo Output115;
	Output115.Count = float_IfResult7;
	Output115.InterpStartDt = Result389;
	Output115.IntervalDt = Constant312;
	Output115.SpawnGroup = Context.Map.Constants.Lightning_01.SpawnBurst_Instantaneous.SpawnGroup;
	int Constant313 = 0;
	float Constant314 = 0;
	float Constant315 = 0;
	NiagaraSpawnInfo Output116;
	Output116.Count = Constant313;
	Output116.InterpStartDt = Constant314;
	Output116.SpawnGroup = Context.Map.Constants.Lightning_01.SpawnBurst_Instantaneous.SpawnGroup;
	Output116.IntervalDt = Constant315;
	NiagaraSpawnInfo SpawnInfo_IfResult4;
	if(Result393)
	{
	SpawnInfo_IfResult4 = Output115;
	}
	else
	{
	SpawnInfo_IfResult4 = Output116;
	}
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst = SpawnInfo_IfResult4;
	bool Result397 = NiagaraAll(Context.Map.Lightning_01.LoopedAge <= Context.Map.Constants.Lightning_01.SpawnBurst_Instantaneous.SpawnTime);
	bool Result398 = Context.Map.Transient.SpawningbCanEverSpawn || Result397;
	Context.Map.Transient.SpawningbCanEverSpawn = Result398;
}

void Lightning_01_Func_(inout FSimulationContext Context)
{
	float3 SimulationPosition_Lightning_01_Func_Output_SimulationPosition;
	SimulationPosition_Lightning_01_Func_(SimulationPosition_Lightning_01_Func_Output_SimulationPosition, Context);
	float3 SimulationPosition002_Lightning_01_Func_Output_SimulationPosition;
	SimulationPosition002_Lightning_01_Func_(SimulationPosition002_Lightning_01_Func_Output_SimulationPosition, Context);
	Context.Map.Multiply_VectorByFloat.VECTOR_VAR = Context.Map.Engine.Owner.SystemXAxis;
	Context.Map.MakeCustomVectorFromBool.BOOL_VAR = Context.Map.User.ArcReverse;
	Context.Map.MakeCustomVectorFromBool001.BOOL_VAR = Context.Map.User.ArcReverse;
	Context.Map.MakeCustomVectorFromBool.TrueVector = Context.Map.User.End;
	Context.Map.MakeCustomVectorFromBool.FalseVector = SimulationPosition_Lightning_01_Func_Output_SimulationPosition;
	Context.Map.MakeCustomVectorFromBool001.TrueVector = SimulationPosition002_Lightning_01_Func_Output_SimulationPosition;
	Context.Map.MakeCustomVectorFromBool001.FalseVector = Context.Map.User.End;
	float3 MakeCustomVectorFromBool_Lightning_01_Func_Output_NewOutput;
	MakeCustomVectorFromBool_Lightning_01_Func_(MakeCustomVectorFromBool_Lightning_01_Func_Output_NewOutput, Context);
	float3 Multiply_VectorByFloat_Lightning_01_Func_Output_Result;
	Multiply_VectorByFloat_Lightning_01_Func_(Multiply_VectorByFloat_Lightning_01_Func_Output_Result, Context);
	float3 Multiply_VectorByFloat001_Lightning_01_Func_Output_Result;
	Multiply_VectorByFloat001_Lightning_01_Func_(Multiply_VectorByFloat001_Lightning_01_Func_Output_Result, Context);
	float3 MakeCustomVectorFromBool001_Lightning_01_Func_Output_NewOutput;
	MakeCustomVectorFromBool001_Lightning_01_Func_(MakeCustomVectorFromBool001_Lightning_01_Func_Output_NewOutput, Context);
	Context.Map.BeamEmitterSetup.BeamStart = MakeCustomVectorFromBool_Lightning_01_Func_Output_NewOutput;
	Context.Map.BeamEmitterSetup.BeamStartTangent = Multiply_VectorByFloat_Lightning_01_Func_Output_Result;
	Context.Map.BeamEmitterSetup.BeamEndTangent = Multiply_VectorByFloat001_Lightning_01_Func_Output_Result;
	Context.Map.BeamEmitterSetup.BeamEnd = MakeCustomVectorFromBool001_Lightning_01_Func_Output_NewOutput;
	EnterStatScope(24 );
	BeamEmitterSetup_Lightning_01_Func_(Context);
	ExitStatScope( );
	EnterStatScope(25 );
	EmitterState001_Lightning_01_Func_(Context);
	ExitStatScope( );
	float3 SimulationPosition003_Lightning_01_Func_Output_SimulationPosition;
	SimulationPosition003_Lightning_01_Func_(SimulationPosition003_Lightning_01_Func_Output_SimulationPosition, Context);
	Context.Map.NMS_BeamComplexity.StartLocation = SimulationPosition003_Lightning_01_Func_Output_SimulationPosition;
	Context.Map.NMS_BeamComplexity.EndLocation = Context.Map.User.End;
	EnterStatScope(26 );
	NMS_BeamComplexity_Lightning_01_Func_(Context);
	ExitStatScope( );
	Context.Map.MakeFloatFromInt.INT_VAR = Context.Map.Lightning_01.Complexity;
	float MakeFloatFromInt_Lightning_01_Func_Output_Output;
	MakeFloatFromInt_Lightning_01_Func_(MakeFloatFromInt_Lightning_01_Func_Output_Output, Context);
	Context.Map.Multiply_Float003.A = MakeFloatFromInt_Lightning_01_Func_Output_Output;
	float Multiply_Float003_Lightning_01_Func_Output_Result;
	Multiply_Float003_Lightning_01_Func_(Multiply_Float003_Lightning_01_Func_Output_Result, Context);
	Context.Map.MakeIntFromFloat.FLOAT_VAR = Multiply_Float003_Lightning_01_Func_Output_Result;
	int MakeIntFromFloat_Lightning_01_Func_Output_NewOutput;
	MakeIntFromFloat_Lightning_01_Func_(MakeIntFromFloat_Lightning_01_Func_Output_NewOutput, Context);
	Context.Map.SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7.Lightning_01.Complexity = MakeIntFromFloat_Lightning_01_Func_Output_NewOutput;
	EnterStatScope(27 );
	SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7_Lightning_01_Func_(Context);
	ExitStatScope( );
	Context.Map.SpawnBurst_Instantaneous.SpawnCount = Context.Map.Lightning_01.Complexity;
	EnterStatScope(28 );
	SpawnBurst_Instantaneous_Lightning_01_Func_(Context);
	ExitStatScope( );
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = (false);
	Context.Map.Local.SystemState.LoopCountIncreased = Constant;
	int Constant1 = 0;
	Context.Map.Transient.ScalabilityExecutionState = Constant1;
	EnterStatScope(1 );
	SystemState_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	Sparks_02_Func_(Context);
	ExitStatScope( );
	EnterStatScope(5 );
	Ground_Lightning_Func_(Context);
	ExitStatScope( );
	EnterStatScope(8 );
	Sparks_01_Func_(Context);
	ExitStatScope( );
	EnterStatScope(11 );
	Lightning_03_Func_(Context);
	ExitStatScope( );
	EnterStatScope(17 );
	Lightning_02_Func_(Context);
	ExitStatScope( );
	EnterStatScope(23 );
	Lightning_01_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(29 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = InputDataInt(0, 0);
	Context.Map.Ground_Lightning.Age = InputDataFloat(0, 1);
	Context.Map.Ground_Lightning.CurrentLoopDuration = InputDataFloat(0, 2);
	Context.Map.Ground_Lightning.ExecutionState = InputDataInt(0, 3);
	Context.Map.Ground_Lightning.ExecutionStateSource = InputDataInt(0, 4);
	Context.Map.Ground_Lightning.LocalSpace = InputDataBool(0, 5);
	Context.Map.Ground_Lightning.LoopCount = InputDataInt(0, 6);
	Context.Map.Ground_Lightning.LoopedAge = InputDataFloat(0, 7);
	Context.Map.Ground_Lightning.NormalizedLoopAge = InputDataFloat(0, 8);
	Context.Map.Ground_Lightning.Scalability.DistanceFraction = InputDataFloat(0, 9);
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.Ground_Lightning.SpawnRate.SpawnRemainder = InputDataFloat(0, 14);
	Context.Map.Lightning_01.Age = InputDataFloat(0, 15);
	Context.Map.Lightning_01.BeamCurve2 = InputDataFloat(0, 16);
	Context.Map.Lightning_01.BeamDirection.x = InputDataFloat(0, 17);
	Context.Map.Lightning_01.BeamDirection.y = InputDataFloat(0, 18);
	Context.Map.Lightning_01.BeamDirection.z = InputDataFloat(0, 19);
	Context.Map.Lightning_01.BeamEnd.x = InputDataFloat(0, 20);
	Context.Map.Lightning_01.BeamEnd.y = InputDataFloat(0, 21);
	Context.Map.Lightning_01.BeamEnd.z = InputDataFloat(0, 22);
	Context.Map.Lightning_01.BeamEndTangent.x = InputDataFloat(0, 23);
	Context.Map.Lightning_01.BeamEndTangent.y = InputDataFloat(0, 24);
	Context.Map.Lightning_01.BeamEndTangent.z = InputDataFloat(0, 25);
	Context.Map.Lightning_01.BeamID = InputDataInt(0, 26);
	Context.Map.Lightning_01.BeamStart.x = InputDataFloat(0, 27);
	Context.Map.Lightning_01.BeamStart.y = InputDataFloat(0, 28);
	Context.Map.Lightning_01.BeamStart.z = InputDataFloat(0, 29);
	Context.Map.Lightning_01.BeamStartEndLength = InputDataFloat(0, 30);
	Context.Map.Lightning_01.BeamStartTangent.x = InputDataFloat(0, 31);
	Context.Map.Lightning_01.BeamStartTangent.y = InputDataFloat(0, 32);
	Context.Map.Lightning_01.BeamStartTangent.z = InputDataFloat(0, 33);
	Context.Map.Lightning_01.BeamVector.x = InputDataFloat(0, 34);
	Context.Map.Lightning_01.BeamVector.y = InputDataFloat(0, 35);
	Context.Map.Lightning_01.BeamVector.z = InputDataFloat(0, 36);
	Context.Map.Lightning_01.Complexity = InputDataInt(0, 37);
	Context.Map.Lightning_01.CurrentLoopDuration = InputDataFloat(0, 38);
	Context.Map.Lightning_01.DustParticlesQuantity = InputDataInt(0, 39);
	Context.Map.Lightning_01.ExecutionState = InputDataInt(0, 40);
	Context.Map.Lightning_01.ExecutionStateSource = InputDataInt(0, 41);
	Context.Map.Lightning_01.LifeTime = InputDataFloat(0, 42);
	Context.Map.Lightning_01.LocalSpace = InputDataBool(0, 43);
	Context.Map.Lightning_01.LoopCount = InputDataInt(0, 44);
	Context.Map.Lightning_01.LoopedAge = InputDataFloat(0, 45);
	Context.Map.Lightning_01.NormalizedLoopAge = InputDataFloat(0, 46);
	Context.Map.Lightning_01.RandomVector.x = InputDataFloat(0, 47);
	Context.Map.Lightning_01.RandomVector.y = InputDataFloat(0, 48);
	Context.Map.Lightning_01.RandomVector.z = InputDataFloat(0, 49);
	Context.Map.Lightning_01.Scalability.DistanceFraction = InputDataFloat(0, 50);
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Lightning_01.UseBeamTangents = InputDataBool(0, 55);
	Context.Map.Lightning_02.Age = InputDataFloat(0, 56);
	Context.Map.Lightning_02.BeamCurve2 = InputDataFloat(0, 57);
	Context.Map.Lightning_02.BeamDirection.x = InputDataFloat(0, 58);
	Context.Map.Lightning_02.BeamDirection.y = InputDataFloat(0, 59);
	Context.Map.Lightning_02.BeamDirection.z = InputDataFloat(0, 60);
	Context.Map.Lightning_02.BeamEnd.x = InputDataFloat(0, 61);
	Context.Map.Lightning_02.BeamEnd.y = InputDataFloat(0, 62);
	Context.Map.Lightning_02.BeamEnd.z = InputDataFloat(0, 63);
	Context.Map.Lightning_02.BeamEndTangent.x = InputDataFloat(0, 64);
	Context.Map.Lightning_02.BeamEndTangent.y = InputDataFloat(0, 65);
	Context.Map.Lightning_02.BeamEndTangent.z = InputDataFloat(0, 66);
	Context.Map.Lightning_02.BeamID = InputDataInt(0, 67);
	Context.Map.Lightning_02.BeamStart.x = InputDataFloat(0, 68);
	Context.Map.Lightning_02.BeamStart.y = InputDataFloat(0, 69);
	Context.Map.Lightning_02.BeamStart.z = InputDataFloat(0, 70);
	Context.Map.Lightning_02.BeamStartEndLength = InputDataFloat(0, 71);
	Context.Map.Lightning_02.BeamStartTangent.x = InputDataFloat(0, 72);
	Context.Map.Lightning_02.BeamStartTangent.y = InputDataFloat(0, 73);
	Context.Map.Lightning_02.BeamStartTangent.z = InputDataFloat(0, 74);
	Context.Map.Lightning_02.BeamVector.x = InputDataFloat(0, 75);
	Context.Map.Lightning_02.BeamVector.y = InputDataFloat(0, 76);
	Context.Map.Lightning_02.BeamVector.z = InputDataFloat(0, 77);
	Context.Map.Lightning_02.Complexity = InputDataInt(0, 78);
	Context.Map.Lightning_02.CurrentLoopDuration = InputDataFloat(0, 79);
	Context.Map.Lightning_02.DustParticlesQuantity = InputDataInt(0, 80);
	Context.Map.Lightning_02.ExecutionState = InputDataInt(0, 81);
	Context.Map.Lightning_02.ExecutionStateSource = InputDataInt(0, 82);
	Context.Map.Lightning_02.LifeTime = InputDataFloat(0, 83);
	Context.Map.Lightning_02.LocalSpace = InputDataBool(0, 84);
	Context.Map.Lightning_02.LoopCount = InputDataInt(0, 85);
	Context.Map.Lightning_02.LoopedAge = InputDataFloat(0, 86);
	Context.Map.Lightning_02.NormalizedLoopAge = InputDataFloat(0, 87);
	Context.Map.Lightning_02.RandomVector.x = InputDataFloat(0, 88);
	Context.Map.Lightning_02.RandomVector.y = InputDataFloat(0, 89);
	Context.Map.Lightning_02.RandomVector.z = InputDataFloat(0, 90);
	Context.Map.Lightning_02.Scalability.DistanceFraction = InputDataFloat(0, 91);
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Lightning_02.UseBeamTangents = InputDataBool(0, 96);
	Context.Map.Lightning_03.Age = InputDataFloat(0, 97);
	Context.Map.Lightning_03.BeamCurve2 = InputDataFloat(0, 98);
	Context.Map.Lightning_03.BeamDirection.x = InputDataFloat(0, 99);
	Context.Map.Lightning_03.BeamDirection.y = InputDataFloat(0, 100);
	Context.Map.Lightning_03.BeamDirection.z = InputDataFloat(0, 101);
	Context.Map.Lightning_03.BeamEnd.x = InputDataFloat(0, 102);
	Context.Map.Lightning_03.BeamEnd.y = InputDataFloat(0, 103);
	Context.Map.Lightning_03.BeamEnd.z = InputDataFloat(0, 104);
	Context.Map.Lightning_03.BeamEndTangent.x = InputDataFloat(0, 105);
	Context.Map.Lightning_03.BeamEndTangent.y = InputDataFloat(0, 106);
	Context.Map.Lightning_03.BeamEndTangent.z = InputDataFloat(0, 107);
	Context.Map.Lightning_03.BeamID = InputDataInt(0, 108);
	Context.Map.Lightning_03.BeamStart.x = InputDataFloat(0, 109);
	Context.Map.Lightning_03.BeamStart.y = InputDataFloat(0, 110);
	Context.Map.Lightning_03.BeamStart.z = InputDataFloat(0, 111);
	Context.Map.Lightning_03.BeamStartEndLength = InputDataFloat(0, 112);
	Context.Map.Lightning_03.BeamStartTangent.x = InputDataFloat(0, 113);
	Context.Map.Lightning_03.BeamStartTangent.y = InputDataFloat(0, 114);
	Context.Map.Lightning_03.BeamStartTangent.z = InputDataFloat(0, 115);
	Context.Map.Lightning_03.BeamVector.x = InputDataFloat(0, 116);
	Context.Map.Lightning_03.BeamVector.y = InputDataFloat(0, 117);
	Context.Map.Lightning_03.BeamVector.z = InputDataFloat(0, 118);
	Context.Map.Lightning_03.Complexity = InputDataInt(0, 119);
	Context.Map.Lightning_03.CurrentLoopDuration = InputDataFloat(0, 120);
	Context.Map.Lightning_03.DustParticlesQuantity = InputDataInt(0, 121);
	Context.Map.Lightning_03.ExecutionState = InputDataInt(0, 122);
	Context.Map.Lightning_03.ExecutionStateSource = InputDataInt(0, 123);
	Context.Map.Lightning_03.LifeTime = InputDataFloat(0, 124);
	Context.Map.Lightning_03.LocalSpace = InputDataBool(0, 125);
	Context.Map.Lightning_03.LoopCount = InputDataInt(0, 126);
	Context.Map.Lightning_03.LoopedAge = InputDataFloat(0, 127);
	Context.Map.Lightning_03.NormalizedLoopAge = InputDataFloat(0, 128);
	Context.Map.Lightning_03.RandomVector.x = InputDataFloat(0, 129);
	Context.Map.Lightning_03.RandomVector.y = InputDataFloat(0, 130);
	Context.Map.Lightning_03.RandomVector.z = InputDataFloat(0, 131);
	Context.Map.Lightning_03.Scalability.DistanceFraction = InputDataFloat(0, 132);
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Lightning_03.UseBeamTangents = InputDataBool(0, 137);
	Context.Map.Sparks_01.Age = InputDataFloat(0, 138);
	Context.Map.Sparks_01.AlphaScale = InputDataFloat(0, 139);
	Context.Map.Sparks_01.CurrentLoopDuration = InputDataFloat(0, 140);
	Context.Map.Sparks_01.ExecutionState = InputDataInt(0, 141);
	Context.Map.Sparks_01.ExecutionStateSource = InputDataInt(0, 142);
	Context.Map.Sparks_01.LocalSpace = InputDataBool(0, 143);
	Context.Map.Sparks_01.LoopCount = InputDataInt(0, 144);
	Context.Map.Sparks_01.LoopedAge = InputDataFloat(0, 145);
	Context.Map.Sparks_01.NormalizedLoopAge = InputDataFloat(0, 146);
	Context.Map.Sparks_01.Scalability.DistanceFraction = InputDataFloat(0, 147);
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Sparks_02.Age = InputDataFloat(0, 152);
	Context.Map.Sparks_02.AlphaScale = InputDataFloat(0, 153);
	Context.Map.Sparks_02.CurrentLoopDuration = InputDataFloat(0, 154);
	Context.Map.Sparks_02.ExecutionState = InputDataInt(0, 155);
	Context.Map.Sparks_02.ExecutionStateSource = InputDataInt(0, 156);
	Context.Map.Sparks_02.LocalSpace = InputDataBool(0, 157);
	Context.Map.Sparks_02.LoopCount = InputDataInt(0, 158);
	Context.Map.Sparks_02.LoopedAge = InputDataFloat(0, 159);
	Context.Map.Sparks_02.NormalizedLoopAge = InputDataFloat(0, 160);
	Context.Map.Sparks_02.Scalability.DistanceFraction = InputDataFloat(0, 161);
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.System.Age = InputDataFloat(0, 166);
	Context.Map.System.bCompleteOnInactive = InputDataBool(0, 167);
	Context.Map.System.CurrentLoopDuration = InputDataFloat(0, 168);
	Context.Map.System.ExecutionState = InputDataInt(0, 169);
	Context.Map.System.ExecutionStateSource = InputDataInt(0, 170);
	Context.Map.System.LoopCount = InputDataInt(0, 171);
	Context.Map.System.LoopedAge = InputDataFloat(0, 172);
	Context.Map.System.NormalizedLoopAge = InputDataFloat(0, 173);
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Engine.Ground_Lightning.NumParticles = InputDataInt(1, 1);
	Context.Map.Engine.Ground_Lightning.SpawnCountScale = InputDataFloat(1, 2);
	Context.Map.Engine.Lightning_01.NumParticles = InputDataInt(1, 3);
	Context.Map.Engine.Lightning_01.SpawnCountScale = InputDataFloat(1, 4);
	Context.Map.Engine.Lightning_02.NumParticles = InputDataInt(1, 5);
	Context.Map.Engine.Lightning_02.SpawnCountScale = InputDataFloat(1, 6);
	Context.Map.Engine.Lightning_03.NumParticles = InputDataInt(1, 7);
	Context.Map.Engine.Lightning_03.SpawnCountScale = InputDataFloat(1, 8);
	Context.Map.Engine.Owner.ExecutionState = InputDataInt(1, 9);
	Context.Map.Engine.Owner.LODDistanceFraction = InputDataFloat(1, 10);
	Context.Map.Engine.Owner.Position.x = InputDataFloat(1, 11);
	Context.Map.Engine.Owner.Position.y = InputDataFloat(1, 12);
	Context.Map.Engine.Owner.Position.z = InputDataFloat(1, 13);
	Context.Map.Engine.Owner.SystemXAxis.x = InputDataFloat(1, 14);
	Context.Map.Engine.Owner.SystemXAxis.y = InputDataFloat(1, 15);
	Context.Map.Engine.Owner.SystemXAxis.z = InputDataFloat(1, 16);
	Context.Map.Engine.Sparks_01.NumParticles = InputDataInt(1, 17);
	Context.Map.Engine.Sparks_01.SpawnCountScale = InputDataFloat(1, 18);
	Context.Map.Engine.Sparks_02.NumParticles = InputDataInt(1, 19);
	Context.Map.Engine.Sparks_02.SpawnCountScale = InputDataFloat(1, 20);
	Context.Map.Engine.System.NumEmittersAlive = InputDataInt(1, 21);
	Context.Map.Engine.System.TickCount = InputDataInt(1, 22);
	Context.Map.User.ArcReverse = InputDataBool(1, 23);
	Context.Map.User.End.x = InputDataFloat(1, 24);
	Context.Map.User.End.y = InputDataFloat(1, 25);
	Context.Map.User.End.z = InputDataFloat(1, 26);
	Context.Map.User.End2.x = InputDataFloat(1, 27);
	Context.Map.User.End2.y = InputDataFloat(1, 28);
	Context.Map.User.End2.z = InputDataFloat(1, 29);
	Context.Map.User.Quantity = InputDataFloat(1, 30);
	Context.Map.User.Sparks_02.RandomSeed = InputDataInt(1, 31);
	Context.Map.Constants.SystemState.LoopDelay = Constants_SystemState_LoopDelay;
	Context.Map.Constants.SystemState.LoopDuration = Constants_SystemState_LoopDuration;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Sparks_02.EmitterState.LoopDuration = Constants_Sparks_02_EmitterState_LoopDuration;
	Context.Map.Constants.Sparks_02.EmitterState.LoopDelay = Constants_Sparks_02_EmitterState_LoopDelay;
	Context.Map.Constants.Sparks_02.UniformRangedInt.Minimum = Constants_Sparks_02_UniformRangedInt_Minimum;
	Context.Map.Constants.Sparks_02.UniformRangedInt.Maximum = Constants_Sparks_02_UniformRangedInt_Maximum;
	Context.Map.Constants.Sparks_02.UniformRangedInt.RandomSeed = Constants_Sparks_02_UniformRangedInt_RandomSeed;
	Context.Map.Constants.Sparks_02.SpawnBurst_Instantaneous.SpawnTime = Constants_Sparks_02_SpawnBurst_Instantaneous_SpawnTime;
	Context.Map.Constants.Sparks_02.SpawnBurst_Instantaneous.SpawnGroup = Constants_Sparks_02_SpawnBurst_Instantaneous_SpawnGroup;
	Context.Map.Constants.Sparks_02.SpawnBurst_Instantaneous.SpawnProbability = Constants_Sparks_02_SpawnBurst_Instantaneous_SpawnProbability;
	Context.Map.Constants.Ground_Lightning.EmitterState.LoopDuration = Constants_Ground_Lightning_EmitterState_LoopDuration;
	Context.Map.Constants.Ground_Lightning.EmitterState.LoopDelay = Constants_Ground_Lightning_EmitterState_LoopDelay;
	Context.Map.Constants.Ground_Lightning.SpawnRate.SpawnGroup = Constants_Ground_Lightning_SpawnRate_SpawnGroup;
	Context.Map.Constants.Ground_Lightning.SpawnRate.SpawnProbability = Constants_Ground_Lightning_SpawnRate_SpawnProbability;
	Context.Map.Constants.Sparks_01.EmitterState001.LoopDuration = Constants_Sparks_01_EmitterState001_LoopDuration;
	Context.Map.Constants.Sparks_01.EmitterState001.LoopDelay = Constants_Sparks_01_EmitterState001_LoopDelay;
	Context.Map.Constants.Sparks_01.UniformRangedInt.Minimum = Constants_Sparks_01_UniformRangedInt_Minimum;
	Context.Map.Constants.Sparks_01.UniformRangedInt.Maximum = Constants_Sparks_01_UniformRangedInt_Maximum;
	Context.Map.Constants.Sparks_01.UniformRangedInt.RandomSeed = Constants_Sparks_01_UniformRangedInt_RandomSeed;
	Context.Map.Constants.Sparks_01.SpawnBurst_Instantaneous.SpawnTime = Constants_Sparks_01_SpawnBurst_Instantaneous_SpawnTime;
	Context.Map.Constants.Sparks_01.SpawnBurst_Instantaneous.SpawnGroup = Constants_Sparks_01_SpawnBurst_Instantaneous_SpawnGroup;
	Context.Map.Constants.Sparks_01.SpawnBurst_Instantaneous.SpawnProbability = Constants_Sparks_01_SpawnBurst_Instantaneous_SpawnProbability;
	Context.Map.Constants.Lightning_03.Multiply_VectorByFloat.FLOAT_VAR = Constants_Lightning_03_Multiply_VectorByFloat_FLOAT_VAR;
	Context.Map.Constants.Lightning_03.Multiply_VectorByFloat001.VECTOR_VAR = Constants_Lightning_03_Multiply_VectorByFloat001_VECTOR_VAR;
	Context.Map.Constants.Lightning_03.Multiply_VectorByFloat001.FLOAT_VAR = Constants_Lightning_03_Multiply_VectorByFloat001_FLOAT_VAR;
	Context.Map.Constants.Lightning_03.EmitterState.LoopDuration = Constants_Lightning_03_EmitterState_LoopDuration;
	Context.Map.Constants.Lightning_03.EmitterState.LoopDelay = Constants_Lightning_03_EmitterState_LoopDelay;
	Context.Map.Constants.Lightning_03.Multiply_Float003.B = Constants_Lightning_03_Multiply_Float003_B;
	Context.Map.Constants.Lightning_03.SpawnBurst_Instantaneous.SpawnTime = Constants_Lightning_03_SpawnBurst_Instantaneous_SpawnTime;
	Context.Map.Constants.Lightning_03.SpawnBurst_Instantaneous.SpawnGroup = Constants_Lightning_03_SpawnBurst_Instantaneous_SpawnGroup;
	Context.Map.Constants.Lightning_03.SpawnBurst_Instantaneous.SpawnProbability = Constants_Lightning_03_SpawnBurst_Instantaneous_SpawnProbability;
	Context.Map.Constants.Lightning_02.Multiply_VectorByFloat.FLOAT_VAR = Constants_Lightning_02_Multiply_VectorByFloat_FLOAT_VAR;
	Context.Map.Constants.Lightning_02.Multiply_VectorByFloat001.VECTOR_VAR = Constants_Lightning_02_Multiply_VectorByFloat001_VECTOR_VAR;
	Context.Map.Constants.Lightning_02.Multiply_VectorByFloat001.FLOAT_VAR = Constants_Lightning_02_Multiply_VectorByFloat001_FLOAT_VAR;
	Context.Map.Constants.Lightning_02.EmitterState001.LoopDuration = Constants_Lightning_02_EmitterState001_LoopDuration;
	Context.Map.Constants.Lightning_02.EmitterState001.LoopDelay = Constants_Lightning_02_EmitterState001_LoopDelay;
	Context.Map.Constants.Lightning_02.Multiply_Float003.B = Constants_Lightning_02_Multiply_Float003_B;
	Context.Map.Constants.Lightning_02.SpawnBurst_Instantaneous.SpawnTime = Constants_Lightning_02_SpawnBurst_Instantaneous_SpawnTime;
	Context.Map.Constants.Lightning_02.SpawnBurst_Instantaneous.SpawnGroup = Constants_Lightning_02_SpawnBurst_Instantaneous_SpawnGroup;
	Context.Map.Constants.Lightning_02.SpawnBurst_Instantaneous.SpawnProbability = Constants_Lightning_02_SpawnBurst_Instantaneous_SpawnProbability;
	Context.Map.Constants.Lightning_01.Multiply_VectorByFloat.FLOAT_VAR = Constants_Lightning_01_Multiply_VectorByFloat_FLOAT_VAR;
	Context.Map.Constants.Lightning_01.Multiply_VectorByFloat001.VECTOR_VAR = Constants_Lightning_01_Multiply_VectorByFloat001_VECTOR_VAR;
	Context.Map.Constants.Lightning_01.Multiply_VectorByFloat001.FLOAT_VAR = Constants_Lightning_01_Multiply_VectorByFloat001_FLOAT_VAR;
	Context.Map.Constants.Lightning_01.EmitterState001.LoopDuration = Constants_Lightning_01_EmitterState001_LoopDuration;
	Context.Map.Constants.Lightning_01.EmitterState001.LoopDelay = Constants_Lightning_01_EmitterState001_LoopDelay;
	Context.Map.Constants.Lightning_01.Multiply_Float003.B = Constants_Lightning_01_Multiply_Float003_B;
	Context.Map.Constants.Lightning_01.SpawnBurst_Instantaneous.SpawnTime = Constants_Lightning_01_SpawnBurst_Instantaneous_SpawnTime;
	Context.Map.Constants.Lightning_01.SpawnBurst_Instantaneous.SpawnGroup = Constants_Lightning_01_SpawnBurst_Instantaneous_SpawnGroup;
	Context.Map.Constants.Lightning_01.SpawnBurst_Instantaneous.SpawnProbability = Constants_Lightning_01_SpawnBurst_Instantaneous_SpawnProbability;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Ground_Lightning.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Ground_Lightning.CurrentLoopDuration);
	OutputDataInt(0, 3, TmpWriteIndex, Context.Map.Ground_Lightning.ExecutionState);
	OutputDataInt(0, 4, TmpWriteIndex, Context.Map.Ground_Lightning.ExecutionStateSource);
	OutputDataBool(0, 5, TmpWriteIndex, Context.Map.Ground_Lightning.LocalSpace);
	OutputDataInt(0, 6, TmpWriteIndex, Context.Map.Ground_Lightning.LoopCount);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Ground_Lightning.LoopedAge);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Ground_Lightning.NormalizedLoopAge);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Ground_Lightning.Scalability.DistanceFraction);
	OutputDataInt(0, 10, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 13, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Lightning_01.Age);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Lightning_01.BeamCurve2);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Lightning_01.BeamDirection.x);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Lightning_01.BeamDirection.y);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Lightning_01.BeamDirection.z);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Lightning_01.BeamEnd.x);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Lightning_01.BeamEnd.y);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Lightning_01.BeamEnd.z);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Lightning_01.BeamEndTangent.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Lightning_01.BeamEndTangent.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Lightning_01.BeamEndTangent.z);
	OutputDataInt(0, 26, TmpWriteIndex, Context.Map.Lightning_01.BeamID);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Lightning_01.BeamStart.x);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Lightning_01.BeamStart.y);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Lightning_01.BeamStart.z);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Lightning_01.BeamStartEndLength);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Lightning_01.BeamStartTangent.x);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Lightning_01.BeamStartTangent.y);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Lightning_01.BeamStartTangent.z);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Lightning_01.BeamVector.x);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Lightning_01.BeamVector.y);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Lightning_01.BeamVector.z);
	OutputDataInt(0, 37, TmpWriteIndex, Context.Map.Lightning_01.Complexity);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.Lightning_01.CurrentLoopDuration);
	OutputDataInt(0, 39, TmpWriteIndex, Context.Map.Lightning_01.DustParticlesQuantity);
	OutputDataInt(0, 40, TmpWriteIndex, Context.Map.Lightning_01.ExecutionState);
	OutputDataInt(0, 41, TmpWriteIndex, Context.Map.Lightning_01.ExecutionStateSource);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.Lightning_01.LifeTime);
	OutputDataBool(0, 43, TmpWriteIndex, Context.Map.Lightning_01.LocalSpace);
	OutputDataInt(0, 44, TmpWriteIndex, Context.Map.Lightning_01.LoopCount);
	OutputDataFloat(0, 45, TmpWriteIndex, Context.Map.Lightning_01.LoopedAge);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.Map.Lightning_01.NormalizedLoopAge);
	OutputDataFloat(0, 47, TmpWriteIndex, Context.Map.Lightning_01.RandomVector.x);
	OutputDataFloat(0, 48, TmpWriteIndex, Context.Map.Lightning_01.RandomVector.y);
	OutputDataFloat(0, 49, TmpWriteIndex, Context.Map.Lightning_01.RandomVector.z);
	OutputDataFloat(0, 50, TmpWriteIndex, Context.Map.Lightning_01.Scalability.DistanceFraction);
	OutputDataInt(0, 51, TmpWriteIndex, Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 52, TmpWriteIndex, Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 53, TmpWriteIndex, Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 54, TmpWriteIndex, Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 55, TmpWriteIndex, Context.Map.Lightning_01.UseBeamTangents);
	OutputDataFloat(0, 56, TmpWriteIndex, Context.Map.Lightning_02.Age);
	OutputDataFloat(0, 57, TmpWriteIndex, Context.Map.Lightning_02.BeamCurve2);
	OutputDataFloat(0, 58, TmpWriteIndex, Context.Map.Lightning_02.BeamDirection.x);
	OutputDataFloat(0, 59, TmpWriteIndex, Context.Map.Lightning_02.BeamDirection.y);
	OutputDataFloat(0, 60, TmpWriteIndex, Context.Map.Lightning_02.BeamDirection.z);
	OutputDataFloat(0, 61, TmpWriteIndex, Context.Map.Lightning_02.BeamEnd.x);
	OutputDataFloat(0, 62, TmpWriteIndex, Context.Map.Lightning_02.BeamEnd.y);
	OutputDataFloat(0, 63, TmpWriteIndex, Context.Map.Lightning_02.BeamEnd.z);
	OutputDataFloat(0, 64, TmpWriteIndex, Context.Map.Lightning_02.BeamEndTangent.x);
	OutputDataFloat(0, 65, TmpWriteIndex, Context.Map.Lightning_02.BeamEndTangent.y);
	OutputDataFloat(0, 66, TmpWriteIndex, Context.Map.Lightning_02.BeamEndTangent.z);
	OutputDataInt(0, 67, TmpWriteIndex, Context.Map.Lightning_02.BeamID);
	OutputDataFloat(0, 68, TmpWriteIndex, Context.Map.Lightning_02.BeamStart.x);
	OutputDataFloat(0, 69, TmpWriteIndex, Context.Map.Lightning_02.BeamStart.y);
	OutputDataFloat(0, 70, TmpWriteIndex, Context.Map.Lightning_02.BeamStart.z);
	OutputDataFloat(0, 71, TmpWriteIndex, Context.Map.Lightning_02.BeamStartEndLength);
	OutputDataFloat(0, 72, TmpWriteIndex, Context.Map.Lightning_02.BeamStartTangent.x);
	OutputDataFloat(0, 73, TmpWriteIndex, Context.Map.Lightning_02.BeamStartTangent.y);
	OutputDataFloat(0, 74, TmpWriteIndex, Context.Map.Lightning_02.BeamStartTangent.z);
	OutputDataFloat(0, 75, TmpWriteIndex, Context.Map.Lightning_02.BeamVector.x);
	OutputDataFloat(0, 76, TmpWriteIndex, Context.Map.Lightning_02.BeamVector.y);
	OutputDataFloat(0, 77, TmpWriteIndex, Context.Map.Lightning_02.BeamVector.z);
	OutputDataInt(0, 78, TmpWriteIndex, Context.Map.Lightning_02.Complexity);
	OutputDataFloat(0, 79, TmpWriteIndex, Context.Map.Lightning_02.CurrentLoopDuration);
	OutputDataInt(0, 80, TmpWriteIndex, Context.Map.Lightning_02.DustParticlesQuantity);
	OutputDataInt(0, 81, TmpWriteIndex, Context.Map.Lightning_02.ExecutionState);
	OutputDataInt(0, 82, TmpWriteIndex, Context.Map.Lightning_02.ExecutionStateSource);
	OutputDataFloat(0, 83, TmpWriteIndex, Context.Map.Lightning_02.LifeTime);
	OutputDataBool(0, 84, TmpWriteIndex, Context.Map.Lightning_02.LocalSpace);
	OutputDataInt(0, 85, TmpWriteIndex, Context.Map.Lightning_02.LoopCount);
	OutputDataFloat(0, 86, TmpWriteIndex, Context.Map.Lightning_02.LoopedAge);
	OutputDataFloat(0, 87, TmpWriteIndex, Context.Map.Lightning_02.NormalizedLoopAge);
	OutputDataFloat(0, 88, TmpWriteIndex, Context.Map.Lightning_02.RandomVector.x);
	OutputDataFloat(0, 89, TmpWriteIndex, Context.Map.Lightning_02.RandomVector.y);
	OutputDataFloat(0, 90, TmpWriteIndex, Context.Map.Lightning_02.RandomVector.z);
	OutputDataFloat(0, 91, TmpWriteIndex, Context.Map.Lightning_02.Scalability.DistanceFraction);
	OutputDataInt(0, 92, TmpWriteIndex, Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 93, TmpWriteIndex, Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 94, TmpWriteIndex, Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 95, TmpWriteIndex, Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 96, TmpWriteIndex, Context.Map.Lightning_02.UseBeamTangents);
	OutputDataFloat(0, 97, TmpWriteIndex, Context.Map.Lightning_03.Age);
	OutputDataFloat(0, 98, TmpWriteIndex, Context.Map.Lightning_03.BeamCurve2);
	OutputDataFloat(0, 99, TmpWriteIndex, Context.Map.Lightning_03.BeamDirection.x);
	OutputDataFloat(0, 100, TmpWriteIndex, Context.Map.Lightning_03.BeamDirection.y);
	OutputDataFloat(0, 101, TmpWriteIndex, Context.Map.Lightning_03.BeamDirection.z);
	OutputDataFloat(0, 102, TmpWriteIndex, Context.Map.Lightning_03.BeamEnd.x);
	OutputDataFloat(0, 103, TmpWriteIndex, Context.Map.Lightning_03.BeamEnd.y);
	OutputDataFloat(0, 104, TmpWriteIndex, Context.Map.Lightning_03.BeamEnd.z);
	OutputDataFloat(0, 105, TmpWriteIndex, Context.Map.Lightning_03.BeamEndTangent.x);
	OutputDataFloat(0, 106, TmpWriteIndex, Context.Map.Lightning_03.BeamEndTangent.y);
	OutputDataFloat(0, 107, TmpWriteIndex, Context.Map.Lightning_03.BeamEndTangent.z);
	OutputDataInt(0, 108, TmpWriteIndex, Context.Map.Lightning_03.BeamID);
	OutputDataFloat(0, 109, TmpWriteIndex, Context.Map.Lightning_03.BeamStart.x);
	OutputDataFloat(0, 110, TmpWriteIndex, Context.Map.Lightning_03.BeamStart.y);
	OutputDataFloat(0, 111, TmpWriteIndex, Context.Map.Lightning_03.BeamStart.z);
	OutputDataFloat(0, 112, TmpWriteIndex, Context.Map.Lightning_03.BeamStartEndLength);
	OutputDataFloat(0, 113, TmpWriteIndex, Context.Map.Lightning_03.BeamStartTangent.x);
	OutputDataFloat(0, 114, TmpWriteIndex, Context.Map.Lightning_03.BeamStartTangent.y);
	OutputDataFloat(0, 115, TmpWriteIndex, Context.Map.Lightning_03.BeamStartTangent.z);
	OutputDataFloat(0, 116, TmpWriteIndex, Context.Map.Lightning_03.BeamVector.x);
	OutputDataFloat(0, 117, TmpWriteIndex, Context.Map.Lightning_03.BeamVector.y);
	OutputDataFloat(0, 118, TmpWriteIndex, Context.Map.Lightning_03.BeamVector.z);
	OutputDataInt(0, 119, TmpWriteIndex, Context.Map.Lightning_03.Complexity);
	OutputDataFloat(0, 120, TmpWriteIndex, Context.Map.Lightning_03.CurrentLoopDuration);
	OutputDataInt(0, 121, TmpWriteIndex, Context.Map.Lightning_03.DustParticlesQuantity);
	OutputDataInt(0, 122, TmpWriteIndex, Context.Map.Lightning_03.ExecutionState);
	OutputDataInt(0, 123, TmpWriteIndex, Context.Map.Lightning_03.ExecutionStateSource);
	OutputDataFloat(0, 124, TmpWriteIndex, Context.Map.Lightning_03.LifeTime);
	OutputDataBool(0, 125, TmpWriteIndex, Context.Map.Lightning_03.LocalSpace);
	OutputDataInt(0, 126, TmpWriteIndex, Context.Map.Lightning_03.LoopCount);
	OutputDataFloat(0, 127, TmpWriteIndex, Context.Map.Lightning_03.LoopedAge);
	OutputDataFloat(0, 128, TmpWriteIndex, Context.Map.Lightning_03.NormalizedLoopAge);
	OutputDataFloat(0, 129, TmpWriteIndex, Context.Map.Lightning_03.RandomVector.x);
	OutputDataFloat(0, 130, TmpWriteIndex, Context.Map.Lightning_03.RandomVector.y);
	OutputDataFloat(0, 131, TmpWriteIndex, Context.Map.Lightning_03.RandomVector.z);
	OutputDataFloat(0, 132, TmpWriteIndex, Context.Map.Lightning_03.Scalability.DistanceFraction);
	OutputDataInt(0, 133, TmpWriteIndex, Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 134, TmpWriteIndex, Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 135, TmpWriteIndex, Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 136, TmpWriteIndex, Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 137, TmpWriteIndex, Context.Map.Lightning_03.UseBeamTangents);
	OutputDataFloat(0, 138, TmpWriteIndex, Context.Map.Sparks_01.Age);
	OutputDataFloat(0, 139, TmpWriteIndex, Context.Map.Sparks_01.AlphaScale);
	OutputDataFloat(0, 140, TmpWriteIndex, Context.Map.Sparks_01.CurrentLoopDuration);
	OutputDataInt(0, 141, TmpWriteIndex, Context.Map.Sparks_01.ExecutionState);
	OutputDataInt(0, 142, TmpWriteIndex, Context.Map.Sparks_01.ExecutionStateSource);
	OutputDataBool(0, 143, TmpWriteIndex, Context.Map.Sparks_01.LocalSpace);
	OutputDataInt(0, 144, TmpWriteIndex, Context.Map.Sparks_01.LoopCount);
	OutputDataFloat(0, 145, TmpWriteIndex, Context.Map.Sparks_01.LoopedAge);
	OutputDataFloat(0, 146, TmpWriteIndex, Context.Map.Sparks_01.NormalizedLoopAge);
	OutputDataFloat(0, 147, TmpWriteIndex, Context.Map.Sparks_01.Scalability.DistanceFraction);
	OutputDataInt(0, 148, TmpWriteIndex, Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 149, TmpWriteIndex, Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 150, TmpWriteIndex, Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 151, TmpWriteIndex, Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 152, TmpWriteIndex, Context.Map.Sparks_02.Age);
	OutputDataFloat(0, 153, TmpWriteIndex, Context.Map.Sparks_02.AlphaScale);
	OutputDataFloat(0, 154, TmpWriteIndex, Context.Map.Sparks_02.CurrentLoopDuration);
	OutputDataInt(0, 155, TmpWriteIndex, Context.Map.Sparks_02.ExecutionState);
	OutputDataInt(0, 156, TmpWriteIndex, Context.Map.Sparks_02.ExecutionStateSource);
	OutputDataBool(0, 157, TmpWriteIndex, Context.Map.Sparks_02.LocalSpace);
	OutputDataInt(0, 158, TmpWriteIndex, Context.Map.Sparks_02.LoopCount);
	OutputDataFloat(0, 159, TmpWriteIndex, Context.Map.Sparks_02.LoopedAge);
	OutputDataFloat(0, 160, TmpWriteIndex, Context.Map.Sparks_02.NormalizedLoopAge);
	OutputDataFloat(0, 161, TmpWriteIndex, Context.Map.Sparks_02.Scalability.DistanceFraction);
	OutputDataInt(0, 162, TmpWriteIndex, Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 163, TmpWriteIndex, Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 164, TmpWriteIndex, Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 165, TmpWriteIndex, Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 166, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 167, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 168, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 169, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 170, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 171, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 172, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 173, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
