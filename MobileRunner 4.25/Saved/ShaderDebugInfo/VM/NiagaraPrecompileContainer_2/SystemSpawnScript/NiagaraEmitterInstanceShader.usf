#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Lightning_03_RandomVector_VectorScale;
	float3 Constants_Lightning_03_RandomVector_ConstraintVector;
	int Constants_Lightning_03_RandomVector_RandomSeed;
	float Constants_Lightning_03_UniformRangedFloat_Maximum;
	int Constants_Lightning_03_UniformRangedFloat_RandomSeed;
	int Constants_Lightning_03_UniformRangedFloat002_RandomSeed;
	float Constants_Lightning_02_RandomVector_VectorScale;
	float3 Constants_Lightning_02_RandomVector_ConstraintVector;
	int Constants_Lightning_02_RandomVector_RandomSeed;
	float Constants_Lightning_02_UniformRangedFloat_Maximum;
	int Constants_Lightning_02_UniformRangedFloat_RandomSeed;
	int Constants_Lightning_02_UniformRangedFloat002_RandomSeed;
	float Constants_Lightning_01_RandomVector_VectorScale;
	float3 Constants_Lightning_01_RandomVector_ConstraintVector;
	int Constants_Lightning_01_RandomVector_RandomSeed;
	float Constants_Lightning_01_UniformRangedFloat_Maximum;
	int Constants_Lightning_01_UniformRangedFloat_RandomSeed;
	int Constants_Lightning_01_UniformRangedFloat002_RandomSeed;
	int Emitter_RandomSeed;
}

struct FParamMap0_VectorFromFloat002
{
	float Value;
};

struct FParamMap0_VectorFromFloat001
{
	float Value;
};

struct FParamMap0_VectorFromFloat
{
	float Value;
};

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_Vector2DFromCurve
{
	float CurveIndex;
	float2 ScaleCurve;
};

struct FParamMap0_User_Lightning_03
{
	int RandomSeed;
};

struct FParamMap0_User
{
	bool ArcDeclining;
	bool ArcReverse;
	float BeamCurveMinFactor;
	float4 Color;
	float ColorBoost;
	float CurvePower;
	float3 End;
	float3 End2;
	FParamMap0_User_Lightning_03 Lightning_03;
	float MaxLifeTime;
	float MinLifeTime;
	float Power;
	float Quantity;
	float RibbonWidth;
	float Size;
};

struct FParamMap0_UpdateAge
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_UniformRangedInt
{
	bool FixedRandomSeed;
	int Maximum;
	int Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat002
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float CollisionDistanceToCollision;
	float CollisionFriction;
	bool CollisionIsResting;
	float3 CollisionNormal;
	float3 CollisionParticleRelativeCollisionLocation;
	float3 CollisionParticleWorldPosition;
	float CollisionRestitution;
	float CollisionSize;
	bool CollisionValid;
	float3 CollisionVelocity;
	float3 CollisionWorldPosition;
	float3 MeshScaleFactor;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	bool SpawningbCanEverSpawn;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_Subtract_Vector003
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Vector002
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Vector001
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0_SpriteSizeScaleBySpeed
{
	float2 InitialSpriteSize;
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	bool SampleScaleFactorByCurve;
	float3 SourceVelocity;
	float VelocityThreshold;
};

struct FParamMap0_SphereLocation
{
	int CoordinateSpace;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	bool HemisphereZ;
	float3 NonUniformScale;
	bool NormalizeThickness;
	float3 Offset;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	float3 SphereOrigin;
	float SphereRadius;
	int SurfaceExpansionMode;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnRate;
};

struct FParamMap0_SpawnBurst_Instantaneous
{
	float Age;
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_SpawnBeam
{
	float SplinePositionErrorThreshold;
};

struct FParamMap0_Sparks_02_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Sparks_02_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Sparks_02
{
	float Age;
	float AlphaScale;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Sparks_02_Scalability Scalability;
	FParamMap0_Sparks_02_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_Sparks_01_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Sparks_01_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Sparks_01
{
	float Age;
	float AlphaScale;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Sparks_01_Scalability Scalability;
	FParamMap0_Sparks_01_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_SetVariables_EFC671304423FD02F8C7FBA80A98EB9F_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_EFC671304423FD02F8C7FBA80A98EB9F
{
	FParamMap0_SetVariables_EFC671304423FD02F8C7FBA80A98EB9F_Particles Particles;
};

struct FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_03
{
	float BeamCurve2;
	float3 RandomVector;
};

struct FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_02
{
	float BeamCurve2;
	float3 RandomVector;
};

struct FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_01
{
	float BeamCurve2;
	float3 RandomVector;
};

struct FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F
{
	FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_01 Lightning_01;
	FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_02 Lightning_02;
	FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_03 Lightning_03;
};

struct FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22
{
	FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Particles Particles;
};

struct FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_03
{
	float LifeTime;
};

struct FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_02
{
	float LifeTime;
};

struct FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_01
{
	float LifeTime;
};

struct FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08
{
	FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_01 Lightning_01;
	FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_02 Lightning_02;
	FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_03 Lightning_03;
};

struct FParamMap0_SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7_Lightning_01
{
	int Complexity;
};

struct FParamMap0_SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7
{
	FParamMap0_SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7_Lightning_01 Lightning_01;
};

struct FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA
{
	FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA_Particles Particles;
};

struct FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Particles
{
	float3 RandomMovement;
};

struct FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7
{
	FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Particles Particles;
};

struct FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_03
{
	int Complexity;
};

struct FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_02
{
	int Complexity;
};

struct FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A
{
	FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_02 Lightning_02;
	FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A_Lightning_03 Lightning_03;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_RibbonWidthScale
{
	float RibbonWidthScale;
};

struct FParamMap0_RandomVector002
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector001
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float RibbonWidth;
	float3 Scale;
	float2 SpriteSize;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse001
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision
{
	FParamMap0_Particles_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Particles_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
};

struct FParamMap0_Particles
{
	float Age;
	float3 BeamSplineBinormal;
	float3 BeamSplineNormal;
	float3 BeamSplineTangent;
	FParamMap0_Particles_Collision Collision;
	float4 Color;
	float4 DynamicMaterialParameter;
	bool HasCollided;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	int NumberOfCollisions;
	float3 Position;
	float3 PreviousVelocity;
	float3 RandomMovement;
	float RestCounter;
	NiagaraID RibbonID;
	float RibbonLinkOrder;
	float RibbonTwist;
	float RibbonWidth;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_UpdateAge
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_SphereLocation
{
	float3 SphereNormal;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision
{
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool CollisionValid;
	float3 ModuleCollision1Normal;
	bool ModuleCollision1Valid;
	float3 ModuleCollision2Normal;
	bool ModuleCollision2Valid;
	float3 ModuleCombinedCollisionNormal;
	float3 TempPreviousForce;
	float3 TempPreviousPosition;
	float3 TempPreviousVelocity;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_Collision Collision;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SphereLocation SphereLocation;
	FParamMap0_OUTPUT_VAR_UpdateAge UpdateAge;
};

struct FParamMap0_NormalizeVector
{
	float3 VectorToNormalize;
};

struct FParamMap0_NormalizedAngleToDegrees001
{
	float NormalizedAngle;
};

struct FParamMap0_NMS_BeamComplexity
{
	float3 EndLocation;
	float3 StartLocation;
};

struct FParamMap0_Multiply_VectorByFloat005
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat004
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat003
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat002
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat001
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_Float004
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float003
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float002
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float001
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float
{
	float A;
	float B;
};

struct FParamMap0_MeshSizeScale
{
	float3 InitialMeshScale;
	float3 ScaleFactor;
};

struct FParamMap0_MakeIntFromFloat
{
	float FLOAT_VAR;
};

struct FParamMap0_MakeFloatFromInt
{
	int INT_VAR;
};

struct FParamMap0_MakeCustomVectorFromBool002
{
	bool BOOL_VAR;
	float3 FalseVector;
	float3 TrueVector;
};

struct FParamMap0_MakeCustomVectorFromBool001
{
	bool BOOL_VAR;
	float3 FalseVector;
	float3 TrueVector;
};

struct FParamMap0_MakeCustomVectorFromBool
{
	bool BOOL_VAR;
	float3 FalseVector;
	float3 TrueVector;
};

struct FParamMap0_MakeCustomFloatFromBool001
{
	bool BOOL_VAR;
	float FalseFloat;
	float TrueFloat;
};

struct FParamMap0_MakeCustomFloatFromBool
{
	bool BOOL_VAR;
	float FalseFloat;
	float TrueFloat;
};

struct FParamMap0_Local_SpriteSizeScaleBySpeed
{
	float NormalizedVelocityRange;
};

struct FParamMap0_Local_SphereLocation
{
	float3 SphereVector;
};

struct FParamMap0_Local_SpawnRate
{
	float InterpStartDT;
	float IntervalDT;
	int SpawnCount;
	float SpawnRate;
};

struct FParamMap0_Local_SpawnBeam
{
	float3 BeamDirection;
	float3 BeamVector;
	float NormalizedExecIndex;
	float StartEndVecLength;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_InitialMeshOrientation
{
	bool Temp;
};

struct FParamMap0_Local_EmitterState001
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse001
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision
{
	FParamMap0_Local_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Local_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	float ModuleParticleRadius;
	bool UpdateMeshRotation;
};

struct FParamMap0_Local_BeamEmitterSetup
{
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
};

struct FParamMap0_Local_AddVelocityInCone
{
	float3 ConeVector;
	float DotBetweenConeVectorAndAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Local_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_Local_Collision Collision;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_EmitterState001 EmitterState001;
	FParamMap0_Local_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SpawnBeam SpawnBeam;
	FParamMap0_Local_SpawnRate SpawnRate;
	FParamMap0_Local_SphereLocation SphereLocation;
	FParamMap0_Local_SpriteSizeScaleBySpeed SpriteSizeScaleBySpeed;
};

struct FParamMap0_Lightning_03_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Lightning_03_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Lightning_03
{
	float Age;
	float BeamCurve2;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	int Complexity;
	float CurrentLoopDuration;
	int DustParticlesQuantity;
	int ExecutionState;
	int ExecutionStateSource;
	float LifeTime;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	float3 RandomVector;
	FParamMap0_Lightning_03_Scalability Scalability;
	FParamMap0_Lightning_03_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_Lightning_02_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Lightning_02_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Lightning_02
{
	float Age;
	float BeamCurve2;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	int Complexity;
	float CurrentLoopDuration;
	int DustParticlesQuantity;
	int ExecutionState;
	int ExecutionStateSource;
	float LifeTime;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	float3 RandomVector;
	FParamMap0_Lightning_02_Scalability Scalability;
	FParamMap0_Lightning_02_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_Lightning_01_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Lightning_01_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Lightning_01
{
	float Age;
	float BeamCurve2;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	int Complexity;
	float CurrentLoopDuration;
	int DustParticlesQuantity;
	int ExecutionState;
	int ExecutionStateSource;
	float LifeTime;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	float3 RandomVector;
	FParamMap0_Lightning_01_Scalability Scalability;
	FParamMap0_Lightning_01_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_InitialMeshOrientation
{
	float3 OrientationAxis;
	int OrientationCoordinateSpace;
	float3 OrientationVector;
	float3 Rotation;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_Ground_Lightning_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_Ground_Lightning_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Ground_Lightning
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Ground_Lightning_Scalability Scalability;
	FParamMap0_Ground_Lightning_SpawnRate SpawnRate;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve008
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve007
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve006
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve005
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve004
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve003
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	int TickCount;
};

struct FParamMap0_Engine_Sparks_02
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Sparks_01
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Owner
{
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float3 SystemXAxis;
};

struct FParamMap0_Engine_Lightning_03
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Lightning_02
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Lightning_01
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Ground_Lightning
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	FParamMap0_Engine_Ground_Lightning Ground_Lightning;
	float InverseDeltaTime;
	FParamMap0_Engine_Lightning_01 Lightning_01;
	FParamMap0_Engine_Lightning_02 Lightning_02;
	FParamMap0_Engine_Lightning_03 Lightning_03;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_Sparks_01 Sparks_01;
	FParamMap0_Engine_Sparks_02 Sparks_02;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_EmitterState001
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_DynamicMaterialParameters
{
	float Index0Param1;
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
	bool Param0WriteEnabled;
	bool Param1WriteEnabled;
	bool Param2WriteEnabled;
	bool Param3WriteEnabled;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_Divide_Float
{
	float A;
	float B;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CrossProduct001
{
	bool NormalizeIncomingVectors;
	float3 VectorA;
	float3 VectorB;
};

struct FParamMap0_CrossProduct
{
	bool NormalizeIncomingVectors;
	float3 VectorA;
	float3 VectorB;
};

struct FParamMap0_Constants_Lightning_03_UniformRangedFloat002
{
	int RandomSeed;
};

struct FParamMap0_Constants_Lightning_03_UniformRangedFloat
{
	float Maximum;
	int RandomSeed;
};

struct FParamMap0_Constants_Lightning_03_RandomVector
{
	float3 ConstraintVector;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Constants_Lightning_03
{
	FParamMap0_Constants_Lightning_03_RandomVector RandomVector;
	FParamMap0_Constants_Lightning_03_UniformRangedFloat UniformRangedFloat;
	FParamMap0_Constants_Lightning_03_UniformRangedFloat002 UniformRangedFloat002;
};

struct FParamMap0_Constants_Lightning_02_UniformRangedFloat002
{
	int RandomSeed;
};

struct FParamMap0_Constants_Lightning_02_UniformRangedFloat
{
	float Maximum;
	int RandomSeed;
};

struct FParamMap0_Constants_Lightning_02_RandomVector
{
	float3 ConstraintVector;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Constants_Lightning_02
{
	FParamMap0_Constants_Lightning_02_RandomVector RandomVector;
	FParamMap0_Constants_Lightning_02_UniformRangedFloat UniformRangedFloat;
	FParamMap0_Constants_Lightning_02_UniformRangedFloat002 UniformRangedFloat002;
};

struct FParamMap0_Constants_Lightning_01_UniformRangedFloat002
{
	int RandomSeed;
};

struct FParamMap0_Constants_Lightning_01_UniformRangedFloat
{
	float Maximum;
	int RandomSeed;
};

struct FParamMap0_Constants_Lightning_01_RandomVector
{
	float3 ConstraintVector;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Constants_Lightning_01
{
	FParamMap0_Constants_Lightning_01_RandomVector RandomVector;
	FParamMap0_Constants_Lightning_01_UniformRangedFloat UniformRangedFloat;
	FParamMap0_Constants_Lightning_01_UniformRangedFloat002 UniformRangedFloat002;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Lightning_01 Lightning_01;
	FParamMap0_Constants_Lightning_02 Lightning_02;
	FParamMap0_Constants_Lightning_03 Lightning_03;
};

struct FParamMap0_ColorFromCurve
{
	float CurveIndex;
};

struct FParamMap0_Color
{
	float4 Color;
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_Collision_CollisionQueryAndResponse001
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision_CollisionQueryAndResponse
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision
{
	float AdvancedAgingRate;
	bool CollisionEnabled;
	FParamMap0_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool ControlRestStateViaSurfaceNormal;
	bool CorrectInterpenetration;
	float CPUTraceVectorLengthMultiplier;
	bool EnableRestState;
	float Friction;
	float FrictionDuringaBounce;
	float MaxCPUTraceLength;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	bool RandomizeCollisionNormalVector;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_BeamWidth
{
	float BeamTwistAmount;
	float BeamWidth;
};

struct FParamMap0_BeamEmitterSetup
{
	bool AbsoluteEndTangent;
	bool AbsoluteStartTangent;
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float3 BeamStartTangent;
	bool UseBeamTangents;
};

struct FParamMap0_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	int ConeAxisCoordinateSpace;
	bool UseVelocityFalloffOnConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
	float VelocityStrength;
};

struct FParamMap0_Add_Vector005
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector003
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector002
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector001
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Float
{
	float A;
	float B;
};

struct FParamMap0
{
	FParamMap0_Add_Float Add_Float;
	FParamMap0_Add_Vector Add_Vector;
	FParamMap0_Add_Vector001 Add_Vector001;
	FParamMap0_Add_Vector002 Add_Vector002;
	FParamMap0_Add_Vector003 Add_Vector003;
	FParamMap0_Add_Vector005 Add_Vector005;
	FParamMap0_AddVelocityInCone AddVelocityInCone;
	FParamMap0_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_BeamWidth BeamWidth;
	FParamMap0_Collision Collision;
	FParamMap0_Color Color;
	FParamMap0_ColorFromCurve ColorFromCurve;
	FParamMap0_Constants Constants;
	FParamMap0_CrossProduct CrossProduct;
	FParamMap0_CrossProduct001 CrossProduct001;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Divide_Float Divide_Float;
	FParamMap0_Drag Drag;
	FParamMap0_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_EmitterState001 EmitterState001;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_FloatFromCurve003 FloatFromCurve003;
	FParamMap0_FloatFromCurve004 FloatFromCurve004;
	FParamMap0_FloatFromCurve005 FloatFromCurve005;
	FParamMap0_FloatFromCurve006 FloatFromCurve006;
	FParamMap0_FloatFromCurve007 FloatFromCurve007;
	FParamMap0_FloatFromCurve008 FloatFromCurve008;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_Ground_Lightning Ground_Lightning;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Lightning_01 Lightning_01;
	FParamMap0_Lightning_02 Lightning_02;
	FParamMap0_Lightning_03 Lightning_03;
	FParamMap0_Local Local;
	FParamMap0_MakeCustomFloatFromBool MakeCustomFloatFromBool;
	FParamMap0_MakeCustomFloatFromBool001 MakeCustomFloatFromBool001;
	FParamMap0_MakeCustomVectorFromBool MakeCustomVectorFromBool;
	FParamMap0_MakeCustomVectorFromBool001 MakeCustomVectorFromBool001;
	FParamMap0_MakeCustomVectorFromBool002 MakeCustomVectorFromBool002;
	FParamMap0_MakeFloatFromInt MakeFloatFromInt;
	FParamMap0_MakeIntFromFloat MakeIntFromFloat;
	FParamMap0_MeshSizeScale MeshSizeScale;
	FParamMap0_Multiply_Float Multiply_Float;
	FParamMap0_Multiply_Float001 Multiply_Float001;
	FParamMap0_Multiply_Float002 Multiply_Float002;
	FParamMap0_Multiply_Float003 Multiply_Float003;
	FParamMap0_Multiply_Float004 Multiply_Float004;
	FParamMap0_Multiply_VectorByFloat Multiply_VectorByFloat;
	FParamMap0_Multiply_VectorByFloat001 Multiply_VectorByFloat001;
	FParamMap0_Multiply_VectorByFloat002 Multiply_VectorByFloat002;
	FParamMap0_Multiply_VectorByFloat003 Multiply_VectorByFloat003;
	FParamMap0_Multiply_VectorByFloat004 Multiply_VectorByFloat004;
	FParamMap0_Multiply_VectorByFloat005 Multiply_VectorByFloat005;
	FParamMap0_NMS_BeamComplexity NMS_BeamComplexity;
	FParamMap0_NormalizedAngleToDegrees001 NormalizedAngleToDegrees001;
	FParamMap0_NormalizeVector NormalizeVector;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_RandomVector RandomVector;
	FParamMap0_RandomVector001 RandomVector001;
	FParamMap0_RandomVector002 RandomVector002;
	FParamMap0_RibbonWidthScale RibbonWidthScale;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SetVariables_12051185420E7D3D5817F28DD2F3D62A SetVariables_12051185420E7D3D5817F28DD2F3D62A;
	FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7 SetVariables_37EFE94048FF0092BAD12B9767DEC3B7;
	FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA SetVariables_39F275A84050437F282DE79201AD7DEA;
	FParamMap0_SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7 SetVariables_6A2D57DC445B0858F49C5E9C69F38DC7;
	FParamMap0_SetVariables_7B66B97741ECF3EC033ECC9678557D08 SetVariables_7B66B97741ECF3EC033ECC9678557D08;
	FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22 SetVariables_B8B0EADE49895CE1E100F6AAB756CA22;
	FParamMap0_SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F;
	FParamMap0_SetVariables_EFC671304423FD02F8C7FBA80A98EB9F SetVariables_EFC671304423FD02F8C7FBA80A98EB9F;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Sparks_01 Sparks_01;
	FParamMap0_Sparks_02 Sparks_02;
	FParamMap0_SpawnBeam SpawnBeam;
	FParamMap0_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_SpawnRate SpawnRate;
	FParamMap0_SphereLocation SphereLocation;
	FParamMap0_SpriteSizeScaleBySpeed SpriteSizeScaleBySpeed;
	FParamMap0_Subtract_Vector Subtract_Vector;
	FParamMap0_Subtract_Vector001 Subtract_Vector001;
	FParamMap0_Subtract_Vector002 Subtract_Vector002;
	FParamMap0_Subtract_Vector003 Subtract_Vector003;
	FParamMap0_System System;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_UniformRangedInt UniformRangedInt;
	FParamMap0_UpdateAge UpdateAge;
	FParamMap0_User User;
	FParamMap0_Vector2DFromCurve Vector2DFromCurve;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
	FParamMap0_VectorFromFloat VectorFromFloat;
	FParamMap0_VectorFromFloat001 VectorFromFloat001;
	FParamMap0_VectorFromFloat002 VectorFromFloat002;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void Sparks_02_Func_(inout FSimulationContext Context);
void Ground_Lightning_Func_(inout FSimulationContext Context);
void Sparks_01_Func_(inout FSimulationContext Context);
void SimulationPosition001_Lightning_03_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void RandomVector_NF_TransformVector_Lightning_03_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector_Lightning_03_Func_(out float3 Out_RandomVector, inout FSimulationContext Context);
void Subtract_Vector_Lightning_03_Func_(out float3 Out_Result, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat_Lightning_03_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void CrossProduct_Lightning_03_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context);
void SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_03_Func_(inout FSimulationContext Context);
void UniformRangedFloat002_Lightning_03_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_03_Func_(inout FSimulationContext Context);
void Lightning_03_Func_(inout FSimulationContext Context);
void SimulationPosition001_Lightning_02_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void RandomVector_NF_TransformVector_Lightning_02_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomVector_Lightning_02_Func_(out float3 Out_RandomVector, inout FSimulationContext Context);
void Subtract_Vector_Lightning_02_Func_(out float3 Out_Result, inout FSimulationContext Context);
void UniformRangedFloat_Lightning_02_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void CrossProduct_Lightning_02_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context);
void SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_02_Func_(inout FSimulationContext Context);
void UniformRangedFloat002_Lightning_02_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_02_Func_(inout FSimulationContext Context);
void Lightning_02_Func_(inout FSimulationContext Context);
void SimulationPosition001_Lightning_01_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void RandomVector_NF_TransformVector_Lightning_01_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomVector_Lightning_01_Func_(out float3 Out_RandomVector, inout FSimulationContext Context);
void Subtract_Vector_Lightning_01_Func_(out float3 Out_Result, inout FSimulationContext Context);
void UniformRangedFloat_Lightning_01_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void CrossProduct_Lightning_01_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context);
void SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_01_Func_(inout FSimulationContext Context);
void UniformRangedFloat002_Lightning_01_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_01_Func_(inout FSimulationContext Context);
void Lightning_01_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void Sparks_02_Func_(inout FSimulationContext Context)
{

}

void Ground_Lightning_Func_(inout FSimulationContext Context)
{

}

void Sparks_01_Func_(inout FSimulationContext Context)
{

}

void SimulationPosition001_Lightning_03_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant115 = false;
	float3 Constant116 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant115)
	{
	Vector_IfResult = Constant116;
	}
	else
	{
	Vector_IfResult = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant124 = 0;
	bool Result = NiagaraAll(In_SourceSpace == Constant124);
	int Constant125 = 0;
	bool Result1 = NiagaraAll(In_DestinationSpace == Constant125);
	bool Result2 = Result && Result1;
	int Constant126 = 1;
	bool Result3 = NiagaraAll(In_SourceSpace == Constant126);
	int Constant127 = 1;
	bool Result4 = NiagaraAll(In_DestinationSpace == Constant127);
	bool Result5 = Result3 && Result4;
	bool Result6 = Result2 || Result5;
	int Constant128 = 2;
	bool Result7 = NiagaraAll(In_SourceSpace == Constant128);
	int Constant129 = 2;
	bool Result8 = NiagaraAll(In_DestinationSpace == Constant129);
	bool Result9 = Result7 && Result8;
	bool Result10 = Result6 || Result9;
	bool Result11 = Result && Result8;
	bool Result12 = Result7 && Result1;
	bool Result13 = Result11 || Result12;
	bool Result14 = In_bLocalSpace && Result13;
	bool Result15 = Result10 || Result14;
	bool Result16 = !In_bLocalSpace;
	bool Result17 = Result && Result4;
	bool Result18 = Result3 && Result1;
	bool Result19 = Result17 || Result18;
	bool Result20 = Result16 && Result19;
	bool Result21 = Result15 || Result20;
	bool Result22 = In_bLocalSpace && Result17;
	bool Result23 = Result7 && Result4;
	bool Result24 = Result22 || Result23;
	bool Result25 = Result16 && Result12;
	bool Result26 = Result24 || Result25;
	float4x4 Matrix_IfResult1;
	if(Result26)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result21;
	Out_OutTransform = Matrix_IfResult1;
}

void RandomVector_NF_TransformVector_Lightning_03_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant123 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant123, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result27 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult1;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult1 = In_InVector;
	}
	else
	{
	Vector_IfResult1 = Result27;
	}
	Out_OutVector = Vector_IfResult1;
}

void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant140 = false;
	int Constant141 = 0;
	bool Result28 = NiagaraAll(In_RandomnessMode == Constant141);
	bool Result29 = Constant140 && Result28;
	int Constant142 = 1;
	bool Result30 = NiagaraAll(In_RandomnessMode == Constant142);
	bool Result31 = Result29 || Result30;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.User.Lightning_03.RandomSeed;
	}
	int Constant143 = 0;
	int Constant144 = 0;
	int Constant145 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant143;
	Seed3_IfResult = Constant144;
	}
	else
	{
	Seed1_IfResult = Constant145;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant146 = -1;
	int Constant147 = -1;
	int Constant148 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result31)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant146;
	Seed2_IfResult1 = Constant147;
	Seed3_IfResult1 = Constant148;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result31;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant136 = (0);
	bool Constant137 = false;
	int Constant138 = 0;
	int Constant139 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant136, In_OverrideSeed, Constant138, Constant139, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms, Context);
	float2 Result32 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed3;
	float2 Result33 = rand_float(Result32, Seed1, Seed2, Seed3);
	float2 Result34 = rand_float(Result32);
	float2 Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result33;
	}
	else
	{
	Random_IfResult = Result34;
	}
	float2 Result35 = In_Min + Random_IfResult;
	Out_Result = Result35;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant154 = (0);
	bool Constant155 = false;
	int Constant156 = 0;
	int Constant157 = (0);
	bool Constant158 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant154, In_OverrideSeed, Constant156, Constant157, Constant158, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms1, Context);
	float Result43 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1.Seed3;
	float Result44 = rand_float(Result43, Seed11, Seed21, Seed31);
	float Result45 = rand_float(Result43);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result44;
	}
	else
	{
	Random_IfResult1 = Result45;
	}
	float Result46 = In_Min + Random_IfResult1;
	Out_Result = Result46;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant134 = float2(0,-1);
	float2 Constant135 = float2(6.28319,1);
	float2 RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant134, Constant135, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = RandomRangeFloat_Func_Output_Result.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result.y;
	float Result36 = cos(Phi);
	float Result37 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result38 = 1 - Result37;
	float Result39 = sqrt(Result38);
	float Result40 = Result36 * Result39;
	float Result41 = sin(Phi);
	float Result42 = Result41 * Result39;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result40;
	PositionOnSphere.y = Result42;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant149 = 0;
	float Constant150 = 6.28319;
	int Constant151 = -1;
	int Constant152 = 0;
	bool Constant153 = false;
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Constant149, Constant150, Constant151, Constant152, Constant153, RandomRangeFloat_Func_Output_Result1, Context);
	float Result47 = cos(RandomRangeFloat_Func_Output_Result1);
	float Result48 = sin(RandomRangeFloat_Func_Output_Result1);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result47;
	PositionOnCircle.y = Result48;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomVector_Lightning_03_Func_(out float3 Out_RandomVector, inout FSimulationContext Context)
{
	bool Constant119 = false;
	Context.Map.RandomVector.ConstraintoAxis = Constant119;
	int Constant120 = 2;
	int Constant121 = 0;
	bool Constant122 = false;
	float3 RandomVector_NF_TransformVector_Lightning_03_Func_Output_OutVector;
	RandomVector_NF_TransformVector_Lightning_03_Func_(Context.Map.Constants.Lightning_03.RandomVector.ConstraintVector, Constant120, Constant121, Constant122, RandomVector_NF_TransformVector_Lightning_03_Func_Output_OutVector, Context);
	bool Constant130 = false;
	Context.Map.RandomVector.OverrideSeed = Constant130;
	bool Constant131 = false;
	Context.Map.RandomVector.FixedRandomSeed = Constant131;
	int Constant132 = 0;
	bool Constant133 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.Map.RandomVector.OverrideRandomness)
	{
	Mode_IfResult = Context.Map.RandomVector.RandomnessMode;
	Override_IfResult = Context.Map.RandomVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant132;
	Override_IfResult = Constant133;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(Context.Map.Constants.Lightning_03.RandomVector.RandomSeed, Mode_IfResult, Override_IfResult, Context.Map.RandomVector.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	float Result49 = dot(RandomVector_NF_TransformVector_Lightning_03_Func_Output_OutVector,RandomUnitVector_Func_Output_UnitVector3D);
	float Result50 = sign(Result49);
	float3 Result51 = Result50 * RandomUnitVector_Func_Output_UnitVector3D;
	float3 Vector_IfResult2;
	if(Context.Map.RandomVector.ConstraintoAxis)
	{
	Vector_IfResult2 = Result51;
	}
	else
	{
	Vector_IfResult2 = RandomUnitVector_Func_Output_UnitVector3D;
	}
	float3 Result52 = Context.Map.Constants.Lightning_03.RandomVector.VectorScale * Vector_IfResult2;
	Out_RandomVector = Result52;
}

void Subtract_Vector_Lightning_03_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result53 = Context.Map.Subtract_Vector.A - Context.Map.Subtract_Vector.B;
	Out_Result = Result53;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant163 = (0);
	bool Constant164 = false;
	int Constant165 = 0;
	int Constant166 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant163, In_OverrideSeed, Constant165, Constant166, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms2, Context);
	float Result54 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2.Seed3;
	float Result55 = rand_float(Result54, Seed12, Seed22, Seed32);
	float Result56 = rand_float(Result54);
	float Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result55;
	}
	else
	{
	Random_IfResult2 = Result56;
	}
	float Result57 = In_Min + Random_IfResult2;
	Out_Result = Result57;
}

void UniformRangedFloat_Lightning_03_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	bool Constant159 = false;
	Context.Map.UniformRangedFloat.OverrideSeed = Constant159;
	bool Constant160 = false;
	Context.Map.UniformRangedFloat.FixedRandomSeed = Constant160;
	int Constant161 = 0;
	bool Constant162 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.Map.UniformRangedFloat.OverrideRandomness)
	{
	Mode_IfResult1 = Context.Map.UniformRangedFloat.RandomnessMode;
	Override_IfResult1 = Context.Map.UniformRangedFloat.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant161;
	Override_IfResult1 = Constant162;
	}
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Context.Map.UniformRangedFloat.Minimum, Context.Map.Constants.Lightning_03.UniformRangedFloat.Maximum, Context.Map.Constants.Lightning_03.UniformRangedFloat.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.Map.UniformRangedFloat.FixedRandomSeed, RandomRangeFloat_Func_Output_Result2, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result2;
}

void CrossProduct_Lightning_03_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context)
{
	bool Constant167 = true;
	Context.Map.CrossProduct.NormalizeIncomingVectors = Constant167;
	float3 Result58 = normalize(Context.Map.CrossProduct.VectorA);
	float3 Result59 = normalize(Context.Map.CrossProduct.VectorB);
	float3 VectorA_IfResult;
	float3 VectorB_IfResult;
	if(Context.Map.CrossProduct.NormalizeIncomingVectors)
	{
	VectorA_IfResult = Result58;
	VectorB_IfResult = Result59;
	}
	else
	{
	VectorA_IfResult = Context.Map.CrossProduct.VectorA;
	VectorB_IfResult = Context.Map.CrossProduct.VectorB;
	}
	float3 Result60 = cross(VectorA_IfResult,VectorB_IfResult);
	Out_CrossedVector = Result60;
}

void SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_03_Func_(inout FSimulationContext Context)
{
	Context.Map.Lightning_03.BeamCurve2 = Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_03.BeamCurve2;
	Context.Map.Lightning_03.RandomVector = Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_03.RandomVector;
}

void UniformRangedFloat002_Lightning_03_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	bool Constant168 = false;
	Context.Map.UniformRangedFloat002.OverrideRandomness = Constant168;
	int Constant169 = 0;
	Context.Map.UniformRangedFloat002.RandomnessMode = Constant169;
	bool Constant170 = false;
	Context.Map.UniformRangedFloat002.OverrideSeed = Constant170;
	bool Constant171 = false;
	Context.Map.UniformRangedFloat002.FixedRandomSeed = Constant171;
	int Constant172 = 0;
	bool Constant173 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.Map.UniformRangedFloat002.OverrideRandomness)
	{
	Mode_IfResult2 = Context.Map.UniformRangedFloat002.RandomnessMode;
	Override_IfResult2 = Context.Map.UniformRangedFloat002.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant172;
	Override_IfResult2 = Constant173;
	}
	float RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Context.Map.UniformRangedFloat002.Minimum, Context.Map.UniformRangedFloat002.Maximum, Context.Map.Constants.Lightning_03.UniformRangedFloat002.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.Map.UniformRangedFloat002.FixedRandomSeed, RandomRangeFloat_Func_Output_Result3, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result3;
}

void SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_03_Func_(inout FSimulationContext Context)
{
	Context.Map.Lightning_03.LifeTime = Context.Map.SetVariables_7B66B97741ECF3EC033ECC9678557D08.Lightning_03.LifeTime;
}

void Lightning_03_Func_(inout FSimulationContext Context)
{
	bool Constant113 = false;
	int Constant114 = 2;
	float3 SimulationPosition001_Lightning_03_Func_Output_SimulationPosition;
	SimulationPosition001_Lightning_03_Func_(SimulationPosition001_Lightning_03_Func_Output_SimulationPosition, Context);
	Context.Map.RandomVector.OverrideRandomness = Constant113;
	Context.Map.RandomVector.RandomnessMode = Constant114;
	Context.Map.Subtract_Vector.A = Context.Map.User.End2;
	Context.Map.Subtract_Vector.B = SimulationPosition001_Lightning_03_Func_Output_SimulationPosition;
	bool Constant117 = false;
	int Constant118 = 2;
	float3 RandomVector_Lightning_03_Func_Output_RandomVector;
	RandomVector_Lightning_03_Func_(RandomVector_Lightning_03_Func_Output_RandomVector, Context);
	float3 Subtract_Vector_Lightning_03_Func_Output_Result;
	Subtract_Vector_Lightning_03_Func_(Subtract_Vector_Lightning_03_Func_Output_Result, Context);
	Context.Map.UniformRangedFloat.Minimum = Context.Map.User.BeamCurveMinFactor;
	Context.Map.UniformRangedFloat.OverrideRandomness = Constant117;
	Context.Map.UniformRangedFloat.RandomnessMode = Constant118;
	Context.Map.CrossProduct.VectorB = RandomVector_Lightning_03_Func_Output_RandomVector;
	Context.Map.CrossProduct.VectorA = Subtract_Vector_Lightning_03_Func_Output_Result;
	float UniformRangedFloat_Lightning_03_Func_Output_UniformRangedFloat;
	UniformRangedFloat_Lightning_03_Func_(UniformRangedFloat_Lightning_03_Func_Output_UniformRangedFloat, Context);
	float3 CrossProduct_Lightning_03_Func_Output_CrossedVector;
	CrossProduct_Lightning_03_Func_(CrossProduct_Lightning_03_Func_Output_CrossedVector, Context);
	Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_03.BeamCurve2 = UniformRangedFloat_Lightning_03_Func_Output_UniformRangedFloat;
	Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_03.RandomVector = CrossProduct_Lightning_03_Func_Output_CrossedVector;
	EnterStatScope(5 );
	SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_03_Func_(Context);
	ExitStatScope( );
	Context.Map.UniformRangedFloat002.Minimum = Context.Map.User.MinLifeTime;
	Context.Map.UniformRangedFloat002.Maximum = Context.Map.User.MaxLifeTime;
	float UniformRangedFloat002_Lightning_03_Func_Output_UniformRangedFloat;
	UniformRangedFloat002_Lightning_03_Func_(UniformRangedFloat002_Lightning_03_Func_Output_UniformRangedFloat, Context);
	Context.Map.SetVariables_7B66B97741ECF3EC033ECC9678557D08.Lightning_03.LifeTime = UniformRangedFloat002_Lightning_03_Func_Output_UniformRangedFloat;
	EnterStatScope(6 );
	SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_03_Func_(Context);
	ExitStatScope( );
}

void SimulationPosition001_Lightning_02_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant176 = false;
	float3 Constant177 = float3(0,0,0);
	float3 Vector_IfResult3;
	if(Constant176)
	{
	Vector_IfResult3 = Constant177;
	}
	else
	{
	Vector_IfResult3 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult3;
}

void RandomVector_NF_TransformVector_Lightning_02_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant184 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant184, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result61 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult4;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult4 = In_InVector;
	}
	else
	{
	Vector_IfResult4 = Result61;
	}
	Out_OutVector = Vector_IfResult4;
}

void RandomVector_Lightning_02_Func_(out float3 Out_RandomVector, inout FSimulationContext Context)
{
	bool Constant180 = false;
	Context.Map.RandomVector.ConstraintoAxis = Constant180;
	int Constant181 = 2;
	int Constant182 = 0;
	bool Constant183 = false;
	float3 RandomVector_NF_TransformVector_Lightning_02_Func_Output_OutVector;
	RandomVector_NF_TransformVector_Lightning_02_Func_(Context.Map.Constants.Lightning_02.RandomVector.ConstraintVector, Constant181, Constant182, Constant183, RandomVector_NF_TransformVector_Lightning_02_Func_Output_OutVector, Context);
	bool Constant185 = false;
	Context.Map.RandomVector.OverrideSeed = Constant185;
	bool Constant186 = false;
	Context.Map.RandomVector.FixedRandomSeed = Constant186;
	int Constant187 = 0;
	bool Constant188 = false;
	int Mode_IfResult3;
	bool Override_IfResult3;
	if(Context.Map.RandomVector.OverrideRandomness)
	{
	Mode_IfResult3 = Context.Map.RandomVector.RandomnessMode;
	Override_IfResult3 = Context.Map.RandomVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult3 = Constant187;
	Override_IfResult3 = Constant188;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D1;
	float2 RandomUnitVector_Func_Output_UnitVector2D1;
	RandomUnitVector_Func_(Context.Map.Constants.Lightning_02.RandomVector.RandomSeed, Mode_IfResult3, Override_IfResult3, Context.Map.RandomVector.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D1, RandomUnitVector_Func_Output_UnitVector2D1, Context);
	float Result62 = dot(RandomVector_NF_TransformVector_Lightning_02_Func_Output_OutVector,RandomUnitVector_Func_Output_UnitVector3D1);
	float Result63 = sign(Result62);
	float3 Result64 = Result63 * RandomUnitVector_Func_Output_UnitVector3D1;
	float3 Vector_IfResult5;
	if(Context.Map.RandomVector.ConstraintoAxis)
	{
	Vector_IfResult5 = Result64;
	}
	else
	{
	Vector_IfResult5 = RandomUnitVector_Func_Output_UnitVector3D1;
	}
	float3 Result65 = Context.Map.Constants.Lightning_02.RandomVector.VectorScale * Vector_IfResult5;
	Out_RandomVector = Result65;
}

void Subtract_Vector_Lightning_02_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result66 = Context.Map.Subtract_Vector.A - Context.Map.Subtract_Vector.B;
	Out_Result = Result66;
}

void UniformRangedFloat_Lightning_02_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	bool Constant189 = false;
	Context.Map.UniformRangedFloat.OverrideSeed = Constant189;
	bool Constant190 = false;
	Context.Map.UniformRangedFloat.FixedRandomSeed = Constant190;
	int Constant191 = 0;
	bool Constant192 = false;
	int Mode_IfResult4;
	bool Override_IfResult4;
	if(Context.Map.UniformRangedFloat.OverrideRandomness)
	{
	Mode_IfResult4 = Context.Map.UniformRangedFloat.RandomnessMode;
	Override_IfResult4 = Context.Map.UniformRangedFloat.OverrideSeed;
	}
	else
	{
	Mode_IfResult4 = Constant191;
	Override_IfResult4 = Constant192;
	}
	float RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Context.Map.UniformRangedFloat.Minimum, Context.Map.Constants.Lightning_02.UniformRangedFloat.Maximum, Context.Map.Constants.Lightning_02.UniformRangedFloat.RandomSeed, Mode_IfResult4, Override_IfResult4, Context.Map.UniformRangedFloat.FixedRandomSeed, RandomRangeFloat_Func_Output_Result4, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result4;
}

void CrossProduct_Lightning_02_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context)
{
	bool Constant193 = true;
	Context.Map.CrossProduct.NormalizeIncomingVectors = Constant193;
	float3 Result67 = normalize(Context.Map.CrossProduct.VectorA);
	float3 Result68 = normalize(Context.Map.CrossProduct.VectorB);
	float3 VectorA_IfResult1;
	float3 VectorB_IfResult1;
	if(Context.Map.CrossProduct.NormalizeIncomingVectors)
	{
	VectorA_IfResult1 = Result67;
	VectorB_IfResult1 = Result68;
	}
	else
	{
	VectorA_IfResult1 = Context.Map.CrossProduct.VectorA;
	VectorB_IfResult1 = Context.Map.CrossProduct.VectorB;
	}
	float3 Result69 = cross(VectorA_IfResult1,VectorB_IfResult1);
	Out_CrossedVector = Result69;
}

void SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_02_Func_(inout FSimulationContext Context)
{
	Context.Map.Lightning_02.BeamCurve2 = Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_02.BeamCurve2;
	Context.Map.Lightning_02.RandomVector = Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_02.RandomVector;
}

void UniformRangedFloat002_Lightning_02_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	bool Constant194 = false;
	Context.Map.UniformRangedFloat002.OverrideRandomness = Constant194;
	int Constant195 = 0;
	Context.Map.UniformRangedFloat002.RandomnessMode = Constant195;
	bool Constant196 = false;
	Context.Map.UniformRangedFloat002.OverrideSeed = Constant196;
	bool Constant197 = false;
	Context.Map.UniformRangedFloat002.FixedRandomSeed = Constant197;
	int Constant198 = 0;
	bool Constant199 = false;
	int Mode_IfResult5;
	bool Override_IfResult5;
	if(Context.Map.UniformRangedFloat002.OverrideRandomness)
	{
	Mode_IfResult5 = Context.Map.UniformRangedFloat002.RandomnessMode;
	Override_IfResult5 = Context.Map.UniformRangedFloat002.OverrideSeed;
	}
	else
	{
	Mode_IfResult5 = Constant198;
	Override_IfResult5 = Constant199;
	}
	float RandomRangeFloat_Func_Output_Result5;
	RandomRangeFloat_Func_(Context.Map.UniformRangedFloat002.Minimum, Context.Map.UniformRangedFloat002.Maximum, Context.Map.Constants.Lightning_02.UniformRangedFloat002.RandomSeed, Mode_IfResult5, Override_IfResult5, Context.Map.UniformRangedFloat002.FixedRandomSeed, RandomRangeFloat_Func_Output_Result5, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result5;
}

void SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_02_Func_(inout FSimulationContext Context)
{
	Context.Map.Lightning_02.LifeTime = Context.Map.SetVariables_7B66B97741ECF3EC033ECC9678557D08.Lightning_02.LifeTime;
}

void Lightning_02_Func_(inout FSimulationContext Context)
{
	bool Constant174 = false;
	int Constant175 = 2;
	float3 SimulationPosition001_Lightning_02_Func_Output_SimulationPosition;
	SimulationPosition001_Lightning_02_Func_(SimulationPosition001_Lightning_02_Func_Output_SimulationPosition, Context);
	Context.Map.RandomVector.OverrideRandomness = Constant174;
	Context.Map.RandomVector.RandomnessMode = Constant175;
	Context.Map.Subtract_Vector.A = Context.Map.User.End2;
	Context.Map.Subtract_Vector.B = SimulationPosition001_Lightning_02_Func_Output_SimulationPosition;
	bool Constant178 = false;
	int Constant179 = 2;
	float3 RandomVector_Lightning_02_Func_Output_RandomVector;
	RandomVector_Lightning_02_Func_(RandomVector_Lightning_02_Func_Output_RandomVector, Context);
	float3 Subtract_Vector_Lightning_02_Func_Output_Result;
	Subtract_Vector_Lightning_02_Func_(Subtract_Vector_Lightning_02_Func_Output_Result, Context);
	Context.Map.UniformRangedFloat.Minimum = Context.Map.User.BeamCurveMinFactor;
	Context.Map.UniformRangedFloat.OverrideRandomness = Constant178;
	Context.Map.UniformRangedFloat.RandomnessMode = Constant179;
	Context.Map.CrossProduct.VectorB = RandomVector_Lightning_02_Func_Output_RandomVector;
	Context.Map.CrossProduct.VectorA = Subtract_Vector_Lightning_02_Func_Output_Result;
	float UniformRangedFloat_Lightning_02_Func_Output_UniformRangedFloat;
	UniformRangedFloat_Lightning_02_Func_(UniformRangedFloat_Lightning_02_Func_Output_UniformRangedFloat, Context);
	float3 CrossProduct_Lightning_02_Func_Output_CrossedVector;
	CrossProduct_Lightning_02_Func_(CrossProduct_Lightning_02_Func_Output_CrossedVector, Context);
	Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_02.BeamCurve2 = UniformRangedFloat_Lightning_02_Func_Output_UniformRangedFloat;
	Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_02.RandomVector = CrossProduct_Lightning_02_Func_Output_CrossedVector;
	EnterStatScope(8 );
	SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_02_Func_(Context);
	ExitStatScope( );
	Context.Map.UniformRangedFloat002.Minimum = Context.Map.User.MinLifeTime;
	Context.Map.UniformRangedFloat002.Maximum = Context.Map.User.MaxLifeTime;
	float UniformRangedFloat002_Lightning_02_Func_Output_UniformRangedFloat;
	UniformRangedFloat002_Lightning_02_Func_(UniformRangedFloat002_Lightning_02_Func_Output_UniformRangedFloat, Context);
	Context.Map.SetVariables_7B66B97741ECF3EC033ECC9678557D08.Lightning_02.LifeTime = UniformRangedFloat002_Lightning_02_Func_Output_UniformRangedFloat;
	EnterStatScope(9 );
	SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_02_Func_(Context);
	ExitStatScope( );
}

void SimulationPosition001_Lightning_01_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant202 = false;
	float3 Constant203 = float3(0,0,0);
	float3 Vector_IfResult6;
	if(Constant202)
	{
	Vector_IfResult6 = Constant203;
	}
	else
	{
	Vector_IfResult6 = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult6;
}

void RandomVector_NF_TransformVector_Lightning_01_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant210 = false;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant210, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result70 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult7;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult7 = In_InVector;
	}
	else
	{
	Vector_IfResult7 = Result70;
	}
	Out_OutVector = Vector_IfResult7;
}

void RandomVector_Lightning_01_Func_(out float3 Out_RandomVector, inout FSimulationContext Context)
{
	bool Constant206 = false;
	Context.Map.RandomVector.ConstraintoAxis = Constant206;
	int Constant207 = 2;
	int Constant208 = 0;
	bool Constant209 = false;
	float3 RandomVector_NF_TransformVector_Lightning_01_Func_Output_OutVector;
	RandomVector_NF_TransformVector_Lightning_01_Func_(Context.Map.Constants.Lightning_01.RandomVector.ConstraintVector, Constant207, Constant208, Constant209, RandomVector_NF_TransformVector_Lightning_01_Func_Output_OutVector, Context);
	bool Constant211 = false;
	Context.Map.RandomVector.OverrideSeed = Constant211;
	bool Constant212 = false;
	Context.Map.RandomVector.FixedRandomSeed = Constant212;
	int Constant213 = 0;
	bool Constant214 = false;
	int Mode_IfResult6;
	bool Override_IfResult6;
	if(Context.Map.RandomVector.OverrideRandomness)
	{
	Mode_IfResult6 = Context.Map.RandomVector.RandomnessMode;
	Override_IfResult6 = Context.Map.RandomVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult6 = Constant213;
	Override_IfResult6 = Constant214;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D2;
	float2 RandomUnitVector_Func_Output_UnitVector2D2;
	RandomUnitVector_Func_(Context.Map.Constants.Lightning_01.RandomVector.RandomSeed, Mode_IfResult6, Override_IfResult6, Context.Map.RandomVector.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D2, RandomUnitVector_Func_Output_UnitVector2D2, Context);
	float Result71 = dot(RandomVector_NF_TransformVector_Lightning_01_Func_Output_OutVector,RandomUnitVector_Func_Output_UnitVector3D2);
	float Result72 = sign(Result71);
	float3 Result73 = Result72 * RandomUnitVector_Func_Output_UnitVector3D2;
	float3 Vector_IfResult8;
	if(Context.Map.RandomVector.ConstraintoAxis)
	{
	Vector_IfResult8 = Result73;
	}
	else
	{
	Vector_IfResult8 = RandomUnitVector_Func_Output_UnitVector3D2;
	}
	float3 Result74 = Context.Map.Constants.Lightning_01.RandomVector.VectorScale * Vector_IfResult8;
	Out_RandomVector = Result74;
}

void Subtract_Vector_Lightning_01_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result75 = Context.Map.Subtract_Vector.A - Context.Map.Subtract_Vector.B;
	Out_Result = Result75;
}

void UniformRangedFloat_Lightning_01_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	bool Constant215 = false;
	Context.Map.UniformRangedFloat.OverrideSeed = Constant215;
	bool Constant216 = false;
	Context.Map.UniformRangedFloat.FixedRandomSeed = Constant216;
	int Constant217 = 0;
	bool Constant218 = false;
	int Mode_IfResult7;
	bool Override_IfResult7;
	if(Context.Map.UniformRangedFloat.OverrideRandomness)
	{
	Mode_IfResult7 = Context.Map.UniformRangedFloat.RandomnessMode;
	Override_IfResult7 = Context.Map.UniformRangedFloat.OverrideSeed;
	}
	else
	{
	Mode_IfResult7 = Constant217;
	Override_IfResult7 = Constant218;
	}
	float RandomRangeFloat_Func_Output_Result6;
	RandomRangeFloat_Func_(Context.Map.UniformRangedFloat.Minimum, Context.Map.Constants.Lightning_01.UniformRangedFloat.Maximum, Context.Map.Constants.Lightning_01.UniformRangedFloat.RandomSeed, Mode_IfResult7, Override_IfResult7, Context.Map.UniformRangedFloat.FixedRandomSeed, RandomRangeFloat_Func_Output_Result6, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result6;
}

void CrossProduct_Lightning_01_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context)
{
	bool Constant219 = true;
	Context.Map.CrossProduct.NormalizeIncomingVectors = Constant219;
	float3 Result76 = normalize(Context.Map.CrossProduct.VectorA);
	float3 Result77 = normalize(Context.Map.CrossProduct.VectorB);
	float3 VectorA_IfResult2;
	float3 VectorB_IfResult2;
	if(Context.Map.CrossProduct.NormalizeIncomingVectors)
	{
	VectorA_IfResult2 = Result76;
	VectorB_IfResult2 = Result77;
	}
	else
	{
	VectorA_IfResult2 = Context.Map.CrossProduct.VectorA;
	VectorB_IfResult2 = Context.Map.CrossProduct.VectorB;
	}
	float3 Result78 = cross(VectorA_IfResult2,VectorB_IfResult2);
	Out_CrossedVector = Result78;
}

void SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_01_Func_(inout FSimulationContext Context)
{
	Context.Map.Lightning_01.BeamCurve2 = Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_01.BeamCurve2;
	Context.Map.Lightning_01.RandomVector = Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_01.RandomVector;
}

void UniformRangedFloat002_Lightning_01_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	bool Constant220 = false;
	Context.Map.UniformRangedFloat002.OverrideRandomness = Constant220;
	int Constant221 = 0;
	Context.Map.UniformRangedFloat002.RandomnessMode = Constant221;
	bool Constant222 = false;
	Context.Map.UniformRangedFloat002.OverrideSeed = Constant222;
	bool Constant223 = false;
	Context.Map.UniformRangedFloat002.FixedRandomSeed = Constant223;
	int Constant224 = 0;
	bool Constant225 = false;
	int Mode_IfResult8;
	bool Override_IfResult8;
	if(Context.Map.UniformRangedFloat002.OverrideRandomness)
	{
	Mode_IfResult8 = Context.Map.UniformRangedFloat002.RandomnessMode;
	Override_IfResult8 = Context.Map.UniformRangedFloat002.OverrideSeed;
	}
	else
	{
	Mode_IfResult8 = Constant224;
	Override_IfResult8 = Constant225;
	}
	float RandomRangeFloat_Func_Output_Result7;
	RandomRangeFloat_Func_(Context.Map.UniformRangedFloat002.Minimum, Context.Map.UniformRangedFloat002.Maximum, Context.Map.Constants.Lightning_01.UniformRangedFloat002.RandomSeed, Mode_IfResult8, Override_IfResult8, Context.Map.UniformRangedFloat002.FixedRandomSeed, RandomRangeFloat_Func_Output_Result7, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result7;
}

void SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_01_Func_(inout FSimulationContext Context)
{
	Context.Map.Lightning_01.LifeTime = Context.Map.SetVariables_7B66B97741ECF3EC033ECC9678557D08.Lightning_01.LifeTime;
}

void Lightning_01_Func_(inout FSimulationContext Context)
{
	bool Constant200 = false;
	int Constant201 = 2;
	float3 SimulationPosition001_Lightning_01_Func_Output_SimulationPosition;
	SimulationPosition001_Lightning_01_Func_(SimulationPosition001_Lightning_01_Func_Output_SimulationPosition, Context);
	Context.Map.RandomVector.OverrideRandomness = Constant200;
	Context.Map.RandomVector.RandomnessMode = Constant201;
	Context.Map.Subtract_Vector.A = Context.Map.User.End;
	Context.Map.Subtract_Vector.B = SimulationPosition001_Lightning_01_Func_Output_SimulationPosition;
	bool Constant204 = false;
	int Constant205 = 2;
	float3 RandomVector_Lightning_01_Func_Output_RandomVector;
	RandomVector_Lightning_01_Func_(RandomVector_Lightning_01_Func_Output_RandomVector, Context);
	float3 Subtract_Vector_Lightning_01_Func_Output_Result;
	Subtract_Vector_Lightning_01_Func_(Subtract_Vector_Lightning_01_Func_Output_Result, Context);
	Context.Map.UniformRangedFloat.Minimum = Context.Map.User.BeamCurveMinFactor;
	Context.Map.UniformRangedFloat.OverrideRandomness = Constant204;
	Context.Map.UniformRangedFloat.RandomnessMode = Constant205;
	Context.Map.CrossProduct.VectorB = RandomVector_Lightning_01_Func_Output_RandomVector;
	Context.Map.CrossProduct.VectorA = Subtract_Vector_Lightning_01_Func_Output_Result;
	float UniformRangedFloat_Lightning_01_Func_Output_UniformRangedFloat;
	UniformRangedFloat_Lightning_01_Func_(UniformRangedFloat_Lightning_01_Func_Output_UniformRangedFloat, Context);
	float3 CrossProduct_Lightning_01_Func_Output_CrossedVector;
	CrossProduct_Lightning_01_Func_(CrossProduct_Lightning_01_Func_Output_CrossedVector, Context);
	Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_01.BeamCurve2 = UniformRangedFloat_Lightning_01_Func_Output_UniformRangedFloat;
	Context.Map.SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F.Lightning_01.RandomVector = CrossProduct_Lightning_01_Func_Output_CrossedVector;
	EnterStatScope(11 );
	SetVariables_D7E92D844CD5884CCE7FCE9D0ADB850F_Lightning_01_Func_(Context);
	ExitStatScope( );
	Context.Map.UniformRangedFloat002.Minimum = Context.Map.User.MinLifeTime;
	Context.Map.UniformRangedFloat002.Maximum = Context.Map.User.MaxLifeTime;
	float UniformRangedFloat002_Lightning_01_Func_Output_UniformRangedFloat;
	UniformRangedFloat002_Lightning_01_Func_(UniformRangedFloat002_Lightning_01_Func_Output_UniformRangedFloat, Context);
	Context.Map.SetVariables_7B66B97741ECF3EC033ECC9678557D08.Lightning_01.LifeTime = UniformRangedFloat002_Lightning_01_Func_Output_UniformRangedFloat;
	EnterStatScope(12 );
	SetVariables_7B66B97741ECF3EC033ECC9678557D08_Lightning_01_Func_(Context);
	ExitStatScope( );
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );

	int Constant = 0;
	Context.Map.Sparks_02.ExecutionState = Constant;
	float Constant1 = 0;
	Context.Map.Sparks_02.Age = Constant1;
	float Constant2 = 0;
	Context.Map.Sparks_02.CurrentLoopDuration = Constant2;
	float Constant3 = 0;
	Context.Map.Sparks_02.LoopedAge = Constant3;
	int Constant4 = 0;
	Context.Map.Sparks_02.LoopCount = Constant4;
	float Constant5 = (0.0);
	Context.Map.Sparks_02.NormalizedLoopAge = Constant5;
	float Constant6 = (0.0);
	Context.Map.Sparks_02.Scalability.DistanceFraction = Constant6;
	int Constant7 = 0;
	Context.Map.System.ExecutionState = Constant7;
	int Constant8 = 0;
	Context.Map.System.ExecutionStateSource = Constant8;
	int Constant9 = 0;
	Context.Map.Sparks_02.ExecutionStateSource = Constant9;
	NiagaraSpawnInfo Constant10 = (NiagaraSpawnInfo)0;
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst = Constant10;
	bool Constant11 = false;
	Context.Map.Sparks_02.LocalSpace = Constant11;
	float Constant12 = 1;
	Context.Map.Sparks_02.AlphaScale = Constant12;
	int Constant13 = 0;
	Context.Map.Ground_Lightning.ExecutionState = Constant13;
	float Constant14 = 0;
	Context.Map.Ground_Lightning.Age = Constant14;
	float Constant15 = 0;
	Context.Map.Ground_Lightning.CurrentLoopDuration = Constant15;
	float Constant16 = 0;
	Context.Map.Ground_Lightning.LoopedAge = Constant16;
	int Constant17 = 0;
	Context.Map.Ground_Lightning.LoopCount = Constant17;
	float Constant18 = (0.0);
	Context.Map.Ground_Lightning.NormalizedLoopAge = Constant18;
	float Constant19 = (0.0);
	Context.Map.Ground_Lightning.Scalability.DistanceFraction = Constant19;
	int Constant20 = 0;
	Context.Map.Ground_Lightning.ExecutionStateSource = Constant20;
	float Constant21 = 0;
	Context.Map.Ground_Lightning.SpawnRate.SpawnRemainder = Constant21;
	NiagaraSpawnInfo Constant22 = (NiagaraSpawnInfo)0;
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo = Constant22;
	bool Constant23 = false;
	Context.Map.Ground_Lightning.LocalSpace = Constant23;
	int Constant24 = 0;
	Context.Map.Sparks_01.ExecutionState = Constant24;
	float Constant25 = 0;
	Context.Map.Sparks_01.Age = Constant25;
	float Constant26 = 0;
	Context.Map.Sparks_01.CurrentLoopDuration = Constant26;
	float Constant27 = 0;
	Context.Map.Sparks_01.LoopedAge = Constant27;
	int Constant28 = 0;
	Context.Map.Sparks_01.LoopCount = Constant28;
	float Constant29 = (0.0);
	Context.Map.Sparks_01.NormalizedLoopAge = Constant29;
	float Constant30 = (0.0);
	Context.Map.Sparks_01.Scalability.DistanceFraction = Constant30;
	int Constant31 = 0;
	Context.Map.Sparks_01.ExecutionStateSource = Constant31;
	NiagaraSpawnInfo Constant32 = (NiagaraSpawnInfo)0;
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst = Constant32;
	bool Constant33 = false;
	Context.Map.Sparks_01.LocalSpace = Constant33;
	float Constant34 = 1;
	Context.Map.Sparks_01.AlphaScale = Constant34;
	bool Constant35 = false;
	Context.Map.Lightning_03.LocalSpace = Constant35;
	float Constant36 = (0.0);
	Context.Map.Lightning_03.BeamCurve2 = Constant36;
	float3 Constant37 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_03.RandomVector = Constant37;
	float Constant38 = (0.0);
	Context.Map.Lightning_03.LifeTime = Constant38;
	float3 Constant39 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_03.BeamStart = Constant39;
	float3 Constant40 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_03.BeamStartTangent = Constant40;
	float3 Constant41 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_03.BeamEnd = Constant41;
	float3 Constant42 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_03.BeamEndTangent = Constant42;
	bool Constant43 = (false);
	Context.Map.Lightning_03.UseBeamTangents = Constant43;
	float Constant44 = (0.0);
	Context.Map.Lightning_03.BeamStartEndLength = Constant44;
	float3 Constant45 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_03.BeamVector = Constant45;
	float3 Constant46 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_03.BeamDirection = Constant46;
	int Constant47 = 0;
	Context.Map.Lightning_03.LoopCount = Constant47;
	int Constant48 = -1;
	Context.Map.Lightning_03.BeamID = Constant48;
	int Constant49 = 0;
	Context.Map.Lightning_03.ExecutionState = Constant49;
	float Constant50 = 0;
	Context.Map.Lightning_03.Age = Constant50;
	float Constant51 = 0;
	Context.Map.Lightning_03.CurrentLoopDuration = Constant51;
	float Constant52 = 0;
	Context.Map.Lightning_03.LoopedAge = Constant52;
	float Constant53 = (0.0);
	Context.Map.Lightning_03.NormalizedLoopAge = Constant53;
	float Constant54 = (0.0);
	Context.Map.Lightning_03.Scalability.DistanceFraction = Constant54;
	int Constant55 = 0;
	Context.Map.Lightning_03.ExecutionStateSource = Constant55;
	int Constant56 = (0);
	Context.Map.Lightning_03.Complexity = Constant56;
	int Constant57 = (0);
	Context.Map.Lightning_03.DustParticlesQuantity = Constant57;
	NiagaraSpawnInfo Constant58 = (NiagaraSpawnInfo)0;
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst = Constant58;
	bool Constant59 = false;
	Context.Map.Lightning_02.LocalSpace = Constant59;
	float Constant60 = (0.0);
	Context.Map.Lightning_02.BeamCurve2 = Constant60;
	float3 Constant61 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_02.RandomVector = Constant61;
	float Constant62 = (0.0);
	Context.Map.Lightning_02.LifeTime = Constant62;
	float3 Constant63 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_02.BeamStart = Constant63;
	float3 Constant64 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_02.BeamStartTangent = Constant64;
	float3 Constant65 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_02.BeamEnd = Constant65;
	float3 Constant66 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_02.BeamEndTangent = Constant66;
	bool Constant67 = (false);
	Context.Map.Lightning_02.UseBeamTangents = Constant67;
	float Constant68 = (0.0);
	Context.Map.Lightning_02.BeamStartEndLength = Constant68;
	float3 Constant69 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_02.BeamVector = Constant69;
	float3 Constant70 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_02.BeamDirection = Constant70;
	int Constant71 = 0;
	Context.Map.Lightning_02.LoopCount = Constant71;
	int Constant72 = -1;
	Context.Map.Lightning_02.BeamID = Constant72;
	int Constant73 = 0;
	Context.Map.Lightning_02.ExecutionState = Constant73;
	float Constant74 = 0;
	Context.Map.Lightning_02.Age = Constant74;
	float Constant75 = 0;
	Context.Map.Lightning_02.CurrentLoopDuration = Constant75;
	float Constant76 = 0;
	Context.Map.Lightning_02.LoopedAge = Constant76;
	float Constant77 = (0.0);
	Context.Map.Lightning_02.NormalizedLoopAge = Constant77;
	float Constant78 = (0.0);
	Context.Map.Lightning_02.Scalability.DistanceFraction = Constant78;
	int Constant79 = 0;
	Context.Map.Lightning_02.ExecutionStateSource = Constant79;
	int Constant80 = (0);
	Context.Map.Lightning_02.Complexity = Constant80;
	int Constant81 = (0);
	Context.Map.Lightning_02.DustParticlesQuantity = Constant81;
	NiagaraSpawnInfo Constant82 = (NiagaraSpawnInfo)0;
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst = Constant82;
	bool Constant83 = false;
	Context.Map.Lightning_01.LocalSpace = Constant83;
	float Constant84 = (0.0);
	Context.Map.Lightning_01.BeamCurve2 = Constant84;
	float3 Constant85 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_01.RandomVector = Constant85;
	float Constant86 = (0.0);
	Context.Map.Lightning_01.LifeTime = Constant86;
	float3 Constant87 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_01.BeamStart = Constant87;
	float3 Constant88 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_01.BeamStartTangent = Constant88;
	float3 Constant89 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_01.BeamEnd = Constant89;
	float3 Constant90 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_01.BeamEndTangent = Constant90;
	bool Constant91 = (false);
	Context.Map.Lightning_01.UseBeamTangents = Constant91;
	float Constant92 = (0.0);
	Context.Map.Lightning_01.BeamStartEndLength = Constant92;
	float3 Constant93 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_01.BeamVector = Constant93;
	float3 Constant94 = float3(0.0, 0.0, 0.0);
	Context.Map.Lightning_01.BeamDirection = Constant94;
	int Constant95 = 0;
	Context.Map.Lightning_01.LoopCount = Constant95;
	int Constant96 = -1;
	Context.Map.Lightning_01.BeamID = Constant96;
	int Constant97 = 0;
	Context.Map.Lightning_01.ExecutionState = Constant97;
	float Constant98 = 0;
	Context.Map.Lightning_01.Age = Constant98;
	float Constant99 = 0;
	Context.Map.Lightning_01.CurrentLoopDuration = Constant99;
	float Constant100 = 0;
	Context.Map.Lightning_01.LoopedAge = Constant100;
	float Constant101 = (0.0);
	Context.Map.Lightning_01.NormalizedLoopAge = Constant101;
	float Constant102 = (0.0);
	Context.Map.Lightning_01.Scalability.DistanceFraction = Constant102;
	int Constant103 = 0;
	Context.Map.Lightning_01.ExecutionStateSource = Constant103;
	int Constant104 = (0);
	Context.Map.Lightning_01.Complexity = Constant104;
	int Constant105 = (0);
	Context.Map.Lightning_01.DustParticlesQuantity = Constant105;
	NiagaraSpawnInfo Constant106 = (NiagaraSpawnInfo)0;
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst = Constant106;
	float Constant107 = 0;
	Context.Map.System.Age = Constant107;
	float Constant108 = 0;
	Context.Map.System.CurrentLoopDuration = Constant108;
	float Constant109 = 0;
	Context.Map.System.LoopedAge = Constant109;
	int Constant110 = 0;
	Context.Map.System.LoopCount = Constant110;
	float Constant111 = (0.0);
	Context.Map.System.NormalizedLoopAge = Constant111;
	bool Constant112 = false;
	Context.Map.System.bCompleteOnInactive = Constant112;

	EnterStatScope(1 );
	Sparks_02_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	Ground_Lightning_Func_(Context);
	ExitStatScope( );
	EnterStatScope(3 );
	Sparks_01_Func_(Context);
	ExitStatScope( );
	EnterStatScope(4 );
	Lightning_03_Func_(Context);
	ExitStatScope( );
	EnterStatScope(7 );
	Lightning_02_Func_(Context);
	ExitStatScope( );
	EnterStatScope(10 );
	Lightning_01_Func_(Context);
	ExitStatScope( );




	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(13 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = 0;
	Context.Map.Ground_Lightning.Age = 0.0f;
	Context.Map.Ground_Lightning.CurrentLoopDuration = 0.0f;
	Context.Map.Ground_Lightning.ExecutionState = 0;
	Context.Map.Ground_Lightning.ExecutionStateSource = 0;
	Context.Map.Ground_Lightning.LocalSpace = false;
	Context.Map.Ground_Lightning.LoopCount = 0;
	Context.Map.Ground_Lightning.LoopedAge = 0.0f;
	Context.Map.Ground_Lightning.NormalizedLoopAge = 0.0f;
	Context.Map.Ground_Lightning.Scalability.DistanceFraction = 0.0f;
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.Ground_Lightning.SpawnRate.SpawnRemainder = 0.0f;
	Context.Map.Lightning_01.Age = 0.0f;
	Context.Map.Lightning_01.BeamCurve2 = 0.0f;
	Context.Map.Lightning_01.BeamDirection.x = 0.0f;
	Context.Map.Lightning_01.BeamDirection.y = 0.0f;
	Context.Map.Lightning_01.BeamDirection.z = 0.0f;
	Context.Map.Lightning_01.BeamEnd.x = 0.0f;
	Context.Map.Lightning_01.BeamEnd.y = 0.0f;
	Context.Map.Lightning_01.BeamEnd.z = 0.0f;
	Context.Map.Lightning_01.BeamEndTangent.x = 0.0f;
	Context.Map.Lightning_01.BeamEndTangent.y = 0.0f;
	Context.Map.Lightning_01.BeamEndTangent.z = 0.0f;
	Context.Map.Lightning_01.BeamID = 0;
	Context.Map.Lightning_01.BeamStart.x = 0.0f;
	Context.Map.Lightning_01.BeamStart.y = 0.0f;
	Context.Map.Lightning_01.BeamStart.z = 0.0f;
	Context.Map.Lightning_01.BeamStartEndLength = 0.0f;
	Context.Map.Lightning_01.BeamStartTangent.x = 0.0f;
	Context.Map.Lightning_01.BeamStartTangent.y = 0.0f;
	Context.Map.Lightning_01.BeamStartTangent.z = 0.0f;
	Context.Map.Lightning_01.BeamVector.x = 0.0f;
	Context.Map.Lightning_01.BeamVector.y = 0.0f;
	Context.Map.Lightning_01.BeamVector.z = 0.0f;
	Context.Map.Lightning_01.Complexity = 0;
	Context.Map.Lightning_01.CurrentLoopDuration = 0.0f;
	Context.Map.Lightning_01.DustParticlesQuantity = 0;
	Context.Map.Lightning_01.ExecutionState = 0;
	Context.Map.Lightning_01.ExecutionStateSource = 0;
	Context.Map.Lightning_01.LifeTime = 0.0f;
	Context.Map.Lightning_01.LocalSpace = false;
	Context.Map.Lightning_01.LoopCount = 0;
	Context.Map.Lightning_01.LoopedAge = 0.0f;
	Context.Map.Lightning_01.NormalizedLoopAge = 0.0f;
	Context.Map.Lightning_01.RandomVector.x = 0.0f;
	Context.Map.Lightning_01.RandomVector.y = 0.0f;
	Context.Map.Lightning_01.RandomVector.z = 0.0f;
	Context.Map.Lightning_01.Scalability.DistanceFraction = 0.0f;
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Lightning_01.UseBeamTangents = false;
	Context.Map.Lightning_02.Age = 0.0f;
	Context.Map.Lightning_02.BeamCurve2 = 0.0f;
	Context.Map.Lightning_02.BeamDirection.x = 0.0f;
	Context.Map.Lightning_02.BeamDirection.y = 0.0f;
	Context.Map.Lightning_02.BeamDirection.z = 0.0f;
	Context.Map.Lightning_02.BeamEnd.x = 0.0f;
	Context.Map.Lightning_02.BeamEnd.y = 0.0f;
	Context.Map.Lightning_02.BeamEnd.z = 0.0f;
	Context.Map.Lightning_02.BeamEndTangent.x = 0.0f;
	Context.Map.Lightning_02.BeamEndTangent.y = 0.0f;
	Context.Map.Lightning_02.BeamEndTangent.z = 0.0f;
	Context.Map.Lightning_02.BeamID = 0;
	Context.Map.Lightning_02.BeamStart.x = 0.0f;
	Context.Map.Lightning_02.BeamStart.y = 0.0f;
	Context.Map.Lightning_02.BeamStart.z = 0.0f;
	Context.Map.Lightning_02.BeamStartEndLength = 0.0f;
	Context.Map.Lightning_02.BeamStartTangent.x = 0.0f;
	Context.Map.Lightning_02.BeamStartTangent.y = 0.0f;
	Context.Map.Lightning_02.BeamStartTangent.z = 0.0f;
	Context.Map.Lightning_02.BeamVector.x = 0.0f;
	Context.Map.Lightning_02.BeamVector.y = 0.0f;
	Context.Map.Lightning_02.BeamVector.z = 0.0f;
	Context.Map.Lightning_02.Complexity = 0;
	Context.Map.Lightning_02.CurrentLoopDuration = 0.0f;
	Context.Map.Lightning_02.DustParticlesQuantity = 0;
	Context.Map.Lightning_02.ExecutionState = 0;
	Context.Map.Lightning_02.ExecutionStateSource = 0;
	Context.Map.Lightning_02.LifeTime = 0.0f;
	Context.Map.Lightning_02.LocalSpace = false;
	Context.Map.Lightning_02.LoopCount = 0;
	Context.Map.Lightning_02.LoopedAge = 0.0f;
	Context.Map.Lightning_02.NormalizedLoopAge = 0.0f;
	Context.Map.Lightning_02.RandomVector.x = 0.0f;
	Context.Map.Lightning_02.RandomVector.y = 0.0f;
	Context.Map.Lightning_02.RandomVector.z = 0.0f;
	Context.Map.Lightning_02.Scalability.DistanceFraction = 0.0f;
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Lightning_02.UseBeamTangents = false;
	Context.Map.Lightning_03.Age = 0.0f;
	Context.Map.Lightning_03.BeamCurve2 = 0.0f;
	Context.Map.Lightning_03.BeamDirection.x = 0.0f;
	Context.Map.Lightning_03.BeamDirection.y = 0.0f;
	Context.Map.Lightning_03.BeamDirection.z = 0.0f;
	Context.Map.Lightning_03.BeamEnd.x = 0.0f;
	Context.Map.Lightning_03.BeamEnd.y = 0.0f;
	Context.Map.Lightning_03.BeamEnd.z = 0.0f;
	Context.Map.Lightning_03.BeamEndTangent.x = 0.0f;
	Context.Map.Lightning_03.BeamEndTangent.y = 0.0f;
	Context.Map.Lightning_03.BeamEndTangent.z = 0.0f;
	Context.Map.Lightning_03.BeamID = 0;
	Context.Map.Lightning_03.BeamStart.x = 0.0f;
	Context.Map.Lightning_03.BeamStart.y = 0.0f;
	Context.Map.Lightning_03.BeamStart.z = 0.0f;
	Context.Map.Lightning_03.BeamStartEndLength = 0.0f;
	Context.Map.Lightning_03.BeamStartTangent.x = 0.0f;
	Context.Map.Lightning_03.BeamStartTangent.y = 0.0f;
	Context.Map.Lightning_03.BeamStartTangent.z = 0.0f;
	Context.Map.Lightning_03.BeamVector.x = 0.0f;
	Context.Map.Lightning_03.BeamVector.y = 0.0f;
	Context.Map.Lightning_03.BeamVector.z = 0.0f;
	Context.Map.Lightning_03.Complexity = 0;
	Context.Map.Lightning_03.CurrentLoopDuration = 0.0f;
	Context.Map.Lightning_03.DustParticlesQuantity = 0;
	Context.Map.Lightning_03.ExecutionState = 0;
	Context.Map.Lightning_03.ExecutionStateSource = 0;
	Context.Map.Lightning_03.LifeTime = 0.0f;
	Context.Map.Lightning_03.LocalSpace = false;
	Context.Map.Lightning_03.LoopCount = 0;
	Context.Map.Lightning_03.LoopedAge = 0.0f;
	Context.Map.Lightning_03.NormalizedLoopAge = 0.0f;
	Context.Map.Lightning_03.RandomVector.x = 0.0f;
	Context.Map.Lightning_03.RandomVector.y = 0.0f;
	Context.Map.Lightning_03.RandomVector.z = 0.0f;
	Context.Map.Lightning_03.Scalability.DistanceFraction = 0.0f;
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Lightning_03.UseBeamTangents = false;
	Context.Map.Sparks_01.Age = 0.0f;
	Context.Map.Sparks_01.AlphaScale = 0.0f;
	Context.Map.Sparks_01.CurrentLoopDuration = 0.0f;
	Context.Map.Sparks_01.ExecutionState = 0;
	Context.Map.Sparks_01.ExecutionStateSource = 0;
	Context.Map.Sparks_01.LocalSpace = false;
	Context.Map.Sparks_01.LoopCount = 0;
	Context.Map.Sparks_01.LoopedAge = 0.0f;
	Context.Map.Sparks_01.NormalizedLoopAge = 0.0f;
	Context.Map.Sparks_01.Scalability.DistanceFraction = 0.0f;
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Sparks_02.Age = 0.0f;
	Context.Map.Sparks_02.AlphaScale = 0.0f;
	Context.Map.Sparks_02.CurrentLoopDuration = 0.0f;
	Context.Map.Sparks_02.ExecutionState = 0;
	Context.Map.Sparks_02.ExecutionStateSource = 0;
	Context.Map.Sparks_02.LocalSpace = false;
	Context.Map.Sparks_02.LoopCount = 0;
	Context.Map.Sparks_02.LoopedAge = 0.0f;
	Context.Map.Sparks_02.NormalizedLoopAge = 0.0f;
	Context.Map.Sparks_02.Scalability.DistanceFraction = 0.0f;
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.System.Age = 0.0f;
	Context.Map.System.bCompleteOnInactive = false;
	Context.Map.System.CurrentLoopDuration = 0.0f;
	Context.Map.System.ExecutionState = 0;
	Context.Map.System.ExecutionStateSource = 0;
	Context.Map.System.LoopCount = 0;
	Context.Map.System.LoopedAge = 0.0f;
	Context.Map.System.NormalizedLoopAge = 0.0f;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Engine.Owner.Position.x = InputDataFloat(1, 1);
	Context.Map.Engine.Owner.Position.y = InputDataFloat(1, 2);
	Context.Map.Engine.Owner.Position.z = InputDataFloat(1, 3);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][0] = InputDataFloat(1, 4);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][1] = InputDataFloat(1, 5);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][2] = InputDataFloat(1, 6);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][3] = InputDataFloat(1, 7);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][0] = InputDataFloat(1, 8);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][1] = InputDataFloat(1, 9);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][2] = InputDataFloat(1, 10);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][3] = InputDataFloat(1, 11);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][0] = InputDataFloat(1, 12);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][1] = InputDataFloat(1, 13);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][2] = InputDataFloat(1, 14);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][3] = InputDataFloat(1, 15);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][0] = InputDataFloat(1, 16);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][1] = InputDataFloat(1, 17);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][2] = InputDataFloat(1, 18);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][3] = InputDataFloat(1, 19);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][0] = InputDataFloat(1, 20);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][1] = InputDataFloat(1, 21);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][2] = InputDataFloat(1, 22);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][3] = InputDataFloat(1, 23);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][0] = InputDataFloat(1, 24);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][1] = InputDataFloat(1, 25);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][2] = InputDataFloat(1, 26);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][3] = InputDataFloat(1, 27);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][0] = InputDataFloat(1, 28);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][1] = InputDataFloat(1, 29);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][2] = InputDataFloat(1, 30);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][3] = InputDataFloat(1, 31);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][0] = InputDataFloat(1, 32);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][1] = InputDataFloat(1, 33);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][2] = InputDataFloat(1, 34);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][3] = InputDataFloat(1, 35);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][0] = InputDataFloat(1, 36);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][1] = InputDataFloat(1, 37);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][2] = InputDataFloat(1, 38);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][3] = InputDataFloat(1, 39);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][0] = InputDataFloat(1, 40);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][1] = InputDataFloat(1, 41);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][2] = InputDataFloat(1, 42);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][3] = InputDataFloat(1, 43);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][0] = InputDataFloat(1, 44);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][1] = InputDataFloat(1, 45);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][2] = InputDataFloat(1, 46);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][3] = InputDataFloat(1, 47);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][0] = InputDataFloat(1, 48);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][1] = InputDataFloat(1, 49);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][2] = InputDataFloat(1, 50);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][3] = InputDataFloat(1, 51);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][0] = InputDataFloat(1, 52);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][1] = InputDataFloat(1, 53);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][2] = InputDataFloat(1, 54);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][3] = InputDataFloat(1, 55);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][0] = InputDataFloat(1, 56);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][1] = InputDataFloat(1, 57);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][2] = InputDataFloat(1, 58);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][3] = InputDataFloat(1, 59);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][0] = InputDataFloat(1, 60);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][1] = InputDataFloat(1, 61);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][2] = InputDataFloat(1, 62);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][3] = InputDataFloat(1, 63);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][0] = InputDataFloat(1, 64);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][1] = InputDataFloat(1, 65);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][2] = InputDataFloat(1, 66);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][3] = InputDataFloat(1, 67);
	Context.Map.Engine.System.TickCount = InputDataInt(1, 68);
	Context.Map.User.BeamCurveMinFactor = InputDataFloat(1, 69);
	Context.Map.User.End.x = InputDataFloat(1, 70);
	Context.Map.User.End.y = InputDataFloat(1, 71);
	Context.Map.User.End.z = InputDataFloat(1, 72);
	Context.Map.User.End2.x = InputDataFloat(1, 73);
	Context.Map.User.End2.y = InputDataFloat(1, 74);
	Context.Map.User.End2.z = InputDataFloat(1, 75);
	Context.Map.User.Lightning_03.RandomSeed = InputDataInt(1, 76);
	Context.Map.User.MaxLifeTime = InputDataFloat(1, 77);
	Context.Map.User.MinLifeTime = InputDataFloat(1, 78);
	Context.Map.Constants.Lightning_03.RandomVector.VectorScale = Constants_Lightning_03_RandomVector_VectorScale;
	Context.Map.Constants.Lightning_03.RandomVector.ConstraintVector = Constants_Lightning_03_RandomVector_ConstraintVector;
	Context.Map.Constants.Lightning_03.RandomVector.RandomSeed = Constants_Lightning_03_RandomVector_RandomSeed;
	Context.Map.Constants.Lightning_03.UniformRangedFloat.Maximum = Constants_Lightning_03_UniformRangedFloat_Maximum;
	Context.Map.Constants.Lightning_03.UniformRangedFloat.RandomSeed = Constants_Lightning_03_UniformRangedFloat_RandomSeed;
	Context.Map.Constants.Lightning_03.UniformRangedFloat002.RandomSeed = Constants_Lightning_03_UniformRangedFloat002_RandomSeed;
	Context.Map.Constants.Lightning_02.RandomVector.VectorScale = Constants_Lightning_02_RandomVector_VectorScale;
	Context.Map.Constants.Lightning_02.RandomVector.ConstraintVector = Constants_Lightning_02_RandomVector_ConstraintVector;
	Context.Map.Constants.Lightning_02.RandomVector.RandomSeed = Constants_Lightning_02_RandomVector_RandomSeed;
	Context.Map.Constants.Lightning_02.UniformRangedFloat.Maximum = Constants_Lightning_02_UniformRangedFloat_Maximum;
	Context.Map.Constants.Lightning_02.UniformRangedFloat.RandomSeed = Constants_Lightning_02_UniformRangedFloat_RandomSeed;
	Context.Map.Constants.Lightning_02.UniformRangedFloat002.RandomSeed = Constants_Lightning_02_UniformRangedFloat002_RandomSeed;
	Context.Map.Constants.Lightning_01.RandomVector.VectorScale = Constants_Lightning_01_RandomVector_VectorScale;
	Context.Map.Constants.Lightning_01.RandomVector.ConstraintVector = Constants_Lightning_01_RandomVector_ConstraintVector;
	Context.Map.Constants.Lightning_01.RandomVector.RandomSeed = Constants_Lightning_01_RandomVector_RandomSeed;
	Context.Map.Constants.Lightning_01.UniformRangedFloat.Maximum = Constants_Lightning_01_UniformRangedFloat_Maximum;
	Context.Map.Constants.Lightning_01.UniformRangedFloat.RandomSeed = Constants_Lightning_01_UniformRangedFloat_RandomSeed;
	Context.Map.Constants.Lightning_01.UniformRangedFloat002.RandomSeed = Constants_Lightning_01_UniformRangedFloat002_RandomSeed;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Ground_Lightning.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Ground_Lightning.CurrentLoopDuration);
	OutputDataInt(0, 3, TmpWriteIndex, Context.Map.Ground_Lightning.ExecutionState);
	OutputDataInt(0, 4, TmpWriteIndex, Context.Map.Ground_Lightning.ExecutionStateSource);
	OutputDataBool(0, 5, TmpWriteIndex, Context.Map.Ground_Lightning.LocalSpace);
	OutputDataInt(0, 6, TmpWriteIndex, Context.Map.Ground_Lightning.LoopCount);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Ground_Lightning.LoopedAge);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Ground_Lightning.NormalizedLoopAge);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Ground_Lightning.Scalability.DistanceFraction);
	OutputDataInt(0, 10, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 13, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Ground_Lightning.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Lightning_01.Age);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Lightning_01.BeamCurve2);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Lightning_01.BeamDirection.x);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Lightning_01.BeamDirection.y);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Lightning_01.BeamDirection.z);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Lightning_01.BeamEnd.x);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Lightning_01.BeamEnd.y);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Lightning_01.BeamEnd.z);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Lightning_01.BeamEndTangent.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Lightning_01.BeamEndTangent.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Lightning_01.BeamEndTangent.z);
	OutputDataInt(0, 26, TmpWriteIndex, Context.Map.Lightning_01.BeamID);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Lightning_01.BeamStart.x);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Lightning_01.BeamStart.y);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Lightning_01.BeamStart.z);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Lightning_01.BeamStartEndLength);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Lightning_01.BeamStartTangent.x);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Lightning_01.BeamStartTangent.y);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Lightning_01.BeamStartTangent.z);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Lightning_01.BeamVector.x);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Lightning_01.BeamVector.y);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Lightning_01.BeamVector.z);
	OutputDataInt(0, 37, TmpWriteIndex, Context.Map.Lightning_01.Complexity);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.Map.Lightning_01.CurrentLoopDuration);
	OutputDataInt(0, 39, TmpWriteIndex, Context.Map.Lightning_01.DustParticlesQuantity);
	OutputDataInt(0, 40, TmpWriteIndex, Context.Map.Lightning_01.ExecutionState);
	OutputDataInt(0, 41, TmpWriteIndex, Context.Map.Lightning_01.ExecutionStateSource);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.Lightning_01.LifeTime);
	OutputDataBool(0, 43, TmpWriteIndex, Context.Map.Lightning_01.LocalSpace);
	OutputDataInt(0, 44, TmpWriteIndex, Context.Map.Lightning_01.LoopCount);
	OutputDataFloat(0, 45, TmpWriteIndex, Context.Map.Lightning_01.LoopedAge);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.Map.Lightning_01.NormalizedLoopAge);
	OutputDataFloat(0, 47, TmpWriteIndex, Context.Map.Lightning_01.RandomVector.x);
	OutputDataFloat(0, 48, TmpWriteIndex, Context.Map.Lightning_01.RandomVector.y);
	OutputDataFloat(0, 49, TmpWriteIndex, Context.Map.Lightning_01.RandomVector.z);
	OutputDataFloat(0, 50, TmpWriteIndex, Context.Map.Lightning_01.Scalability.DistanceFraction);
	OutputDataInt(0, 51, TmpWriteIndex, Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 52, TmpWriteIndex, Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 53, TmpWriteIndex, Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 54, TmpWriteIndex, Context.Map.Lightning_01.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 55, TmpWriteIndex, Context.Map.Lightning_01.UseBeamTangents);
	OutputDataFloat(0, 56, TmpWriteIndex, Context.Map.Lightning_02.Age);
	OutputDataFloat(0, 57, TmpWriteIndex, Context.Map.Lightning_02.BeamCurve2);
	OutputDataFloat(0, 58, TmpWriteIndex, Context.Map.Lightning_02.BeamDirection.x);
	OutputDataFloat(0, 59, TmpWriteIndex, Context.Map.Lightning_02.BeamDirection.y);
	OutputDataFloat(0, 60, TmpWriteIndex, Context.Map.Lightning_02.BeamDirection.z);
	OutputDataFloat(0, 61, TmpWriteIndex, Context.Map.Lightning_02.BeamEnd.x);
	OutputDataFloat(0, 62, TmpWriteIndex, Context.Map.Lightning_02.BeamEnd.y);
	OutputDataFloat(0, 63, TmpWriteIndex, Context.Map.Lightning_02.BeamEnd.z);
	OutputDataFloat(0, 64, TmpWriteIndex, Context.Map.Lightning_02.BeamEndTangent.x);
	OutputDataFloat(0, 65, TmpWriteIndex, Context.Map.Lightning_02.BeamEndTangent.y);
	OutputDataFloat(0, 66, TmpWriteIndex, Context.Map.Lightning_02.BeamEndTangent.z);
	OutputDataInt(0, 67, TmpWriteIndex, Context.Map.Lightning_02.BeamID);
	OutputDataFloat(0, 68, TmpWriteIndex, Context.Map.Lightning_02.BeamStart.x);
	OutputDataFloat(0, 69, TmpWriteIndex, Context.Map.Lightning_02.BeamStart.y);
	OutputDataFloat(0, 70, TmpWriteIndex, Context.Map.Lightning_02.BeamStart.z);
	OutputDataFloat(0, 71, TmpWriteIndex, Context.Map.Lightning_02.BeamStartEndLength);
	OutputDataFloat(0, 72, TmpWriteIndex, Context.Map.Lightning_02.BeamStartTangent.x);
	OutputDataFloat(0, 73, TmpWriteIndex, Context.Map.Lightning_02.BeamStartTangent.y);
	OutputDataFloat(0, 74, TmpWriteIndex, Context.Map.Lightning_02.BeamStartTangent.z);
	OutputDataFloat(0, 75, TmpWriteIndex, Context.Map.Lightning_02.BeamVector.x);
	OutputDataFloat(0, 76, TmpWriteIndex, Context.Map.Lightning_02.BeamVector.y);
	OutputDataFloat(0, 77, TmpWriteIndex, Context.Map.Lightning_02.BeamVector.z);
	OutputDataInt(0, 78, TmpWriteIndex, Context.Map.Lightning_02.Complexity);
	OutputDataFloat(0, 79, TmpWriteIndex, Context.Map.Lightning_02.CurrentLoopDuration);
	OutputDataInt(0, 80, TmpWriteIndex, Context.Map.Lightning_02.DustParticlesQuantity);
	OutputDataInt(0, 81, TmpWriteIndex, Context.Map.Lightning_02.ExecutionState);
	OutputDataInt(0, 82, TmpWriteIndex, Context.Map.Lightning_02.ExecutionStateSource);
	OutputDataFloat(0, 83, TmpWriteIndex, Context.Map.Lightning_02.LifeTime);
	OutputDataBool(0, 84, TmpWriteIndex, Context.Map.Lightning_02.LocalSpace);
	OutputDataInt(0, 85, TmpWriteIndex, Context.Map.Lightning_02.LoopCount);
	OutputDataFloat(0, 86, TmpWriteIndex, Context.Map.Lightning_02.LoopedAge);
	OutputDataFloat(0, 87, TmpWriteIndex, Context.Map.Lightning_02.NormalizedLoopAge);
	OutputDataFloat(0, 88, TmpWriteIndex, Context.Map.Lightning_02.RandomVector.x);
	OutputDataFloat(0, 89, TmpWriteIndex, Context.Map.Lightning_02.RandomVector.y);
	OutputDataFloat(0, 90, TmpWriteIndex, Context.Map.Lightning_02.RandomVector.z);
	OutputDataFloat(0, 91, TmpWriteIndex, Context.Map.Lightning_02.Scalability.DistanceFraction);
	OutputDataInt(0, 92, TmpWriteIndex, Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 93, TmpWriteIndex, Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 94, TmpWriteIndex, Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 95, TmpWriteIndex, Context.Map.Lightning_02.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 96, TmpWriteIndex, Context.Map.Lightning_02.UseBeamTangents);
	OutputDataFloat(0, 97, TmpWriteIndex, Context.Map.Lightning_03.Age);
	OutputDataFloat(0, 98, TmpWriteIndex, Context.Map.Lightning_03.BeamCurve2);
	OutputDataFloat(0, 99, TmpWriteIndex, Context.Map.Lightning_03.BeamDirection.x);
	OutputDataFloat(0, 100, TmpWriteIndex, Context.Map.Lightning_03.BeamDirection.y);
	OutputDataFloat(0, 101, TmpWriteIndex, Context.Map.Lightning_03.BeamDirection.z);
	OutputDataFloat(0, 102, TmpWriteIndex, Context.Map.Lightning_03.BeamEnd.x);
	OutputDataFloat(0, 103, TmpWriteIndex, Context.Map.Lightning_03.BeamEnd.y);
	OutputDataFloat(0, 104, TmpWriteIndex, Context.Map.Lightning_03.BeamEnd.z);
	OutputDataFloat(0, 105, TmpWriteIndex, Context.Map.Lightning_03.BeamEndTangent.x);
	OutputDataFloat(0, 106, TmpWriteIndex, Context.Map.Lightning_03.BeamEndTangent.y);
	OutputDataFloat(0, 107, TmpWriteIndex, Context.Map.Lightning_03.BeamEndTangent.z);
	OutputDataInt(0, 108, TmpWriteIndex, Context.Map.Lightning_03.BeamID);
	OutputDataFloat(0, 109, TmpWriteIndex, Context.Map.Lightning_03.BeamStart.x);
	OutputDataFloat(0, 110, TmpWriteIndex, Context.Map.Lightning_03.BeamStart.y);
	OutputDataFloat(0, 111, TmpWriteIndex, Context.Map.Lightning_03.BeamStart.z);
	OutputDataFloat(0, 112, TmpWriteIndex, Context.Map.Lightning_03.BeamStartEndLength);
	OutputDataFloat(0, 113, TmpWriteIndex, Context.Map.Lightning_03.BeamStartTangent.x);
	OutputDataFloat(0, 114, TmpWriteIndex, Context.Map.Lightning_03.BeamStartTangent.y);
	OutputDataFloat(0, 115, TmpWriteIndex, Context.Map.Lightning_03.BeamStartTangent.z);
	OutputDataFloat(0, 116, TmpWriteIndex, Context.Map.Lightning_03.BeamVector.x);
	OutputDataFloat(0, 117, TmpWriteIndex, Context.Map.Lightning_03.BeamVector.y);
	OutputDataFloat(0, 118, TmpWriteIndex, Context.Map.Lightning_03.BeamVector.z);
	OutputDataInt(0, 119, TmpWriteIndex, Context.Map.Lightning_03.Complexity);
	OutputDataFloat(0, 120, TmpWriteIndex, Context.Map.Lightning_03.CurrentLoopDuration);
	OutputDataInt(0, 121, TmpWriteIndex, Context.Map.Lightning_03.DustParticlesQuantity);
	OutputDataInt(0, 122, TmpWriteIndex, Context.Map.Lightning_03.ExecutionState);
	OutputDataInt(0, 123, TmpWriteIndex, Context.Map.Lightning_03.ExecutionStateSource);
	OutputDataFloat(0, 124, TmpWriteIndex, Context.Map.Lightning_03.LifeTime);
	OutputDataBool(0, 125, TmpWriteIndex, Context.Map.Lightning_03.LocalSpace);
	OutputDataInt(0, 126, TmpWriteIndex, Context.Map.Lightning_03.LoopCount);
	OutputDataFloat(0, 127, TmpWriteIndex, Context.Map.Lightning_03.LoopedAge);
	OutputDataFloat(0, 128, TmpWriteIndex, Context.Map.Lightning_03.NormalizedLoopAge);
	OutputDataFloat(0, 129, TmpWriteIndex, Context.Map.Lightning_03.RandomVector.x);
	OutputDataFloat(0, 130, TmpWriteIndex, Context.Map.Lightning_03.RandomVector.y);
	OutputDataFloat(0, 131, TmpWriteIndex, Context.Map.Lightning_03.RandomVector.z);
	OutputDataFloat(0, 132, TmpWriteIndex, Context.Map.Lightning_03.Scalability.DistanceFraction);
	OutputDataInt(0, 133, TmpWriteIndex, Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 134, TmpWriteIndex, Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 135, TmpWriteIndex, Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 136, TmpWriteIndex, Context.Map.Lightning_03.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 137, TmpWriteIndex, Context.Map.Lightning_03.UseBeamTangents);
	OutputDataFloat(0, 138, TmpWriteIndex, Context.Map.Sparks_01.Age);
	OutputDataFloat(0, 139, TmpWriteIndex, Context.Map.Sparks_01.AlphaScale);
	OutputDataFloat(0, 140, TmpWriteIndex, Context.Map.Sparks_01.CurrentLoopDuration);
	OutputDataInt(0, 141, TmpWriteIndex, Context.Map.Sparks_01.ExecutionState);
	OutputDataInt(0, 142, TmpWriteIndex, Context.Map.Sparks_01.ExecutionStateSource);
	OutputDataBool(0, 143, TmpWriteIndex, Context.Map.Sparks_01.LocalSpace);
	OutputDataInt(0, 144, TmpWriteIndex, Context.Map.Sparks_01.LoopCount);
	OutputDataFloat(0, 145, TmpWriteIndex, Context.Map.Sparks_01.LoopedAge);
	OutputDataFloat(0, 146, TmpWriteIndex, Context.Map.Sparks_01.NormalizedLoopAge);
	OutputDataFloat(0, 147, TmpWriteIndex, Context.Map.Sparks_01.Scalability.DistanceFraction);
	OutputDataInt(0, 148, TmpWriteIndex, Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 149, TmpWriteIndex, Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 150, TmpWriteIndex, Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 151, TmpWriteIndex, Context.Map.Sparks_01.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 152, TmpWriteIndex, Context.Map.Sparks_02.Age);
	OutputDataFloat(0, 153, TmpWriteIndex, Context.Map.Sparks_02.AlphaScale);
	OutputDataFloat(0, 154, TmpWriteIndex, Context.Map.Sparks_02.CurrentLoopDuration);
	OutputDataInt(0, 155, TmpWriteIndex, Context.Map.Sparks_02.ExecutionState);
	OutputDataInt(0, 156, TmpWriteIndex, Context.Map.Sparks_02.ExecutionStateSource);
	OutputDataBool(0, 157, TmpWriteIndex, Context.Map.Sparks_02.LocalSpace);
	OutputDataInt(0, 158, TmpWriteIndex, Context.Map.Sparks_02.LoopCount);
	OutputDataFloat(0, 159, TmpWriteIndex, Context.Map.Sparks_02.LoopedAge);
	OutputDataFloat(0, 160, TmpWriteIndex, Context.Map.Sparks_02.NormalizedLoopAge);
	OutputDataFloat(0, 161, TmpWriteIndex, Context.Map.Sparks_02.Scalability.DistanceFraction);
	OutputDataInt(0, 162, TmpWriteIndex, Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 163, TmpWriteIndex, Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 164, TmpWriteIndex, Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 165, TmpWriteIndex, Context.Map.Sparks_02.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataFloat(0, 166, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 167, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 168, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 169, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 170, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 171, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 172, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 173, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
