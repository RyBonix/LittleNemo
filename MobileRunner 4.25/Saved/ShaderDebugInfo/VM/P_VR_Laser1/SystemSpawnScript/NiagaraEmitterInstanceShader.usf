#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Dust_Particles_RandomVector_VectorScale;
	float3 Constants_Dust_Particles_RandomVector_ConstraintVector;
	int Constants_Dust_Particles_RandomVector_RandomSeed;
	float Constants_Dust_Particles_UniformRangedFloat001_Maximum;
	int Constants_Dust_Particles_UniformRangedFloat001_RandomSeed;
	int Emitter_RandomSeed;
}

struct FParamMap0_VectorFromFloat002
{
	float Value;
};

struct FParamMap0_VectorFromFloat001
{
	float Value;
};

struct FParamMap0_VectorFromFloat
{
	float Value;
};

struct FParamMap0_Vector2DFromFloat001
{
	float Value;
};

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_Vector2DFromCurve
{
	float CurveIndex;
	float2 ScaleCurve;
};

struct FParamMap0_User_Dust_Particles
{
	int RandomSeed;
};

struct FParamMap0_User
{
	float BeamCurveMinFactor;
	float4 Color;
	float ColorBoost;
	float CurvePower;
	FParamMap0_User_Dust_Particles Dust_Particles;
	float3 End;
	float3 ImpactNormal;
	float LaserPower;
	float LaserWidth;
	float Power;
	float Quantity;
	float Size;
};

struct FParamMap0_UpdateAge
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat004
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat002
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat001
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float CollisionDistanceToCollision;
	float CollisionFriction;
	bool CollisionIsResting;
	float3 CollisionNormal;
	float3 CollisionParticleRelativeCollisionLocation;
	float3 CollisionParticleWorldPosition;
	float CollisionRestitution;
	float CollisionSize;
	bool CollisionValid;
	float3 CollisionVelocity;
	float3 CollisionWorldPosition;
	float3 MeshScaleFactor;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	bool SpawningbCanEverSpawn;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_Subtract_Vector001
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Float
{
	float A;
	float B;
};

struct FParamMap0_SpriteSizeScaleBySpeed
{
	float2 InitialSpriteSize;
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	bool SampleScaleFactorByCurve;
	float3 SourceVelocity;
	float VelocityThreshold;
};

struct FParamMap0_SpriteSizeScale
{
	float2 InitialSpriteSize;
	float2 ScaleFactor;
};

struct FParamMap0_SphereLocation
{
	int CoordinateSpace;
	bool FixedRandomSeed;
	bool HemisphereX;
	bool HemisphereY;
	bool HemisphereZ;
	float3 NonUniformScale;
	bool NormalizeThickness;
	float3 Offset;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	int SpawnGroupMask;
	float3 SphereOrigin;
	float SphereRadius;
	int SurfaceExpansionMode;
	float SurfaceOnlyBandThickness;
};

struct FParamMap0_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnRate;
};

struct FParamMap0_SpawnBurst_Instantaneous
{
	float Age;
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_SpawnBeam
{
	float SplinePositionErrorThreshold;
};

struct FParamMap0_Sparks_Start_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_Sparks_Start_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Sparks_Start
{
	float Age;
	float AlphaScale;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Sparks_Start_Scalability Scalability;
	FParamMap0_Sparks_Start_SpawnRate SpawnRate;
};

struct FParamMap0_Sparks_End_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_Sparks_End_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Sparks_End
{
	float Age;
	float AlphaScale;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Sparks_End_Scalability Scalability;
	FParamMap0_Sparks_End_SpawnRate SpawnRate;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22
{
	FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Particles Particles;
};

struct FParamMap0_SetVariables_B069FF884AF6699EBD26DBA1C81A7994_Dust_Particles
{
	float BeamCurve2;
	float3 RandomVector;
};

struct FParamMap0_SetVariables_B069FF884AF6699EBD26DBA1C81A7994
{
	FParamMap0_SetVariables_B069FF884AF6699EBD26DBA1C81A7994_Dust_Particles Dust_Particles;
};

struct FParamMap0_SetVariables_7D57B2E24F50E6866938178BEE961CBE_Particles
{
	float3 RandomMovement;
};

struct FParamMap0_SetVariables_7D57B2E24F50E6866938178BEE961CBE
{
	FParamMap0_SetVariables_7D57B2E24F50E6866938178BEE961CBE_Particles Particles;
};

struct FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA
{
	FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA_Particles Particles;
};

struct FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Particles
{
	float3 RandomMovement;
};

struct FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7
{
	FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Particles Particles;
};

struct FParamMap0_SetVariables_32B3FD5746D30F7CAD4ACDBF13D70D56_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_32B3FD5746D30F7CAD4ACDBF13D70D56
{
	FParamMap0_SetVariables_32B3FD5746D30F7CAD4ACDBF13D70D56_Particles Particles;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_RibbonWidthScale
{
	float RibbonWidthScale;
};

struct FParamMap0_RandomVector003
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector002
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector001
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float RibbonWidth;
	float3 Scale;
	float2 SpriteSize;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse001
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision
{
	FParamMap0_Particles_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Particles_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
};

struct FParamMap0_Particles
{
	float Age;
	float3 BeamSplineBinormal;
	float3 BeamSplineNormal;
	float3 BeamSplineTangent;
	FParamMap0_Particles_Collision Collision;
	float4 Color;
	float4 DynamicMaterialParameter;
	bool HasCollided;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	int NumberOfCollisions;
	float ParticleOrder;
	float3 Position;
	float3 PreviousVelocity;
	float3 RandomMovement;
	float3 RandomPointCylinder;
	float RestCounter;
	NiagaraID RibbonID;
	float RibbonLinkOrder;
	float RibbonTwist;
	float RibbonWidth;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_UpdateAge
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_SphereLocation
{
	float3 SphereNormal;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001
{
	float CollisionPenetrationDistance;
	bool ModuleDepthBasedCollisionParticleOccluded;
	bool ModuleParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse
{
	float CollisionPenetrationDistance;
	bool ModuleDepthBasedCollisionParticleOccluded;
	bool ModuleParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision
{
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool CollisionValid;
	float3 ModuleCollision1Normal;
	bool ModuleCollision1Valid;
	float3 ModuleCollision2Normal;
	bool ModuleCollision2Valid;
	float3 ModuleCombinedCollisionNormal;
	float3 TempPreviousForce;
	float3 TempPreviousPosition;
	float3 TempPreviousVelocity;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_Collision Collision;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_OUTPUT_VAR_SphereLocation SphereLocation;
	FParamMap0_OUTPUT_VAR_UpdateAge UpdateAge;
};

struct FParamMap0_NormalizeVector
{
	float3 VectorToNormalize;
};

struct FParamMap0_NormalizedAngleToDegrees001
{
	float NormalizedAngle;
};

struct FParamMap0_NMS_DustParticlesLocation
{
	float3 EndLocation;
	float Power;
	float3 StartLocation;
};

struct FParamMap0_NMS_BeamComplexity
{
	float3 EndLocation;
	float3 StartLocation;
};

struct FParamMap0_Multiply_VectorByFloat005
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat002
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat001
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_Float002
{
	float A;
	float B;
};

struct FParamMap0_Multiply_Float
{
	float A;
	float B;
};

struct FParamMap0_MeshSizeScale
{
	float3 InitialMeshScale;
	float3 ScaleFactor;
};

struct FParamMap0_Local_SpriteSizeScaleBySpeed
{
	float NormalizedVelocityRange;
};

struct FParamMap0_Local_SphereLocation
{
	float3 SphereVector;
};

struct FParamMap0_Local_SpawnRate
{
	float InterpStartDT;
	float IntervalDT;
	int SpawnCount;
	float SpawnRate;
};

struct FParamMap0_Local_SpawnBeam
{
	float3 BeamDirection;
	float3 BeamVector;
	float NormalizedExecIndex;
	float StartEndVecLength;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_InitialMeshOrientation
{
	bool Temp;
};

struct FParamMap0_Local_EmitterState_EmitterChangeState005
{
	bool EmitterCanChangeState;
};

struct FParamMap0_Local_EmitterState_EmitterChangeState003
{
	bool EmitterCanChangeState;
};

struct FParamMap0_Local_EmitterState_EmitterChangeState002
{
	bool EmitterCanChangeState;
};

struct FParamMap0_Local_EmitterState001_EmitterChangeState005
{
	bool EmitterCanChangeState;
};

struct FParamMap0_Local_EmitterState001_EmitterChangeState003
{
	bool EmitterCanChangeState;
};

struct FParamMap0_Local_EmitterState001_EmitterChangeState002
{
	bool EmitterCanChangeState;
};

struct FParamMap0_Local_EmitterState001
{
	FParamMap0_Local_EmitterState001_EmitterChangeState002 EmitterChangeState002;
	FParamMap0_Local_EmitterState001_EmitterChangeState003 EmitterChangeState003;
	FParamMap0_Local_EmitterState001_EmitterChangeState005 EmitterChangeState005;
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_EmitterState
{
	FParamMap0_Local_EmitterState_EmitterChangeState002 EmitterChangeState002;
	FParamMap0_Local_EmitterState_EmitterChangeState003 EmitterChangeState003;
	FParamMap0_Local_EmitterState_EmitterChangeState005 EmitterChangeState005;
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_CurlNoiseForce
{
	float AgeAdvancement;
	float DeterministicOffset;
	float Falloff;
	float3 SampledNoise;
	float3 SamplePosition;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse001
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision
{
	FParamMap0_Local_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Local_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	float ModuleParticleRadius;
	bool UpdateMeshRotation;
};

struct FParamMap0_Local_BeamEmitterSetup
{
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
};

struct FParamMap0_Local_AddVelocityInCone
{
	float3 ConeVector;
	float DotBetweenConeVectorAndAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Local_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_Local_Collision Collision;
	FParamMap0_Local_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_EmitterState001 EmitterState001;
	FParamMap0_Local_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SpawnBeam SpawnBeam;
	FParamMap0_Local_SpawnRate SpawnRate;
	FParamMap0_Local_SphereLocation SphereLocation;
	FParamMap0_Local_SpriteSizeScaleBySpeed SpriteSizeScaleBySpeed;
};

struct FParamMap0_Laser_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_Laser_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Laser
{
	float Age;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Laser_Scalability Scalability;
	FParamMap0_Laser_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	bool UseBeamTangents;
};

struct FParamMap0_InitialMeshOrientation
{
	float3 OrientationAxis;
	int OrientationCoordinateSpace;
	float3 OrientationVector;
	float3 Rotation;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_Hemisphere_Lightning_Start_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_Hemisphere_Lightning_Start_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Hemisphere_Lightning_Start
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Hemisphere_Lightning_Start_Scalability Scalability;
	FParamMap0_Hemisphere_Lightning_Start_SpawnRate SpawnRate;
};

struct FParamMap0_Hemisphere_Lightning_End_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_Hemisphere_Lightning_End_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Hemisphere_Lightning_End
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_Hemisphere_Lightning_End_Scalability Scalability;
	FParamMap0_Hemisphere_Lightning_End_SpawnRate SpawnRate;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve006
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve005
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve003
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	int TickCount;
};

struct FParamMap0_Engine_Sparks_Start
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Sparks_End
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Owner
{
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float3 SystemXAxis;
};

struct FParamMap0_Engine_Laser
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Hemisphere_Lightning_Start
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Hemisphere_Lightning_End
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine_Dust_Particles
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Dust_Particles Dust_Particles;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	FParamMap0_Engine_Hemisphere_Lightning_End Hemisphere_Lightning_End;
	FParamMap0_Engine_Hemisphere_Lightning_Start Hemisphere_Lightning_Start;
	float InverseDeltaTime;
	FParamMap0_Engine_Laser Laser;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_Sparks_End Sparks_End;
	FParamMap0_Engine_Sparks_Start Sparks_Start;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_EmitterState001
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_DynamicMaterialParameters
{
	float Index0Param1;
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
	bool Param0WriteEnabled;
	bool Param1WriteEnabled;
	bool Param2WriteEnabled;
	bool Param3WriteEnabled;
};

struct FParamMap0_Dust_Particles_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_Dust_Particles_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_Dust_Particles
{
	float Age;
	float BeamCurve2;
	int Complexity;
	float CurrentLoopDuration;
	int DustParticlesQuantity;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	float3 RandomVector;
	FParamMap0_Dust_Particles_Scalability Scalability;
	FParamMap0_Dust_Particles_SpawnRate SpawnRate;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CurlNoiseForce
{
	float CurlNoiseConeMaskAngle;
	float3 CurlNoiseConeMaskAxis;
	float CurlNoiseConeMaskFalloffAngle;
	float NoiseFrequency;
	float NoiseStrength;
	float3 PanNoiseField;
	int RandomSeed;
	float3 SamplePosition;
};

struct FParamMap0_CrossProduct001
{
	bool NormalizeIncomingVectors;
	float3 VectorA;
	float3 VectorB;
};

struct FParamMap0_CrossProduct
{
	bool NormalizeIncomingVectors;
	float3 VectorA;
	float3 VectorB;
};

struct FParamMap0_Constants_Dust_Particles_UniformRangedFloat001
{
	float Maximum;
	int RandomSeed;
};

struct FParamMap0_Constants_Dust_Particles_RandomVector
{
	float3 ConstraintVector;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Constants_Dust_Particles
{
	FParamMap0_Constants_Dust_Particles_RandomVector RandomVector;
	FParamMap0_Constants_Dust_Particles_UniformRangedFloat001 UniformRangedFloat001;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Dust_Particles Dust_Particles;
};

struct FParamMap0_ColorFromCurve
{
	float CurveIndex;
};

struct FParamMap0_Color
{
	float4 Color;
	float ScaleAlpha;
	float3 ScaleColor;
};

struct FParamMap0_Collision_CollisionQueryAndResponse001
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision_CollisionQueryAndResponse
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision
{
	float AdvancedAgingRate;
	bool CollisionEnabled;
	FParamMap0_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool ControlRestStateViaSurfaceNormal;
	bool CorrectInterpenetration;
	float CPUTraceVectorLengthMultiplier;
	bool EnableRestState;
	float Friction;
	float FrictionDuringaBounce;
	float MaxCPUTraceLength;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	bool RandomizeCollisionNormalVector;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_BeamWidth
{
	float BeamTwistAmount;
	float BeamWidth;
};

struct FParamMap0_BeamEmitterSetup
{
	bool AbsoluteEndTangent;
	bool AbsoluteStartTangent;
	float3 BeamEnd;
	float3 BeamEndTangent;
	float3 BeamStart;
	float3 BeamStartTangent;
	bool UseBeamTangents;
};

struct FParamMap0_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	int ConeAxisCoordinateSpace;
	bool UseVelocityFalloffOnConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
	float VelocityStrength;
};

struct FParamMap0_Add_Vector005
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector004
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector001
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0
{
	FParamMap0_Add_Vector Add_Vector;
	FParamMap0_Add_Vector001 Add_Vector001;
	FParamMap0_Add_Vector004 Add_Vector004;
	FParamMap0_Add_Vector005 Add_Vector005;
	FParamMap0_AddVelocityInCone AddVelocityInCone;
	FParamMap0_BeamEmitterSetup BeamEmitterSetup;
	FParamMap0_BeamWidth BeamWidth;
	FParamMap0_Collision Collision;
	FParamMap0_Color Color;
	FParamMap0_ColorFromCurve ColorFromCurve;
	FParamMap0_Constants Constants;
	FParamMap0_CrossProduct CrossProduct;
	FParamMap0_CrossProduct001 CrossProduct001;
	FParamMap0_CurlNoiseForce CurlNoiseForce;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_Dust_Particles Dust_Particles;
	FParamMap0_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_EmitterState001 EmitterState001;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_FloatFromCurve003 FloatFromCurve003;
	FParamMap0_FloatFromCurve005 FloatFromCurve005;
	FParamMap0_FloatFromCurve006 FloatFromCurve006;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_Hemisphere_Lightning_End Hemisphere_Lightning_End;
	FParamMap0_Hemisphere_Lightning_Start Hemisphere_Lightning_Start;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_InitialMeshOrientation InitialMeshOrientation;
	FParamMap0_Laser Laser;
	FParamMap0_Local Local;
	FParamMap0_MeshSizeScale MeshSizeScale;
	FParamMap0_Multiply_Float Multiply_Float;
	FParamMap0_Multiply_Float002 Multiply_Float002;
	FParamMap0_Multiply_VectorByFloat Multiply_VectorByFloat;
	FParamMap0_Multiply_VectorByFloat001 Multiply_VectorByFloat001;
	FParamMap0_Multiply_VectorByFloat002 Multiply_VectorByFloat002;
	FParamMap0_Multiply_VectorByFloat005 Multiply_VectorByFloat005;
	FParamMap0_NMS_BeamComplexity NMS_BeamComplexity;
	FParamMap0_NMS_DustParticlesLocation NMS_DustParticlesLocation;
	FParamMap0_NormalizedAngleToDegrees001 NormalizedAngleToDegrees001;
	FParamMap0_NormalizeVector NormalizeVector;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_RandomVector RandomVector;
	FParamMap0_RandomVector001 RandomVector001;
	FParamMap0_RandomVector002 RandomVector002;
	FParamMap0_RandomVector003 RandomVector003;
	FParamMap0_RibbonWidthScale RibbonWidthScale;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SetVariables_32B3FD5746D30F7CAD4ACDBF13D70D56 SetVariables_32B3FD5746D30F7CAD4ACDBF13D70D56;
	FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7 SetVariables_37EFE94048FF0092BAD12B9767DEC3B7;
	FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA SetVariables_39F275A84050437F282DE79201AD7DEA;
	FParamMap0_SetVariables_7D57B2E24F50E6866938178BEE961CBE SetVariables_7D57B2E24F50E6866938178BEE961CBE;
	FParamMap0_SetVariables_B069FF884AF6699EBD26DBA1C81A7994 SetVariables_B069FF884AF6699EBD26DBA1C81A7994;
	FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22 SetVariables_B8B0EADE49895CE1E100F6AAB756CA22;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Sparks_End Sparks_End;
	FParamMap0_Sparks_Start Sparks_Start;
	FParamMap0_SpawnBeam SpawnBeam;
	FParamMap0_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_SpawnRate SpawnRate;
	FParamMap0_SphereLocation SphereLocation;
	FParamMap0_SpriteSizeScale SpriteSizeScale;
	FParamMap0_SpriteSizeScaleBySpeed SpriteSizeScaleBySpeed;
	FParamMap0_Subtract_Float Subtract_Float;
	FParamMap0_Subtract_Vector Subtract_Vector;
	FParamMap0_Subtract_Vector001 Subtract_Vector001;
	FParamMap0_System System;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_UpdateAge UpdateAge;
	FParamMap0_User User;
	FParamMap0_Vector2DFromCurve Vector2DFromCurve;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
	FParamMap0_Vector2DFromFloat001 Vector2DFromFloat001;
	FParamMap0_VectorFromFloat VectorFromFloat;
	FParamMap0_VectorFromFloat001 VectorFromFloat001;
	FParamMap0_VectorFromFloat002 VectorFromFloat002;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void Hemisphere_Lightning_End_Func_(inout FSimulationContext Context);
void Hemisphere_Lightning_Start_Func_(inout FSimulationContext Context);
void Sparks_End_Func_(inout FSimulationContext Context);
void Sparks_Start_Func_(inout FSimulationContext Context);
void SimulationPosition001_Dust_Particles_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void Subtract_Vector_Dust_Particles_Func_(out float3 Out_Result, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void RandomVector_NF_TransformVector_Dust_Particles_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector_Dust_Particles_Func_(out float3 Out_RandomVector, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat001_Dust_Particles_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void CrossProduct_Dust_Particles_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context);
void SetVariables_B069FF884AF6699EBD26DBA1C81A7994_Dust_Particles_Func_(inout FSimulationContext Context);
void Dust_Particles_Func_(inout FSimulationContext Context);
void Laser_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void Hemisphere_Lightning_End_Func_(inout FSimulationContext Context)
{

}

void Hemisphere_Lightning_Start_Func_(inout FSimulationContext Context)
{

}

void Sparks_End_Func_(inout FSimulationContext Context)
{

}

void Sparks_Start_Func_(inout FSimulationContext Context)
{

}

void SimulationPosition001_Dust_Particles_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant88 = false;
	float3 Constant89 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant88)
	{
	Vector_IfResult = Constant89;
	}
	else
	{
	Vector_IfResult = Context.Map.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult;
}

void Subtract_Vector_Dust_Particles_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result = Context.Map.Subtract_Vector.A - Context.Map.Subtract_Vector.B;
	Out_Result = Result;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant95 = 0;
	bool Result1 = NiagaraAll(In_SourceSpace == Constant95);
	int Constant96 = 0;
	bool Result2 = NiagaraAll(In_DestinationSpace == Constant96);
	bool Result3 = Result1 && Result2;
	int Constant97 = 1;
	bool Result4 = NiagaraAll(In_SourceSpace == Constant97);
	int Constant98 = 1;
	bool Result5 = NiagaraAll(In_DestinationSpace == Constant98);
	bool Result6 = Result4 && Result5;
	bool Result7 = Result3 || Result6;
	int Constant99 = 2;
	bool Result8 = NiagaraAll(In_SourceSpace == Constant99);
	int Constant100 = 2;
	bool Result9 = NiagaraAll(In_DestinationSpace == Constant100);
	bool Result10 = Result8 && Result9;
	bool Result11 = Result7 || Result10;
	bool Result12 = Result1 && Result9;
	bool Result13 = Result8 && Result2;
	bool Result14 = Result12 || Result13;
	bool Result15 = In_bLocalSpace && Result14;
	bool Result16 = Result11 || Result15;
	bool Result17 = !In_bLocalSpace;
	bool Result18 = Result1 && Result5;
	bool Result19 = Result4 && Result2;
	bool Result20 = Result18 || Result19;
	bool Result21 = Result17 && Result20;
	bool Result22 = Result16 || Result21;
	bool Result23 = In_bLocalSpace && Result18;
	bool Result24 = Result8 && Result5;
	bool Result25 = Result23 || Result24;
	bool Result26 = Result17 && Result13;
	bool Result27 = Result25 || Result26;
	float4x4 Matrix_IfResult1;
	if(Result27)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result22;
	Out_OutTransform = Matrix_IfResult1;
}

void RandomVector_NF_TransformVector_Dust_Particles_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant94 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant94, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result28 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult1;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult1 = In_InVector;
	}
	else
	{
	Vector_IfResult1 = Result28;
	}
	Out_OutVector = Vector_IfResult1;
}

void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant113 = false;
	int Constant114 = 0;
	bool Result29 = NiagaraAll(In_RandomnessMode == Constant114);
	bool Result30 = Constant113 && Result29;
	int Constant115 = 1;
	bool Result31 = NiagaraAll(In_RandomnessMode == Constant115);
	bool Result32 = Result30 || Result31;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.User.Dust_Particles.RandomSeed;
	}
	int Constant116 = 0;
	int Constant117 = 0;
	int Constant118 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant116;
	Seed3_IfResult = Constant117;
	}
	else
	{
	Seed1_IfResult = Constant118;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant119 = -1;
	int Constant120 = -1;
	int Constant121 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result32)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant119;
	Seed2_IfResult1 = Constant120;
	Seed3_IfResult1 = Constant121;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result32;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant109 = (0);
	bool Constant110 = false;
	int Constant111 = 0;
	int Constant112 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant109, In_OverrideSeed, Constant111, Constant112, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms, Context);
	float2 Result33 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed3;
	float2 Result34 = rand_float(Result33, Seed1, Seed2, Seed3);
	float2 Result35 = rand_float(Result33);
	float2 Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result34;
	}
	else
	{
	Random_IfResult = Result35;
	}
	float2 Result36 = In_Min + Random_IfResult;
	Out_Result = Result36;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant127 = (0);
	bool Constant128 = false;
	int Constant129 = 0;
	int Constant130 = (0);
	bool Constant131 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant127, In_OverrideSeed, Constant129, Constant130, Constant131, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms1, Context);
	float Result44 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo1.Seed3;
	float Result45 = rand_float(Result44, Seed11, Seed21, Seed31);
	float Result46 = rand_float(Result44);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result45;
	}
	else
	{
	Random_IfResult1 = Result46;
	}
	float Result47 = In_Min + Random_IfResult1;
	Out_Result = Result47;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant107 = float2(0,-1);
	float2 Constant108 = float2(6.28319,1);
	float2 RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant107, Constant108, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = RandomRangeFloat_Func_Output_Result.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result.y;
	float Result37 = cos(Phi);
	float Result38 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result39 = 1 - Result38;
	float Result40 = sqrt(Result39);
	float Result41 = Result37 * Result40;
	float Result42 = sin(Phi);
	float Result43 = Result42 * Result40;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result41;
	PositionOnSphere.y = Result43;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant122 = 0;
	float Constant123 = 6.28319;
	int Constant124 = -1;
	int Constant125 = 0;
	bool Constant126 = false;
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Constant122, Constant123, Constant124, Constant125, Constant126, RandomRangeFloat_Func_Output_Result1, Context);
	float Result48 = cos(RandomRangeFloat_Func_Output_Result1);
	float Result49 = sin(RandomRangeFloat_Func_Output_Result1);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result48;
	PositionOnCircle.y = Result49;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomVector_Dust_Particles_Func_(out float3 Out_RandomVector, inout FSimulationContext Context)
{
	bool Constant90 = false;
	Context.Map.RandomVector.ConstraintoAxis = Constant90;
	int Constant91 = 2;
	int Constant92 = 0;
	bool Constant93 = false;
	float3 RandomVector_NF_TransformVector_Dust_Particles_Func_Output_OutVector;
	RandomVector_NF_TransformVector_Dust_Particles_Func_(Context.Map.Constants.Dust_Particles.RandomVector.ConstraintVector, Constant91, Constant92, Constant93, RandomVector_NF_TransformVector_Dust_Particles_Func_Output_OutVector, Context);
	bool Constant101 = false;
	Context.Map.RandomVector.OverrideRandomness = Constant101;
	int Constant102 = 0;
	Context.Map.RandomVector.RandomnessMode = Constant102;
	bool Constant103 = false;
	Context.Map.RandomVector.OverrideSeed = Constant103;
	bool Constant104 = false;
	Context.Map.RandomVector.FixedRandomSeed = Constant104;
	int Constant105 = 0;
	bool Constant106 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.Map.RandomVector.OverrideRandomness)
	{
	Mode_IfResult = Context.Map.RandomVector.RandomnessMode;
	Override_IfResult = Context.Map.RandomVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant105;
	Override_IfResult = Constant106;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(Context.Map.Constants.Dust_Particles.RandomVector.RandomSeed, Mode_IfResult, Override_IfResult, Context.Map.RandomVector.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	float Result50 = dot(RandomVector_NF_TransformVector_Dust_Particles_Func_Output_OutVector,RandomUnitVector_Func_Output_UnitVector3D);
	float Result51 = sign(Result50);
	float3 Result52 = Result51 * RandomUnitVector_Func_Output_UnitVector3D;
	float3 Vector_IfResult2;
	if(Context.Map.RandomVector.ConstraintoAxis)
	{
	Vector_IfResult2 = Result52;
	}
	else
	{
	Vector_IfResult2 = RandomUnitVector_Func_Output_UnitVector3D;
	}
	float3 Result53 = Context.Map.Constants.Dust_Particles.RandomVector.VectorScale * Vector_IfResult2;
	Out_RandomVector = Result53;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant138 = (0);
	bool Constant139 = false;
	int Constant140 = 0;
	int Constant141 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant138, In_OverrideSeed, Constant140, Constant141, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms2, Context);
	float Result54 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo2.Seed3;
	float Result55 = rand_float(Result54, Seed12, Seed22, Seed32);
	float Result56 = rand_float(Result54);
	float Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result55;
	}
	else
	{
	Random_IfResult2 = Result56;
	}
	float Result57 = In_Min + Random_IfResult2;
	Out_Result = Result57;
}

void UniformRangedFloat001_Dust_Particles_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	bool Constant132 = false;
	Context.Map.UniformRangedFloat001.OverrideRandomness = Constant132;
	int Constant133 = 0;
	Context.Map.UniformRangedFloat001.RandomnessMode = Constant133;
	bool Constant134 = false;
	Context.Map.UniformRangedFloat001.OverrideSeed = Constant134;
	bool Constant135 = false;
	Context.Map.UniformRangedFloat001.FixedRandomSeed = Constant135;
	int Constant136 = 0;
	bool Constant137 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.Map.UniformRangedFloat001.OverrideRandomness)
	{
	Mode_IfResult1 = Context.Map.UniformRangedFloat001.RandomnessMode;
	Override_IfResult1 = Context.Map.UniformRangedFloat001.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant136;
	Override_IfResult1 = Constant137;
	}
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Context.Map.UniformRangedFloat001.Minimum, Context.Map.Constants.Dust_Particles.UniformRangedFloat001.Maximum, Context.Map.Constants.Dust_Particles.UniformRangedFloat001.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.Map.UniformRangedFloat001.FixedRandomSeed, RandomRangeFloat_Func_Output_Result2, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result2;
}

void CrossProduct_Dust_Particles_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context)
{
	bool Constant142 = true;
	Context.Map.CrossProduct.NormalizeIncomingVectors = Constant142;
	float3 Result58 = normalize(Context.Map.CrossProduct.VectorA);
	float3 Result59 = normalize(Context.Map.CrossProduct.VectorB);
	float3 VectorA_IfResult;
	float3 VectorB_IfResult;
	if(Context.Map.CrossProduct.NormalizeIncomingVectors)
	{
	VectorA_IfResult = Result58;
	VectorB_IfResult = Result59;
	}
	else
	{
	VectorA_IfResult = Context.Map.CrossProduct.VectorA;
	VectorB_IfResult = Context.Map.CrossProduct.VectorB;
	}
	float3 Result60 = cross(VectorA_IfResult,VectorB_IfResult);
	Out_CrossedVector = Result60;
}

void SetVariables_B069FF884AF6699EBD26DBA1C81A7994_Dust_Particles_Func_(inout FSimulationContext Context)
{
	Context.Map.Dust_Particles.BeamCurve2 = Context.Map.SetVariables_B069FF884AF6699EBD26DBA1C81A7994.Dust_Particles.BeamCurve2;
	Context.Map.Dust_Particles.RandomVector = Context.Map.SetVariables_B069FF884AF6699EBD26DBA1C81A7994.Dust_Particles.RandomVector;
}

void Dust_Particles_Func_(inout FSimulationContext Context)
{
	float3 SimulationPosition001_Dust_Particles_Func_Output_SimulationPosition;
	SimulationPosition001_Dust_Particles_Func_(SimulationPosition001_Dust_Particles_Func_Output_SimulationPosition, Context);
	Context.Map.Subtract_Vector.A = Context.Map.User.End;
	Context.Map.Subtract_Vector.B = SimulationPosition001_Dust_Particles_Func_Output_SimulationPosition;
	float3 Subtract_Vector_Dust_Particles_Func_Output_Result;
	Subtract_Vector_Dust_Particles_Func_(Subtract_Vector_Dust_Particles_Func_Output_Result, Context);
	float3 RandomVector_Dust_Particles_Func_Output_RandomVector;
	RandomVector_Dust_Particles_Func_(RandomVector_Dust_Particles_Func_Output_RandomVector, Context);
	Context.Map.UniformRangedFloat001.Minimum = Context.Map.User.BeamCurveMinFactor;
	Context.Map.CrossProduct.VectorA = Subtract_Vector_Dust_Particles_Func_Output_Result;
	Context.Map.CrossProduct.VectorB = RandomVector_Dust_Particles_Func_Output_RandomVector;
	float UniformRangedFloat001_Dust_Particles_Func_Output_UniformRangedFloat;
	UniformRangedFloat001_Dust_Particles_Func_(UniformRangedFloat001_Dust_Particles_Func_Output_UniformRangedFloat, Context);
	float3 CrossProduct_Dust_Particles_Func_Output_CrossedVector;
	CrossProduct_Dust_Particles_Func_(CrossProduct_Dust_Particles_Func_Output_CrossedVector, Context);
	Context.Map.SetVariables_B069FF884AF6699EBD26DBA1C81A7994.Dust_Particles.BeamCurve2 = UniformRangedFloat001_Dust_Particles_Func_Output_UniformRangedFloat;
	Context.Map.SetVariables_B069FF884AF6699EBD26DBA1C81A7994.Dust_Particles.RandomVector = CrossProduct_Dust_Particles_Func_Output_CrossedVector;
	EnterStatScope(6 );
	SetVariables_B069FF884AF6699EBD26DBA1C81A7994_Dust_Particles_Func_(Context);
	ExitStatScope( );
}

void Laser_Func_(inout FSimulationContext Context)
{

}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );

	int Constant = 0;
	Context.Map.Hemisphere_Lightning_End.ExecutionState = Constant;
	float Constant1 = 0;
	Context.Map.Hemisphere_Lightning_End.Age = Constant1;
	float Constant2 = 0;
	Context.Map.Hemisphere_Lightning_End.CurrentLoopDuration = Constant2;
	float Constant3 = 0;
	Context.Map.Hemisphere_Lightning_End.LoopedAge = Constant3;
	int Constant4 = 0;
	Context.Map.Hemisphere_Lightning_End.LoopCount = Constant4;
	float Constant5 = (0.0);
	Context.Map.Hemisphere_Lightning_End.NormalizedLoopAge = Constant5;
	float Constant6 = (0.0);
	Context.Map.Hemisphere_Lightning_End.Scalability.DistanceFraction = Constant6;
	int Constant7 = 0;
	Context.Map.System.ExecutionState = Constant7;
	int Constant8 = 0;
	Context.Map.System.ExecutionStateSource = Constant8;
	int Constant9 = 0;
	Context.Map.Hemisphere_Lightning_End.ExecutionStateSource = Constant9;
	float Constant10 = 0;
	Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnRemainder = Constant10;
	NiagaraSpawnInfo Constant11 = (NiagaraSpawnInfo)0;
	Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnOutputInfo = Constant11;
	bool Constant12 = false;
	Context.Map.Hemisphere_Lightning_End.LocalSpace = Constant12;
	int Constant13 = 0;
	Context.Map.Hemisphere_Lightning_Start.ExecutionState = Constant13;
	float Constant14 = 0;
	Context.Map.Hemisphere_Lightning_Start.Age = Constant14;
	float Constant15 = 0;
	Context.Map.Hemisphere_Lightning_Start.CurrentLoopDuration = Constant15;
	float Constant16 = 0;
	Context.Map.Hemisphere_Lightning_Start.LoopedAge = Constant16;
	int Constant17 = 0;
	Context.Map.Hemisphere_Lightning_Start.LoopCount = Constant17;
	float Constant18 = (0.0);
	Context.Map.Hemisphere_Lightning_Start.NormalizedLoopAge = Constant18;
	float Constant19 = (0.0);
	Context.Map.Hemisphere_Lightning_Start.Scalability.DistanceFraction = Constant19;
	int Constant20 = 0;
	Context.Map.Hemisphere_Lightning_Start.ExecutionStateSource = Constant20;
	float Constant21 = 0;
	Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnRemainder = Constant21;
	NiagaraSpawnInfo Constant22 = (NiagaraSpawnInfo)0;
	Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnOutputInfo = Constant22;
	bool Constant23 = false;
	Context.Map.Hemisphere_Lightning_Start.LocalSpace = Constant23;
	int Constant24 = 0;
	Context.Map.Sparks_End.ExecutionState = Constant24;
	float Constant25 = 0;
	Context.Map.Sparks_End.Age = Constant25;
	float Constant26 = 0;
	Context.Map.Sparks_End.CurrentLoopDuration = Constant26;
	float Constant27 = 0;
	Context.Map.Sparks_End.LoopedAge = Constant27;
	int Constant28 = 0;
	Context.Map.Sparks_End.LoopCount = Constant28;
	float Constant29 = (0.0);
	Context.Map.Sparks_End.NormalizedLoopAge = Constant29;
	float Constant30 = (0.0);
	Context.Map.Sparks_End.Scalability.DistanceFraction = Constant30;
	int Constant31 = 0;
	Context.Map.Sparks_End.ExecutionStateSource = Constant31;
	float Constant32 = 0;
	Context.Map.Sparks_End.SpawnRate.SpawnRemainder = Constant32;
	NiagaraSpawnInfo Constant33 = (NiagaraSpawnInfo)0;
	Context.Map.Sparks_End.SpawnRate.SpawnOutputInfo = Constant33;
	bool Constant34 = false;
	Context.Map.Sparks_End.LocalSpace = Constant34;
	float Constant35 = 1;
	Context.Map.Sparks_End.AlphaScale = Constant35;
	int Constant36 = 0;
	Context.Map.Sparks_Start.ExecutionState = Constant36;
	float Constant37 = 0;
	Context.Map.Sparks_Start.Age = Constant37;
	float Constant38 = 0;
	Context.Map.Sparks_Start.CurrentLoopDuration = Constant38;
	float Constant39 = 0;
	Context.Map.Sparks_Start.LoopedAge = Constant39;
	int Constant40 = 0;
	Context.Map.Sparks_Start.LoopCount = Constant40;
	float Constant41 = (0.0);
	Context.Map.Sparks_Start.NormalizedLoopAge = Constant41;
	float Constant42 = (0.0);
	Context.Map.Sparks_Start.Scalability.DistanceFraction = Constant42;
	int Constant43 = 0;
	Context.Map.Sparks_Start.ExecutionStateSource = Constant43;
	float Constant44 = 0;
	Context.Map.Sparks_Start.SpawnRate.SpawnRemainder = Constant44;
	NiagaraSpawnInfo Constant45 = (NiagaraSpawnInfo)0;
	Context.Map.Sparks_Start.SpawnRate.SpawnOutputInfo = Constant45;
	bool Constant46 = false;
	Context.Map.Sparks_Start.LocalSpace = Constant46;
	float Constant47 = 1;
	Context.Map.Sparks_Start.AlphaScale = Constant47;
	bool Constant48 = false;
	Context.Map.Dust_Particles.LocalSpace = Constant48;
	float Constant49 = (0.0);
	Context.Map.Dust_Particles.BeamCurve2 = Constant49;
	float3 Constant50 = float3(0.0, 0.0, 0.0);
	Context.Map.Dust_Particles.RandomVector = Constant50;
	int Constant51 = 0;
	Context.Map.Dust_Particles.ExecutionState = Constant51;
	float Constant52 = 0;
	Context.Map.Dust_Particles.Age = Constant52;
	float Constant53 = 0;
	Context.Map.Dust_Particles.CurrentLoopDuration = Constant53;
	float Constant54 = 0;
	Context.Map.Dust_Particles.LoopedAge = Constant54;
	int Constant55 = 0;
	Context.Map.Dust_Particles.LoopCount = Constant55;
	float Constant56 = (0.0);
	Context.Map.Dust_Particles.NormalizedLoopAge = Constant56;
	float Constant57 = (0.0);
	Context.Map.Dust_Particles.Scalability.DistanceFraction = Constant57;
	int Constant58 = 0;
	Context.Map.Dust_Particles.ExecutionStateSource = Constant58;
	int Constant59 = (0);
	Context.Map.Dust_Particles.Complexity = Constant59;
	int Constant60 = (0);
	Context.Map.Dust_Particles.DustParticlesQuantity = Constant60;
	float Constant61 = 0;
	Context.Map.Dust_Particles.SpawnRate.SpawnRemainder = Constant61;
	NiagaraSpawnInfo Constant62 = (NiagaraSpawnInfo)0;
	Context.Map.Dust_Particles.SpawnRate.SpawnOutputInfo = Constant62;
	bool Constant63 = false;
	Context.Map.Laser.LocalSpace = Constant63;
	float3 Constant64 = float3(0.0, 0.0, 0.0);
	Context.Map.Laser.BeamStart = Constant64;
	float3 Constant65 = float3(0.0, 0.0, 0.0);
	Context.Map.Laser.BeamStartTangent = Constant65;
	float3 Constant66 = float3(0.0, 0.0, 0.0);
	Context.Map.Laser.BeamEnd = Constant66;
	float3 Constant67 = float3(0.0, 0.0, 0.0);
	Context.Map.Laser.BeamEndTangent = Constant67;
	bool Constant68 = (false);
	Context.Map.Laser.UseBeamTangents = Constant68;
	float Constant69 = (0.0);
	Context.Map.Laser.BeamStartEndLength = Constant69;
	float3 Constant70 = float3(0.0, 0.0, 0.0);
	Context.Map.Laser.BeamVector = Constant70;
	float3 Constant71 = float3(0.0, 0.0, 0.0);
	Context.Map.Laser.BeamDirection = Constant71;
	int Constant72 = 0;
	Context.Map.Laser.LoopCount = Constant72;
	int Constant73 = -1;
	Context.Map.Laser.BeamID = Constant73;
	int Constant74 = 0;
	Context.Map.Laser.ExecutionState = Constant74;
	float Constant75 = 0;
	Context.Map.Laser.Age = Constant75;
	float Constant76 = 0;
	Context.Map.Laser.CurrentLoopDuration = Constant76;
	float Constant77 = 0;
	Context.Map.Laser.LoopedAge = Constant77;
	float Constant78 = (0.0);
	Context.Map.Laser.NormalizedLoopAge = Constant78;
	float Constant79 = (0.0);
	Context.Map.Laser.Scalability.DistanceFraction = Constant79;
	int Constant80 = 0;
	Context.Map.Laser.ExecutionStateSource = Constant80;
	NiagaraSpawnInfo Constant81 = (NiagaraSpawnInfo)0;
	Context.Map.Laser.SpawnBurst_Instantaneous.SpawnBurst = Constant81;
	float Constant82 = 0;
	Context.Map.System.Age = Constant82;
	float Constant83 = 0;
	Context.Map.System.CurrentLoopDuration = Constant83;
	float Constant84 = 0;
	Context.Map.System.LoopedAge = Constant84;
	int Constant85 = 0;
	Context.Map.System.LoopCount = Constant85;
	float Constant86 = (0.0);
	Context.Map.System.NormalizedLoopAge = Constant86;
	bool Constant87 = false;
	Context.Map.System.bCompleteOnInactive = Constant87;

	EnterStatScope(1 );
	Hemisphere_Lightning_End_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	Hemisphere_Lightning_Start_Func_(Context);
	ExitStatScope( );
	EnterStatScope(3 );
	Sparks_End_Func_(Context);
	ExitStatScope( );
	EnterStatScope(4 );
	Sparks_Start_Func_(Context);
	ExitStatScope( );
	EnterStatScope(5 );
	Dust_Particles_Func_(Context);
	ExitStatScope( );
	EnterStatScope(7 );
	Laser_Func_(Context);
	ExitStatScope( );




	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(8 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Dust_Particles.Age = 0.0f;
	Context.Map.Dust_Particles.BeamCurve2 = 0.0f;
	Context.Map.Dust_Particles.Complexity = 0;
	Context.Map.Dust_Particles.CurrentLoopDuration = 0.0f;
	Context.Map.Dust_Particles.DustParticlesQuantity = 0;
	Context.Map.Dust_Particles.ExecutionState = 0;
	Context.Map.Dust_Particles.ExecutionStateSource = 0;
	Context.Map.Dust_Particles.LocalSpace = false;
	Context.Map.Dust_Particles.LoopCount = 0;
	Context.Map.Dust_Particles.LoopedAge = 0.0f;
	Context.Map.Dust_Particles.NormalizedLoopAge = 0.0f;
	Context.Map.Dust_Particles.RandomVector.x = 0.0f;
	Context.Map.Dust_Particles.RandomVector.y = 0.0f;
	Context.Map.Dust_Particles.RandomVector.z = 0.0f;
	Context.Map.Dust_Particles.Scalability.DistanceFraction = 0.0f;
	Context.Map.Dust_Particles.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.Dust_Particles.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.Dust_Particles.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.Dust_Particles.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.Dust_Particles.SpawnRate.SpawnRemainder = 0.0f;
	Context.Map.Emitter.RandomSeed = 0;
	Context.Map.Hemisphere_Lightning_End.Age = 0.0f;
	Context.Map.Hemisphere_Lightning_End.CurrentLoopDuration = 0.0f;
	Context.Map.Hemisphere_Lightning_End.ExecutionState = 0;
	Context.Map.Hemisphere_Lightning_End.ExecutionStateSource = 0;
	Context.Map.Hemisphere_Lightning_End.LocalSpace = false;
	Context.Map.Hemisphere_Lightning_End.LoopCount = 0;
	Context.Map.Hemisphere_Lightning_End.LoopedAge = 0.0f;
	Context.Map.Hemisphere_Lightning_End.NormalizedLoopAge = 0.0f;
	Context.Map.Hemisphere_Lightning_End.Scalability.DistanceFraction = 0.0f;
	Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnRemainder = 0.0f;
	Context.Map.Hemisphere_Lightning_Start.Age = 0.0f;
	Context.Map.Hemisphere_Lightning_Start.CurrentLoopDuration = 0.0f;
	Context.Map.Hemisphere_Lightning_Start.ExecutionState = 0;
	Context.Map.Hemisphere_Lightning_Start.ExecutionStateSource = 0;
	Context.Map.Hemisphere_Lightning_Start.LocalSpace = false;
	Context.Map.Hemisphere_Lightning_Start.LoopCount = 0;
	Context.Map.Hemisphere_Lightning_Start.LoopedAge = 0.0f;
	Context.Map.Hemisphere_Lightning_Start.NormalizedLoopAge = 0.0f;
	Context.Map.Hemisphere_Lightning_Start.Scalability.DistanceFraction = 0.0f;
	Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnRemainder = 0.0f;
	Context.Map.Laser.Age = 0.0f;
	Context.Map.Laser.BeamDirection.x = 0.0f;
	Context.Map.Laser.BeamDirection.y = 0.0f;
	Context.Map.Laser.BeamDirection.z = 0.0f;
	Context.Map.Laser.BeamEnd.x = 0.0f;
	Context.Map.Laser.BeamEnd.y = 0.0f;
	Context.Map.Laser.BeamEnd.z = 0.0f;
	Context.Map.Laser.BeamEndTangent.x = 0.0f;
	Context.Map.Laser.BeamEndTangent.y = 0.0f;
	Context.Map.Laser.BeamEndTangent.z = 0.0f;
	Context.Map.Laser.BeamID = 0;
	Context.Map.Laser.BeamStart.x = 0.0f;
	Context.Map.Laser.BeamStart.y = 0.0f;
	Context.Map.Laser.BeamStart.z = 0.0f;
	Context.Map.Laser.BeamStartEndLength = 0.0f;
	Context.Map.Laser.BeamStartTangent.x = 0.0f;
	Context.Map.Laser.BeamStartTangent.y = 0.0f;
	Context.Map.Laser.BeamStartTangent.z = 0.0f;
	Context.Map.Laser.BeamVector.x = 0.0f;
	Context.Map.Laser.BeamVector.y = 0.0f;
	Context.Map.Laser.BeamVector.z = 0.0f;
	Context.Map.Laser.CurrentLoopDuration = 0.0f;
	Context.Map.Laser.ExecutionState = 0;
	Context.Map.Laser.ExecutionStateSource = 0;
	Context.Map.Laser.LocalSpace = false;
	Context.Map.Laser.LoopCount = 0;
	Context.Map.Laser.LoopedAge = 0.0f;
	Context.Map.Laser.NormalizedLoopAge = 0.0f;
	Context.Map.Laser.Scalability.DistanceFraction = 0.0f;
	Context.Map.Laser.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.Laser.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.Laser.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.Laser.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.Laser.UseBeamTangents = false;
	Context.Map.Sparks_End.Age = 0.0f;
	Context.Map.Sparks_End.AlphaScale = 0.0f;
	Context.Map.Sparks_End.CurrentLoopDuration = 0.0f;
	Context.Map.Sparks_End.ExecutionState = 0;
	Context.Map.Sparks_End.ExecutionStateSource = 0;
	Context.Map.Sparks_End.LocalSpace = false;
	Context.Map.Sparks_End.LoopCount = 0;
	Context.Map.Sparks_End.LoopedAge = 0.0f;
	Context.Map.Sparks_End.NormalizedLoopAge = 0.0f;
	Context.Map.Sparks_End.Scalability.DistanceFraction = 0.0f;
	Context.Map.Sparks_End.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.Sparks_End.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.Sparks_End.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.Sparks_End.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.Sparks_End.SpawnRate.SpawnRemainder = 0.0f;
	Context.Map.Sparks_Start.Age = 0.0f;
	Context.Map.Sparks_Start.AlphaScale = 0.0f;
	Context.Map.Sparks_Start.CurrentLoopDuration = 0.0f;
	Context.Map.Sparks_Start.ExecutionState = 0;
	Context.Map.Sparks_Start.ExecutionStateSource = 0;
	Context.Map.Sparks_Start.LocalSpace = false;
	Context.Map.Sparks_Start.LoopCount = 0;
	Context.Map.Sparks_Start.LoopedAge = 0.0f;
	Context.Map.Sparks_Start.NormalizedLoopAge = 0.0f;
	Context.Map.Sparks_Start.Scalability.DistanceFraction = 0.0f;
	Context.Map.Sparks_Start.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.Sparks_Start.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.Sparks_Start.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.Sparks_Start.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.Sparks_Start.SpawnRate.SpawnRemainder = 0.0f;
	Context.Map.System.Age = 0.0f;
	Context.Map.System.bCompleteOnInactive = false;
	Context.Map.System.CurrentLoopDuration = 0.0f;
	Context.Map.System.ExecutionState = 0;
	Context.Map.System.ExecutionStateSource = 0;
	Context.Map.System.LoopCount = 0;
	Context.Map.System.LoopedAge = 0.0f;
	Context.Map.System.NormalizedLoopAge = 0.0f;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Engine.Owner.Position.x = InputDataFloat(1, 1);
	Context.Map.Engine.Owner.Position.y = InputDataFloat(1, 2);
	Context.Map.Engine.Owner.Position.z = InputDataFloat(1, 3);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][0] = InputDataFloat(1, 4);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][1] = InputDataFloat(1, 5);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][2] = InputDataFloat(1, 6);
	Context.Map.Engine.Owner.SystemLocalToWorld[0][3] = InputDataFloat(1, 7);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][0] = InputDataFloat(1, 8);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][1] = InputDataFloat(1, 9);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][2] = InputDataFloat(1, 10);
	Context.Map.Engine.Owner.SystemLocalToWorld[1][3] = InputDataFloat(1, 11);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][0] = InputDataFloat(1, 12);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][1] = InputDataFloat(1, 13);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][2] = InputDataFloat(1, 14);
	Context.Map.Engine.Owner.SystemLocalToWorld[2][3] = InputDataFloat(1, 15);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][0] = InputDataFloat(1, 16);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][1] = InputDataFloat(1, 17);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][2] = InputDataFloat(1, 18);
	Context.Map.Engine.Owner.SystemLocalToWorld[3][3] = InputDataFloat(1, 19);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][0] = InputDataFloat(1, 20);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][1] = InputDataFloat(1, 21);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][2] = InputDataFloat(1, 22);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[0][3] = InputDataFloat(1, 23);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][0] = InputDataFloat(1, 24);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][1] = InputDataFloat(1, 25);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][2] = InputDataFloat(1, 26);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[1][3] = InputDataFloat(1, 27);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][0] = InputDataFloat(1, 28);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][1] = InputDataFloat(1, 29);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][2] = InputDataFloat(1, 30);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[2][3] = InputDataFloat(1, 31);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][0] = InputDataFloat(1, 32);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][1] = InputDataFloat(1, 33);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][2] = InputDataFloat(1, 34);
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale[3][3] = InputDataFloat(1, 35);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][0] = InputDataFloat(1, 36);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][1] = InputDataFloat(1, 37);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][2] = InputDataFloat(1, 38);
	Context.Map.Engine.Owner.SystemWorldToLocal[0][3] = InputDataFloat(1, 39);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][0] = InputDataFloat(1, 40);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][1] = InputDataFloat(1, 41);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][2] = InputDataFloat(1, 42);
	Context.Map.Engine.Owner.SystemWorldToLocal[1][3] = InputDataFloat(1, 43);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][0] = InputDataFloat(1, 44);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][1] = InputDataFloat(1, 45);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][2] = InputDataFloat(1, 46);
	Context.Map.Engine.Owner.SystemWorldToLocal[2][3] = InputDataFloat(1, 47);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][0] = InputDataFloat(1, 48);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][1] = InputDataFloat(1, 49);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][2] = InputDataFloat(1, 50);
	Context.Map.Engine.Owner.SystemWorldToLocal[3][3] = InputDataFloat(1, 51);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][0] = InputDataFloat(1, 52);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][1] = InputDataFloat(1, 53);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][2] = InputDataFloat(1, 54);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[0][3] = InputDataFloat(1, 55);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][0] = InputDataFloat(1, 56);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][1] = InputDataFloat(1, 57);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][2] = InputDataFloat(1, 58);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[1][3] = InputDataFloat(1, 59);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][0] = InputDataFloat(1, 60);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][1] = InputDataFloat(1, 61);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][2] = InputDataFloat(1, 62);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[2][3] = InputDataFloat(1, 63);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][0] = InputDataFloat(1, 64);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][1] = InputDataFloat(1, 65);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][2] = InputDataFloat(1, 66);
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale[3][3] = InputDataFloat(1, 67);
	Context.Map.Engine.System.TickCount = InputDataInt(1, 68);
	Context.Map.User.BeamCurveMinFactor = InputDataFloat(1, 69);
	Context.Map.User.Dust_Particles.RandomSeed = InputDataInt(1, 70);
	Context.Map.User.End.x = InputDataFloat(1, 71);
	Context.Map.User.End.y = InputDataFloat(1, 72);
	Context.Map.User.End.z = InputDataFloat(1, 73);
	Context.Map.Constants.Dust_Particles.RandomVector.VectorScale = Constants_Dust_Particles_RandomVector_VectorScale;
	Context.Map.Constants.Dust_Particles.RandomVector.ConstraintVector = Constants_Dust_Particles_RandomVector_ConstraintVector;
	Context.Map.Constants.Dust_Particles.RandomVector.RandomSeed = Constants_Dust_Particles_RandomVector_RandomSeed;
	Context.Map.Constants.Dust_Particles.UniformRangedFloat001.Maximum = Constants_Dust_Particles_UniformRangedFloat001_Maximum;
	Context.Map.Constants.Dust_Particles.UniformRangedFloat001.RandomSeed = Constants_Dust_Particles_UniformRangedFloat001_RandomSeed;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Dust_Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Dust_Particles.BeamCurve2);
	OutputDataInt(0, 2, TmpWriteIndex, Context.Map.Dust_Particles.Complexity);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Dust_Particles.CurrentLoopDuration);
	OutputDataInt(0, 4, TmpWriteIndex, Context.Map.Dust_Particles.DustParticlesQuantity);
	OutputDataInt(0, 5, TmpWriteIndex, Context.Map.Dust_Particles.ExecutionState);
	OutputDataInt(0, 6, TmpWriteIndex, Context.Map.Dust_Particles.ExecutionStateSource);
	OutputDataBool(0, 7, TmpWriteIndex, Context.Map.Dust_Particles.LocalSpace);
	OutputDataInt(0, 8, TmpWriteIndex, Context.Map.Dust_Particles.LoopCount);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Dust_Particles.LoopedAge);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Dust_Particles.NormalizedLoopAge);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Dust_Particles.RandomVector.x);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Dust_Particles.RandomVector.y);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Dust_Particles.RandomVector.z);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Dust_Particles.Scalability.DistanceFraction);
	OutputDataInt(0, 15, TmpWriteIndex, Context.Map.Dust_Particles.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Dust_Particles.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Dust_Particles.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 18, TmpWriteIndex, Context.Map.Dust_Particles.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Dust_Particles.SpawnRate.SpawnRemainder);
	OutputDataInt(0, 20, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.Age);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.CurrentLoopDuration);
	OutputDataInt(0, 23, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.ExecutionState);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.ExecutionStateSource);
	OutputDataBool(0, 25, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.LocalSpace);
	OutputDataInt(0, 26, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.LoopCount);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.LoopedAge);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.NormalizedLoopAge);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.Scalability.DistanceFraction);
	OutputDataInt(0, 30, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 33, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Hemisphere_Lightning_End.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.Age);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.CurrentLoopDuration);
	OutputDataInt(0, 37, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.ExecutionState);
	OutputDataInt(0, 38, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.ExecutionStateSource);
	OutputDataBool(0, 39, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.LocalSpace);
	OutputDataInt(0, 40, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.LoopCount);
	OutputDataFloat(0, 41, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.LoopedAge);
	OutputDataFloat(0, 42, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.NormalizedLoopAge);
	OutputDataFloat(0, 43, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.Scalability.DistanceFraction);
	OutputDataInt(0, 44, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 45, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 46, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 47, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 48, TmpWriteIndex, Context.Map.Hemisphere_Lightning_Start.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 49, TmpWriteIndex, Context.Map.Laser.Age);
	OutputDataFloat(0, 50, TmpWriteIndex, Context.Map.Laser.BeamDirection.x);
	OutputDataFloat(0, 51, TmpWriteIndex, Context.Map.Laser.BeamDirection.y);
	OutputDataFloat(0, 52, TmpWriteIndex, Context.Map.Laser.BeamDirection.z);
	OutputDataFloat(0, 53, TmpWriteIndex, Context.Map.Laser.BeamEnd.x);
	OutputDataFloat(0, 54, TmpWriteIndex, Context.Map.Laser.BeamEnd.y);
	OutputDataFloat(0, 55, TmpWriteIndex, Context.Map.Laser.BeamEnd.z);
	OutputDataFloat(0, 56, TmpWriteIndex, Context.Map.Laser.BeamEndTangent.x);
	OutputDataFloat(0, 57, TmpWriteIndex, Context.Map.Laser.BeamEndTangent.y);
	OutputDataFloat(0, 58, TmpWriteIndex, Context.Map.Laser.BeamEndTangent.z);
	OutputDataInt(0, 59, TmpWriteIndex, Context.Map.Laser.BeamID);
	OutputDataFloat(0, 60, TmpWriteIndex, Context.Map.Laser.BeamStart.x);
	OutputDataFloat(0, 61, TmpWriteIndex, Context.Map.Laser.BeamStart.y);
	OutputDataFloat(0, 62, TmpWriteIndex, Context.Map.Laser.BeamStart.z);
	OutputDataFloat(0, 63, TmpWriteIndex, Context.Map.Laser.BeamStartEndLength);
	OutputDataFloat(0, 64, TmpWriteIndex, Context.Map.Laser.BeamStartTangent.x);
	OutputDataFloat(0, 65, TmpWriteIndex, Context.Map.Laser.BeamStartTangent.y);
	OutputDataFloat(0, 66, TmpWriteIndex, Context.Map.Laser.BeamStartTangent.z);
	OutputDataFloat(0, 67, TmpWriteIndex, Context.Map.Laser.BeamVector.x);
	OutputDataFloat(0, 68, TmpWriteIndex, Context.Map.Laser.BeamVector.y);
	OutputDataFloat(0, 69, TmpWriteIndex, Context.Map.Laser.BeamVector.z);
	OutputDataFloat(0, 70, TmpWriteIndex, Context.Map.Laser.CurrentLoopDuration);
	OutputDataInt(0, 71, TmpWriteIndex, Context.Map.Laser.ExecutionState);
	OutputDataInt(0, 72, TmpWriteIndex, Context.Map.Laser.ExecutionStateSource);
	OutputDataBool(0, 73, TmpWriteIndex, Context.Map.Laser.LocalSpace);
	OutputDataInt(0, 74, TmpWriteIndex, Context.Map.Laser.LoopCount);
	OutputDataFloat(0, 75, TmpWriteIndex, Context.Map.Laser.LoopedAge);
	OutputDataFloat(0, 76, TmpWriteIndex, Context.Map.Laser.NormalizedLoopAge);
	OutputDataFloat(0, 77, TmpWriteIndex, Context.Map.Laser.Scalability.DistanceFraction);
	OutputDataInt(0, 78, TmpWriteIndex, Context.Map.Laser.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 79, TmpWriteIndex, Context.Map.Laser.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 80, TmpWriteIndex, Context.Map.Laser.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 81, TmpWriteIndex, Context.Map.Laser.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataBool(0, 82, TmpWriteIndex, Context.Map.Laser.UseBeamTangents);
	OutputDataFloat(0, 83, TmpWriteIndex, Context.Map.Sparks_End.Age);
	OutputDataFloat(0, 84, TmpWriteIndex, Context.Map.Sparks_End.AlphaScale);
	OutputDataFloat(0, 85, TmpWriteIndex, Context.Map.Sparks_End.CurrentLoopDuration);
	OutputDataInt(0, 86, TmpWriteIndex, Context.Map.Sparks_End.ExecutionState);
	OutputDataInt(0, 87, TmpWriteIndex, Context.Map.Sparks_End.ExecutionStateSource);
	OutputDataBool(0, 88, TmpWriteIndex, Context.Map.Sparks_End.LocalSpace);
	OutputDataInt(0, 89, TmpWriteIndex, Context.Map.Sparks_End.LoopCount);
	OutputDataFloat(0, 90, TmpWriteIndex, Context.Map.Sparks_End.LoopedAge);
	OutputDataFloat(0, 91, TmpWriteIndex, Context.Map.Sparks_End.NormalizedLoopAge);
	OutputDataFloat(0, 92, TmpWriteIndex, Context.Map.Sparks_End.Scalability.DistanceFraction);
	OutputDataInt(0, 93, TmpWriteIndex, Context.Map.Sparks_End.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 94, TmpWriteIndex, Context.Map.Sparks_End.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 95, TmpWriteIndex, Context.Map.Sparks_End.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 96, TmpWriteIndex, Context.Map.Sparks_End.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 97, TmpWriteIndex, Context.Map.Sparks_End.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 98, TmpWriteIndex, Context.Map.Sparks_Start.Age);
	OutputDataFloat(0, 99, TmpWriteIndex, Context.Map.Sparks_Start.AlphaScale);
	OutputDataFloat(0, 100, TmpWriteIndex, Context.Map.Sparks_Start.CurrentLoopDuration);
	OutputDataInt(0, 101, TmpWriteIndex, Context.Map.Sparks_Start.ExecutionState);
	OutputDataInt(0, 102, TmpWriteIndex, Context.Map.Sparks_Start.ExecutionStateSource);
	OutputDataBool(0, 103, TmpWriteIndex, Context.Map.Sparks_Start.LocalSpace);
	OutputDataInt(0, 104, TmpWriteIndex, Context.Map.Sparks_Start.LoopCount);
	OutputDataFloat(0, 105, TmpWriteIndex, Context.Map.Sparks_Start.LoopedAge);
	OutputDataFloat(0, 106, TmpWriteIndex, Context.Map.Sparks_Start.NormalizedLoopAge);
	OutputDataFloat(0, 107, TmpWriteIndex, Context.Map.Sparks_Start.Scalability.DistanceFraction);
	OutputDataInt(0, 108, TmpWriteIndex, Context.Map.Sparks_Start.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 109, TmpWriteIndex, Context.Map.Sparks_Start.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 110, TmpWriteIndex, Context.Map.Sparks_Start.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 111, TmpWriteIndex, Context.Map.Sparks_Start.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 112, TmpWriteIndex, Context.Map.Sparks_Start.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 113, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 114, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 115, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 116, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 117, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 118, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 119, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 120, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
