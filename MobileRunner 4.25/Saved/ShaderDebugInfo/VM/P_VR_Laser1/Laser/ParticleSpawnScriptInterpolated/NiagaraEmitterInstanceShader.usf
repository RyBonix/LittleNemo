#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraID
{
	int Index;
	int AcquireTag;
};

struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float4 User_Color;
	float Constants_Emitter_InitializeParticle_Lifetime;
	float Constants_Emitter_InitializeParticle_Mass;
	float2 Constants_Emitter_InitializeParticle_SpriteSize;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	int Engine_ExecutionCount;
	float3 Emitter_BeamVector;
	float3 Emitter_BeamStart;
	float Emitter_BeamStartEndLength;
	float3 Emitter_BeamDirection;
	float3 Emitter_BeamStartTangent;
	float3 Emitter_BeamEnd;
	float3 Emitter_BeamEndTangent;
	float Constants_Emitter_SpawnBeam_SplinePositionErrorThreshold;
	bool Emitter_UseBeamTangents;
	int Emitter_BeamID;
	float User_LaserWidth;
	float Constants_Emitter_BeamWidth_BeamTwistAmount;
	float3 User_End;
	float Constants_Emitter_RandomVector002_VectorScale;
	float3 Constants_Emitter_RandomVector002_ConstraintVector;
	int Constants_Emitter_RandomVector002_RandomSeed;
	float Constants_Emitter_RandomVector001_VectorScale;
	float3 Constants_Emitter_RandomVector001_ConstraintVector;
	int Constants_Emitter_RandomVector001_RandomSeed;
	float User_ColorBoost;
	float Constants_Emitter_ScaleColor_ScaleAlpha;
	float Constants_Emitter_FloatFromCurve002_ScaleCurve;
	float Constants_Emitter_RandomVector003_VectorScale;
	float3 Constants_Emitter_RandomVector003_ConstraintVector;
	int Constants_Emitter_RandomVector003_RandomSeed;
	float User_LaserPower;
	float Constants_Emitter_FloatFromCurve006_ScaleCurve;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float4 PREV_User_Color;
	float PREV_Constants_Emitter_InitializeParticle_Lifetime;
	float PREV_Constants_Emitter_InitializeParticle_Mass;
	float2 PREV_Constants_Emitter_InitializeParticle_SpriteSize;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	int PREV_Engine_ExecutionCount;
	float3 PREV_Emitter_BeamVector;
	float3 PREV_Emitter_BeamStart;
	float PREV_Emitter_BeamStartEndLength;
	float3 PREV_Emitter_BeamDirection;
	float3 PREV_Emitter_BeamStartTangent;
	float3 PREV_Emitter_BeamEnd;
	float3 PREV_Emitter_BeamEndTangent;
	float PREV_Constants_Emitter_SpawnBeam_SplinePositionErrorThreshold;
	bool PREV_Emitter_UseBeamTangents;
	int PREV_Emitter_BeamID;
	float PREV_User_LaserWidth;
	float PREV_Constants_Emitter_BeamWidth_BeamTwistAmount;
	float3 PREV_User_End;
	float PREV_Constants_Emitter_RandomVector002_VectorScale;
	float3 PREV_Constants_Emitter_RandomVector002_ConstraintVector;
	int PREV_Constants_Emitter_RandomVector002_RandomSeed;
	float PREV_Constants_Emitter_RandomVector001_VectorScale;
	float3 PREV_Constants_Emitter_RandomVector001_ConstraintVector;
	int PREV_Constants_Emitter_RandomVector001_RandomSeed;
	float PREV_User_ColorBoost;
	float PREV_Constants_Emitter_ScaleColor_ScaleAlpha;
	float PREV_Constants_Emitter_FloatFromCurve002_ScaleCurve;
	float PREV_Constants_Emitter_RandomVector003_VectorScale;
	float3 PREV_Constants_Emitter_RandomVector003_ConstraintVector;
	int PREV_Constants_Emitter_RandomVector003_RandomSeed;
	float PREV_User_LaserPower;
	float PREV_Constants_Emitter_FloatFromCurve006_ScaleCurve;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_VectorFromFloat
{
	float Value;
};

struct FParamMap0_User
{
	float4 Color;
	float ColorBoost;
	float3 End;
	float LaserPower;
	float LaserWidth;
};

struct FParamMap0_UpdateAge
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
};

struct FParamMap0_Subtract_Vector001
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0_Subtract_Float
{
	float A;
	float B;
};

struct FParamMap0_SpawnBeam
{
	float SplinePositionErrorThreshold;
};

struct FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22
{
	FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Particles Particles;
};

struct FParamMap0_SetVariables_7D57B2E24F50E6866938178BEE961CBE_Particles
{
	float3 RandomMovement;
};

struct FParamMap0_SetVariables_7D57B2E24F50E6866938178BEE961CBE
{
	FParamMap0_SetVariables_7D57B2E24F50E6866938178BEE961CBE_Particles Particles;
};

struct FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA_Particles
{
	float3 Position;
};

struct FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA
{
	FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA_Particles Particles;
};

struct FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Particles
{
	float3 RandomMovement;
};

struct FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7
{
	FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Particles Particles;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_RibbonWidthScale
{
	float RibbonWidthScale;
};

struct FParamMap0_RandomVector003
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector002
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_RandomVector001
{
	bool ConstraintoAxis;
	float3 ConstraintVector;
	bool FixedRandomSeed;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float RibbonWidth;
};

struct FParamMap0_Particles
{
	float Age;
	float3 BeamSplineBinormal;
	float3 BeamSplineNormal;
	float3 BeamSplineTangent;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 RandomMovement;
	NiagaraID RibbonID;
	float RibbonLinkOrder;
	float RibbonTwist;
	float RibbonWidth;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
};

struct FParamMap0_OUTPUT_VAR_UpdateAge
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_UpdateAge UpdateAge;
};

struct FParamMap0_Multiply_VectorByFloat005
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_VectorByFloat002
{
	float FLOAT_VAR;
	float3 VECTOR_VAR;
};

struct FParamMap0_Multiply_Float002
{
	float A;
	float B;
};

struct FParamMap0_Local_SpawnBeam
{
	float3 BeamDirection;
	float3 BeamVector;
	float NormalizedExecIndex;
	float StartEndVecLength;
};

struct FParamMap0_Local
{
	FParamMap0_Local_SpawnBeam SpawnBeam;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_FloatFromCurve006
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve005
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float3 BeamDirection;
	float3 BeamEnd;
	float3 BeamEndTangent;
	int BeamID;
	float3 BeamStart;
	float BeamStartEndLength;
	float3 BeamStartTangent;
	float3 BeamVector;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
	bool UseBeamTangents;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CrossProduct001
{
	bool NormalizeIncomingVectors;
	float3 VectorA;
	float3 VectorB;
};

struct FParamMap0_Constants_Emitter_SpawnBeam
{
	float SplinePositionErrorThreshold;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float ScaleAlpha;
};

struct FParamMap0_Constants_Emitter_RandomVector003
{
	float3 ConstraintVector;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Constants_Emitter_RandomVector002
{
	float3 ConstraintVector;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Constants_Emitter_RandomVector001
{
	float3 ConstraintVector;
	int RandomSeed;
	float VectorScale;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float Lifetime;
	float Mass;
	float3 MeshScale;
	float SpriteRotation;
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve006
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve002
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_BeamWidth
{
	float BeamTwistAmount;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_BeamWidth BeamWidth;
	FParamMap0_Constants_Emitter_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_Constants_Emitter_FloatFromCurve006 FloatFromCurve006;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_RandomVector001 RandomVector001;
	FParamMap0_Constants_Emitter_RandomVector002 RandomVector002;
	FParamMap0_Constants_Emitter_RandomVector003 RandomVector003;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_SpawnBeam SpawnBeam;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_BeamWidth
{
	float BeamTwistAmount;
	float BeamWidth;
};

struct FParamMap0_Add_Vector005
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector004
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector001
{
	float3 A;
	float3 B;
};

struct FParamMap0_Add_Vector
{
	float3 A;
	float3 B;
};

struct FParamMap0
{
	FParamMap0_Add_Vector Add_Vector;
	FParamMap0_Add_Vector001 Add_Vector001;
	FParamMap0_Add_Vector004 Add_Vector004;
	FParamMap0_Add_Vector005 Add_Vector005;
	FParamMap0_BeamWidth BeamWidth;
	FParamMap0_Constants Constants;
	FParamMap0_CrossProduct001 CrossProduct001;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_FloatFromCurve005 FloatFromCurve005;
	FParamMap0_FloatFromCurve006 FloatFromCurve006;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_Multiply_Float002 Multiply_Float002;
	FParamMap0_Multiply_VectorByFloat002 Multiply_VectorByFloat002;
	FParamMap0_Multiply_VectorByFloat005 Multiply_VectorByFloat005;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_RandomVector001 RandomVector001;
	FParamMap0_RandomVector002 RandomVector002;
	FParamMap0_RandomVector003 RandomVector003;
	FParamMap0_RibbonWidthScale RibbonWidthScale;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SetVariables_37EFE94048FF0092BAD12B9767DEC3B7 SetVariables_37EFE94048FF0092BAD12B9767DEC3B7;
	FParamMap0_SetVariables_39F275A84050437F282DE79201AD7DEA SetVariables_39F275A84050437F282DE79201AD7DEA;
	FParamMap0_SetVariables_7D57B2E24F50E6866938178BEE961CBE SetVariables_7D57B2E24F50E6866938178BEE961CBE;
	FParamMap0_SetVariables_B8B0EADE49895CE1E100F6AAB756CA22 SetVariables_B8B0EADE49895CE1E100F6AAB756CA22;
	FParamMap0_SpawnBeam SpawnBeam;
	FParamMap0_Subtract_Float Subtract_Float;
	FParamMap0_Subtract_Vector Subtract_Vector;
	FParamMap0_Subtract_Vector001 Subtract_Vector001;
	FParamMap0_Transient Transient;
	FParamMap0_UpdateAge UpdateAge;
	FParamMap0_User User;
	FParamMap0_VectorFromFloat VectorFromFloat;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void NormalizedExecutionIndex_Func_(int In_EngineExecutionCount, out float Out_NormalizedExecIndex, inout FSimulationContext Context);
void CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_(float In_t, float3 In_p0, float3 In_p1, float3 In_p2, float3 In_p3, out float3 Out_Position, out float3 Out_Tangent, out float3 Out_Normal, out float3 Out_Binormal);
void FindPositionOnBezierSpline_Func_(float In_TASC45PositionAlongSpline, float3 In_StartHandle, float3 In_StartPoint, float3 In_EndPoint, float3 In_EndHandle, out float3 Out_PositionOnSpline, out float3 Out_SplineTangent, out float3 Out_SplineNormal, out float3 Out_SplineBinormal, inout FSimulationContext Context);
void SpawnBeam_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterBeamWidthFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void BeamWidth_Emitter_Func_(inout FSimulationContext Context);
void SimulationPosition004_Emitter_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void RandomVector002_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector002_Emitter_Func_(out float3 Out_RandomVector, inout FSimulationContext Context);
void Subtract_Vector001_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context);
void RandomVector001_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomVector001_Emitter_Func_(out float3 Out_RandomVector, inout FSimulationContext Context);
void CrossProduct001_Emitter_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context);
void Add_Vector_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context);
void SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Emitter_Func_(inout FSimulationContext Context);
void UpdateAge_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterValueScaleRGBFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void Subtract_Float_Emitter_Func_(out float Out_Result, inout FSimulationContext Context);
void SampleCurve_EmitterRibbonWidthScaleFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void RibbonWidthScale_Emitter_Func_(inout FSimulationContext Context);
void SimulationPosition005_Emitter_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void Subtract_Vector_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context);
void SimulationPosition001_Emitter_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context);
void Multiply_VectorByFloat002_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context);
void Add_Vector001_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context);
void SetVariables_39F275A84050437F282DE79201AD7DEA_Emitter_Func_(inout FSimulationContext Context);
void RandomVector003_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomVector003_Emitter_Func_(out float3 Out_RandomVector, inout FSimulationContext Context);
void Add_Vector004_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context);
void SetVariables_7D57B2E24F50E6866938178BEE961CBE_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterBScaleCurveFloatBParticlesPositionFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve006_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void Multiply_Float002_Emitter_Func_(out float Out_Result, inout FSimulationContext Context);
void SampleCurve_EmitterFloatBParticlesPositionFloatCurve001(float In_X, out float Out_Value);
void FloatFromCurve005_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void Multiply_VectorByFloat005_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context);
void Add_Vector005_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context);
void SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant21 = false;
	float3 Constant22 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant21)
	{
	Vector_IfResult = Constant22;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant27 = false;
	float3 Constant28 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant27)
	{
	Vector_IfResult1 = Constant28;
	}
	else
	{
	Vector_IfResult1 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant40 = false;
	int Constant41 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant41);
	bool Result1 = Constant40 && Result;
	int Constant42 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant42);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant43 = 0;
	int Constant44 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant43;
	Seed3_IfResult = Constant44;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant45 = -1;
	int Constant46 = -1;
	int Constant47 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant45;
	Seed2_IfResult1 = Constant46;
	Seed3_IfResult1 = Constant47;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant35 = (0);
	bool Constant36 = false;
	int Constant37 = 0;
	int Constant38 = (0);
	bool Constant39 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant35, In_OverrideSeed, Constant37, Constant38, Constant39, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand_float(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void NormalizedExecutionIndex_Func_(int In_EngineExecutionCount, out float Out_NormalizedExecIndex, inout FSimulationContext Context)
{
	int Result8 = ExecIndex();
	float Output0;
	Output0 = Result8;
	int Constant51 = -1;
	int Result9 = In_EngineExecutionCount + Constant51;
	float Output01;
	Output01 = Result9;
	float Result10 = Output0 / Output01;
	Out_NormalizedExecIndex = Result10;
}

void CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_(float In_t, float3 In_p0, float3 In_p1, float3 In_p2, float3 In_p3, out float3 Out_Position, out float3 Out_Tangent, out float3 Out_Normal, out float3 Out_Binormal)
{

float t2 = (In_t * In_t);
	float t3 = (In_t * In_t * In_t);

	float3 PC1 = ( In_p3 - (3.0 * In_p2) + (3.0 * In_p1) - In_p0 );
	float3 PC2 = ( (3.0 * In_p2) - (6.0 * In_p1) + (3.0 * In_p0) );
	float3 PC3 = ( (3.0 * In_p1) - (3.0 * In_p0) );
	float3 PC4 = ( In_p0 );


	Out_Position = (PC1 * t3 + PC2 * t2 + PC3 * In_t + PC4);


	float3 Velocity = (3 * PC1 * t2 ) + (2 * PC2 * In_t ) + PC3;


	float3 Acceleration = (6 * PC1 * In_t) + (2 * PC2);

	Out_Tangent = normalize(Velocity);


	Out_Normal =normalize(Acceleration - (Velocity * dot(Velocity, Acceleration)/dot(Velocity, Velocity)));

	Out_Binormal = cross(Out_Tangent, Out_Normal);
}

void FindPositionOnBezierSpline_Func_(float In_TASC45PositionAlongSpline, float3 In_StartHandle, float3 In_StartPoint, float3 In_EndPoint, float3 In_EndHandle, out float3 Out_PositionOnSpline, out float3 Out_SplineTangent, out float3 Out_SplineNormal, out float3 Out_SplineBinormal, inout FSimulationContext Context)
{
	float3 CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Position;
	float3 CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Tangent;
	float3 CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Normal;
	float3 CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Binormal;
	CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_(In_TASC45PositionAlongSpline, In_StartPoint, In_StartHandle, In_EndHandle, In_EndPoint, CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Position, CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Tangent, CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Normal, CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Binormal);
	Out_PositionOnSpline = CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Position;
	Out_SplineTangent = CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Tangent;
	Out_SplineNormal = CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Normal;
	Out_SplineBinormal = CustomHlsl93A9E2A54C5C45027356F49C5CBE48F8_Func_Output_Binormal;
}

void SpawnBeam_Emitter_Func_(inout FSimulationContext Context)
{
	float NormalizedExecutionIndex_Func_Output_NormalizedExecIndex;
	NormalizedExecutionIndex_Func_(Context.MapSpawn.Engine.ExecutionCount, NormalizedExecutionIndex_Func_Output_NormalizedExecIndex, Context);
	float3 Result11 = NormalizedExecutionIndex_Func_Output_NormalizedExecIndex * Context.MapSpawn.Emitter.BeamVector;
	float3 Result12 = Result11 + Context.MapSpawn.Emitter.BeamStart;
	Context.MapSpawn.Local.SpawnBeam.NormalizedExecIndex = NormalizedExecutionIndex_Func_Output_NormalizedExecIndex;
	Context.MapSpawn.Local.SpawnBeam.BeamVector = Result12;
	Context.MapSpawn.Local.SpawnBeam.StartEndVecLength = Context.MapSpawn.Emitter.BeamStartEndLength;
	Context.MapSpawn.Local.SpawnBeam.BeamDirection = Context.MapSpawn.Emitter.BeamDirection;
	float Constant52 = 1;
	float Result13 = Constant52 - Context.MapSpawn.Constants.Emitter.SpawnBeam.SplinePositionErrorThreshold;
	float Result14 = clamp(Context.MapSpawn.Local.SpawnBeam.NormalizedExecIndex,Context.MapSpawn.Constants.Emitter.SpawnBeam.SplinePositionErrorThreshold,Result13);
	float3 FindPositionOnBezierSpline_Func_Output_PositionOnSpline;
	float3 FindPositionOnBezierSpline_Func_Output_SplineTangent;
	float3 FindPositionOnBezierSpline_Func_Output_SplineNormal;
	float3 FindPositionOnBezierSpline_Func_Output_SplineBinormal;
	FindPositionOnBezierSpline_Func_(Result14, Context.MapSpawn.Emitter.BeamStartTangent, Context.MapSpawn.Emitter.BeamStart, Context.MapSpawn.Emitter.BeamEnd, Context.MapSpawn.Emitter.BeamEndTangent, FindPositionOnBezierSpline_Func_Output_PositionOnSpline, FindPositionOnBezierSpline_Func_Output_SplineTangent, FindPositionOnBezierSpline_Func_Output_SplineNormal, FindPositionOnBezierSpline_Func_Output_SplineBinormal, Context);
	float Constant53 = 0;
	float Constant54 = 0;
	float Constant55 = 1;
	float3 Output11;
	Output11.x = Constant53;
	Output11.y = Constant54;
	Output11.z = Constant55;
	float3 Result15 = cross(Output11,Context.MapSpawn.Local.SpawnBeam.BeamDirection);
	float3 BeamPosition_IfResult;
	float3 BeamTangent_IfResult;
	float3 BeamNormal_IfResult;
	float3 BeamBinormal_IfResult;
	if(Context.MapSpawn.Emitter.UseBeamTangents)
	{
	BeamPosition_IfResult = FindPositionOnBezierSpline_Func_Output_PositionOnSpline;
	BeamTangent_IfResult = FindPositionOnBezierSpline_Func_Output_SplineTangent;
	BeamNormal_IfResult = FindPositionOnBezierSpline_Func_Output_SplineNormal;
	BeamBinormal_IfResult = FindPositionOnBezierSpline_Func_Output_SplineBinormal;
	}
	else
	{
	BeamPosition_IfResult = Context.MapSpawn.Local.SpawnBeam.BeamVector;
	BeamTangent_IfResult = Context.MapSpawn.Local.SpawnBeam.BeamDirection;
	BeamNormal_IfResult = Output11;
	BeamBinormal_IfResult = Result15;
	}
	Context.MapSpawn.Particles.RibbonLinkOrder = Context.MapSpawn.Local.SpawnBeam.NormalizedExecIndex;
	Context.MapSpawn.Particles.Position = BeamPosition_IfResult;
	Context.MapSpawn.Particles.BeamSplineTangent = BeamTangent_IfResult;
	Context.MapSpawn.Particles.BeamSplineNormal = BeamNormal_IfResult;
	Context.MapSpawn.Particles.BeamSplineBinormal = BeamBinormal_IfResult;
	int Constant56 = 0;
	NiagaraID Output12;
	Output12.Index = Context.MapSpawn.Emitter.BeamID;
	Output12.AcquireTag = Constant56;
	Context.MapSpawn.Particles.RibbonID = Output12;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterBeamWidthFloatCurveOutput_Value;
	SampleCurve_EmitterBeamWidthFloatCurve(Context.MapSpawn.FloatFromCurve.CurveIndex, SampleCurve_EmitterBeamWidthFloatCurveOutput_Value);
	float Result16 = SampleCurve_EmitterBeamWidthFloatCurveOutput_Value * Context.MapSpawn.FloatFromCurve.ScaleCurve;
	Out_Value = Result16;
}

void BeamWidth_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapSpawn.Particles.RibbonWidth = Context.MapSpawn.BeamWidth.BeamWidth;
	Context.MapSpawn.Particles.RibbonTwist = Context.MapSpawn.Constants.Emitter.BeamWidth.BeamTwistAmount;
}

void SimulationPosition004_Emitter_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant57 = false;
	float3 Constant58 = float3(0,0,0);
	float3 Vector_IfResult2;
	if(Constant57)
	{
	Vector_IfResult2 = Constant58;
	}
	else
	{
	Vector_IfResult2 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult2;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant68 = 0;
	bool Result17 = NiagaraAll(In_SourceSpace == Constant68);
	int Constant69 = 0;
	bool Result18 = NiagaraAll(In_DestinationSpace == Constant69);
	bool Result19 = Result17 && Result18;
	int Constant70 = 1;
	bool Result20 = NiagaraAll(In_SourceSpace == Constant70);
	int Constant71 = 1;
	bool Result21 = NiagaraAll(In_DestinationSpace == Constant71);
	bool Result22 = Result20 && Result21;
	bool Result23 = Result19 || Result22;
	int Constant72 = 2;
	bool Result24 = NiagaraAll(In_SourceSpace == Constant72);
	int Constant73 = 2;
	bool Result25 = NiagaraAll(In_DestinationSpace == Constant73);
	bool Result26 = Result24 && Result25;
	bool Result27 = Result23 || Result26;
	bool Result28 = Result17 && Result25;
	bool Result29 = Result24 && Result18;
	bool Result30 = Result28 || Result29;
	bool Result31 = In_bLocalSpace && Result30;
	bool Result32 = Result27 || Result31;
	bool Result33 = !In_bLocalSpace;
	bool Result34 = Result17 && Result21;
	bool Result35 = Result20 && Result18;
	bool Result36 = Result34 || Result35;
	bool Result37 = Result33 && Result36;
	bool Result38 = Result32 || Result37;
	bool Result39 = In_bLocalSpace && Result34;
	bool Result40 = Result24 && Result21;
	bool Result41 = Result39 || Result40;
	bool Result42 = Result33 && Result29;
	bool Result43 = Result41 || Result42;
	float4x4 Matrix_IfResult1;
	if(Result43)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result38;
	Out_OutTransform = Matrix_IfResult1;
}

void RandomVector002_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant67 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant67, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result44 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult3;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult3 = In_InVector;
	}
	else
	{
	Vector_IfResult3 = Result44;
	}
	Out_OutVector = Vector_IfResult3;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant78 = (0);
	bool Constant79 = false;
	int Constant80 = 0;
	int Constant81 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant78, In_OverrideSeed, Constant80, Constant81, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float2 Result45 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float2 Result46 = rand_float(Result45, Seed11, Seed21, Seed31);
	float2 Result47 = rand_float(Result45);
	float2 Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result46;
	}
	else
	{
	Random_IfResult1 = Result47;
	}
	float2 Result48 = In_Min + Random_IfResult1;
	Out_Result = Result48;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant76 = float2(0,-1);
	float2 Constant77 = float2(6.28319,1);
	float2 RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Constant76, Constant77, In_Seed, In_RandomnessMode, In_OverrideSeed, In_FixedOverrideSeed, RandomRangeFloat_Func_Output_Result1, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = RandomRangeFloat_Func_Output_Result1.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result1.y;
	float Result49 = cos(Phi);
	float Result50 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result51 = 1 - Result50;
	float Result52 = sqrt(Result51);
	float Result53 = Result49 * Result52;
	float Result54 = sin(Phi);
	float Result55 = Result54 * Result52;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result53;
	PositionOnSphere.y = Result55;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant82 = 0;
	float Constant83 = 6.28319;
	int Constant84 = -1;
	int Constant85 = 0;
	bool Constant86 = false;
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Constant82, Constant83, Constant84, Constant85, Constant86, RandomRangeFloat_Func_Output_Result2, Context);
	float Result56 = cos(RandomRangeFloat_Func_Output_Result2);
	float Result57 = sin(RandomRangeFloat_Func_Output_Result2);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result56;
	PositionOnCircle.y = Result57;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomVector002_Emitter_Func_(out float3 Out_RandomVector, inout FSimulationContext Context)
{
	int Constant64 = 2;
	int Constant65 = 0;
	bool Constant66 = false;
	float3 RandomVector002_NF_TransformVector_Emitter_Func_Output_OutVector;
	RandomVector002_NF_TransformVector_Emitter_Func_(Context.MapSpawn.Constants.Emitter.RandomVector002.ConstraintVector, Constant64, Constant65, Constant66, RandomVector002_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	int Constant74 = 0;
	bool Constant75 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapSpawn.RandomVector002.OverrideRandomness)
	{
	Mode_IfResult = Context.MapSpawn.RandomVector002.RandomnessMode;
	Override_IfResult = Context.MapSpawn.RandomVector002.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant74;
	Override_IfResult = Constant75;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(Context.MapSpawn.Constants.Emitter.RandomVector002.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapSpawn.RandomVector002.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	float Result58 = dot(RandomVector002_NF_TransformVector_Emitter_Func_Output_OutVector,RandomUnitVector_Func_Output_UnitVector3D);
	float Result59 = sign(Result58);
	float3 Result60 = Result59 * RandomUnitVector_Func_Output_UnitVector3D;
	float3 Vector_IfResult4;
	if(Context.MapSpawn.RandomVector002.ConstraintoAxis)
	{
	Vector_IfResult4 = Result60;
	}
	else
	{
	Vector_IfResult4 = RandomUnitVector_Func_Output_UnitVector3D;
	}
	float3 Result61 = Context.MapSpawn.Constants.Emitter.RandomVector002.VectorScale * Vector_IfResult4;
	Out_RandomVector = Result61;
}

void Subtract_Vector001_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result62 = Context.MapSpawn.Subtract_Vector001.A - Context.MapSpawn.Subtract_Vector001.B;
	Out_Result = Result62;
}

void RandomVector001_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant95 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant95, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result63 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult5;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult5 = In_InVector;
	}
	else
	{
	Vector_IfResult5 = Result63;
	}
	Out_OutVector = Vector_IfResult5;
}

void RandomVector001_Emitter_Func_(out float3 Out_RandomVector, inout FSimulationContext Context)
{
	int Constant92 = 2;
	int Constant93 = 0;
	bool Constant94 = false;
	float3 RandomVector001_NF_TransformVector_Emitter_Func_Output_OutVector;
	RandomVector001_NF_TransformVector_Emitter_Func_(Context.MapSpawn.Constants.Emitter.RandomVector001.ConstraintVector, Constant92, Constant93, Constant94, RandomVector001_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	int Constant96 = 0;
	bool Constant97 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.MapSpawn.RandomVector001.OverrideRandomness)
	{
	Mode_IfResult1 = Context.MapSpawn.RandomVector001.RandomnessMode;
	Override_IfResult1 = Context.MapSpawn.RandomVector001.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant96;
	Override_IfResult1 = Constant97;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D1;
	float2 RandomUnitVector_Func_Output_UnitVector2D1;
	RandomUnitVector_Func_(Context.MapSpawn.Constants.Emitter.RandomVector001.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.RandomVector001.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D1, RandomUnitVector_Func_Output_UnitVector2D1, Context);
	float Result64 = dot(RandomVector001_NF_TransformVector_Emitter_Func_Output_OutVector,RandomUnitVector_Func_Output_UnitVector3D1);
	float Result65 = sign(Result64);
	float3 Result66 = Result65 * RandomUnitVector_Func_Output_UnitVector3D1;
	float3 Vector_IfResult6;
	if(Context.MapSpawn.RandomVector001.ConstraintoAxis)
	{
	Vector_IfResult6 = Result66;
	}
	else
	{
	Vector_IfResult6 = RandomUnitVector_Func_Output_UnitVector3D1;
	}
	float3 Result67 = Context.MapSpawn.Constants.Emitter.RandomVector001.VectorScale * Vector_IfResult6;
	Out_RandomVector = Result67;
}

void CrossProduct001_Emitter_Func_(out float3 Out_CrossedVector, inout FSimulationContext Context)
{
	float3 Result68 = normalize(Context.MapSpawn.CrossProduct001.VectorA);
	float3 Result69 = normalize(Context.MapSpawn.CrossProduct001.VectorB);
	float3 VectorA_IfResult;
	float3 VectorB_IfResult;
	if(Context.MapSpawn.CrossProduct001.NormalizeIncomingVectors)
	{
	VectorA_IfResult = Result68;
	VectorB_IfResult = Result69;
	}
	else
	{
	VectorA_IfResult = Context.MapSpawn.CrossProduct001.VectorA;
	VectorB_IfResult = Context.MapSpawn.CrossProduct001.VectorB;
	}
	float3 Result70 = cross(VectorA_IfResult,VectorB_IfResult);
	Out_CrossedVector = Result70;
}

void Add_Vector_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result71 = Context.MapSpawn.Add_Vector.A + Context.MapSpawn.Add_Vector.B;
	Out_Result = Result71;
}

void SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapSpawn.Particles.RandomMovement = Context.MapSpawn.SetVariables_37EFE94048FF0092BAD12B9767DEC3B7.Particles.RandomMovement;
}

void UpdateAge_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result72 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.UpdateAge.FirstFrame = Result72;
	float Result73 = Context.MapUpdate.Particles.Age + Context.MapUpdate.UpdateAge.DeltaTime;
	float Constant100 = 1e-05;
	float Result74 = max(Context.MapUpdate.UpdateAge.Lifetime, Constant100);
	float Constant101 = 0.0001;
	float Result75 = Result74 - Constant101;
	bool Result76 = NiagaraAll(Result73 < Result75);
	bool Constant102 = false;
	bool bool_IfResult;
	if(Result76)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant102;
	}
	float Result77 = Result73 / Result74;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result73;
	Context.MapUpdate.Particles.NormalizedAge = Result77;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterValueScaleRGBFloatCurveOutput_Value;
	SampleCurve_EmitterValueScaleRGBFloatCurve(Context.MapUpdate.FloatFromCurve001.CurveIndex, SampleCurve_EmitterValueScaleRGBFloatCurveOutput_Value);
	float Result78 = SampleCurve_EmitterValueScaleRGBFloatCurveOutput_Value * Context.MapUpdate.FloatFromCurve001.ScaleCurve;
	Out_Value = Result78;
}

void VectorFromFloat_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output13;
	Output13.x = Context.MapUpdate.VectorFromFloat.Value;
	Output13.y = Context.MapUpdate.VectorFromFloat.Value;
	Output13.z = Context.MapUpdate.VectorFromFloat.Value;
	Out_Vec3 = Output13;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant104 = 1;
	float4 Output02;
	Output02.r = Context.MapUpdate.ScaleColor.ScaleRGB.x;
	Output02.g = Context.MapUpdate.ScaleColor.ScaleRGB.y;
	Output02.b = Context.MapUpdate.ScaleColor.ScaleRGB.z;
	Output02.a = Constant104;
	float4 Result79 = Context.MapUpdate.Transient.ParticleColorScaleFactor * Output02;
	float4 Result80 = Context.MapUpdate.ScaleColor.ColorValueToScale * Result79;
	Context.MapUpdate.Particles.Color = Result80;
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Result79;
}

void Subtract_Float_Emitter_Func_(out float Out_Result, inout FSimulationContext Context)
{
	float Result81 = Context.MapUpdate.Subtract_Float.A - Context.MapUpdate.Subtract_Float.B;
	Out_Result = Result81;
}

void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterRibbonWidthScaleFloatCurveOutput_Value;
	SampleCurve_EmitterRibbonWidthScaleFloatCurve(Context.MapUpdate.FloatFromCurve002.CurveIndex, SampleCurve_EmitterRibbonWidthScaleFloatCurveOutput_Value);
	float Result82 = SampleCurve_EmitterRibbonWidthScaleFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve002.ScaleCurve;
	Out_Value = Result82;
}

void RibbonWidthScale_Emitter_Func_(inout FSimulationContext Context)
{
	float Result83 = Context.MapUpdate.RibbonWidthScale.RibbonWidthScale * Context.MapUpdate.Particles.Initial.RibbonWidth;
	Context.MapUpdate.Particles.RibbonWidth = Result83;
}

void SimulationPosition005_Emitter_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant106 = false;
	float3 Constant107 = float3(0,0,0);
	float3 Vector_IfResult7;
	if(Constant106)
	{
	Vector_IfResult7 = Constant107;
	}
	else
	{
	Vector_IfResult7 = Context.MapUpdate.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult7;
}

void Subtract_Vector_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result84 = Context.MapUpdate.Subtract_Vector.A - Context.MapUpdate.Subtract_Vector.B;
	Out_Result = Result84;
}

void SimulationPosition001_Emitter_Func_(out float3 Out_SimulationPosition, inout FSimulationContext Context)
{
	bool Constant108 = false;
	float3 Constant109 = float3(0,0,0);
	float3 Vector_IfResult8;
	if(Constant108)
	{
	Vector_IfResult8 = Constant109;
	}
	else
	{
	Vector_IfResult8 = Context.MapUpdate.Engine.Owner.Position;
	}
	Out_SimulationPosition = Vector_IfResult8;
}

void Multiply_VectorByFloat002_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result85 = Context.MapUpdate.Multiply_VectorByFloat002.VECTOR_VAR * Context.MapUpdate.Multiply_VectorByFloat002.FLOAT_VAR;
	Out_Result = Result85;
}

void Add_Vector001_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result86 = Context.MapUpdate.Add_Vector001.A + Context.MapUpdate.Add_Vector001.B;
	Out_Result = Result86;
}

void SetVariables_39F275A84050437F282DE79201AD7DEA_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Particles.Position = Context.MapUpdate.SetVariables_39F275A84050437F282DE79201AD7DEA.Particles.Position;
}

void RandomVector003_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant118 = false;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant118, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result87 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult9;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult9 = In_InVector;
	}
	else
	{
	Vector_IfResult9 = Result87;
	}
	Out_OutVector = Vector_IfResult9;
}

void RandomVector003_Emitter_Func_(out float3 Out_RandomVector, inout FSimulationContext Context)
{
	int Constant115 = 2;
	int Constant116 = 0;
	bool Constant117 = false;
	float3 RandomVector003_NF_TransformVector_Emitter_Func_Output_OutVector;
	RandomVector003_NF_TransformVector_Emitter_Func_(Context.MapUpdate.Constants.Emitter.RandomVector003.ConstraintVector, Constant115, Constant116, Constant117, RandomVector003_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	int Constant119 = 0;
	bool Constant120 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.MapUpdate.RandomVector003.OverrideRandomness)
	{
	Mode_IfResult2 = Context.MapUpdate.RandomVector003.RandomnessMode;
	Override_IfResult2 = Context.MapUpdate.RandomVector003.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant119;
	Override_IfResult2 = Constant120;
	}
	float3 RandomUnitVector_Func_Output_UnitVector3D2;
	float2 RandomUnitVector_Func_Output_UnitVector2D2;
	RandomUnitVector_Func_(Context.MapUpdate.Constants.Emitter.RandomVector003.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.MapUpdate.RandomVector003.FixedRandomSeed, RandomUnitVector_Func_Output_UnitVector3D2, RandomUnitVector_Func_Output_UnitVector2D2, Context);
	float Result88 = dot(RandomVector003_NF_TransformVector_Emitter_Func_Output_OutVector,RandomUnitVector_Func_Output_UnitVector3D2);
	float Result89 = sign(Result88);
	float3 Result90 = Result89 * RandomUnitVector_Func_Output_UnitVector3D2;
	float3 Vector_IfResult10;
	if(Context.MapUpdate.RandomVector003.ConstraintoAxis)
	{
	Vector_IfResult10 = Result90;
	}
	else
	{
	Vector_IfResult10 = RandomUnitVector_Func_Output_UnitVector3D2;
	}
	float3 Result91 = Context.MapUpdate.Constants.Emitter.RandomVector003.VectorScale * Vector_IfResult10;
	Out_RandomVector = Result91;
}

void Add_Vector004_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result92 = Context.MapUpdate.Add_Vector004.A + Context.MapUpdate.Add_Vector004.B;
	Out_Result = Result92;
}

void SetVariables_7D57B2E24F50E6866938178BEE961CBE_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Particles.RandomMovement = Context.MapUpdate.SetVariables_7D57B2E24F50E6866938178BEE961CBE.Particles.RandomMovement;
}

void FloatFromCurve006_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterBScaleCurveFloatBParticlesPositionFloatCurveOutput_Value;
	SampleCurve_EmitterBScaleCurveFloatBParticlesPositionFloatCurve(Context.MapUpdate.FloatFromCurve006.CurveIndex, SampleCurve_EmitterBScaleCurveFloatBParticlesPositionFloatCurveOutput_Value);
	float Result93 = SampleCurve_EmitterBScaleCurveFloatBParticlesPositionFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve006.ScaleCurve;
	Out_Value = Result93;
}

void Multiply_Float002_Emitter_Func_(out float Out_Result, inout FSimulationContext Context)
{
	float Result94 = Context.MapUpdate.Multiply_Float002.A * Context.MapUpdate.Multiply_Float002.B;
	Out_Result = Result94;
}

void FloatFromCurve005_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterFloatBParticlesPositionFloatCurve001Output_Value;
	SampleCurve_EmitterFloatBParticlesPositionFloatCurve001(Context.MapUpdate.FloatFromCurve005.CurveIndex, SampleCurve_EmitterFloatBParticlesPositionFloatCurve001Output_Value);
	float Result95 = SampleCurve_EmitterFloatBParticlesPositionFloatCurve001Output_Value * Context.MapUpdate.FloatFromCurve005.ScaleCurve;
	Out_Value = Result95;
}

void Multiply_VectorByFloat005_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result96 = Context.MapUpdate.Multiply_VectorByFloat005.VECTOR_VAR * Context.MapUpdate.Multiply_VectorByFloat005.FLOAT_VAR;
	Out_Result = Result96;
}

void Add_Vector005_Emitter_Func_(out float3 Out_Result, inout FSimulationContext Context)
{
	float3 Result97 = Context.MapUpdate.Add_Vector005.A + Context.MapUpdate.Add_Vector005.B;
	Out_Result = Result97;
}

void SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Particles.Position = Context.MapUpdate.SetVariables_B8B0EADE49895CE1E100F6AAB756CA22.Particles.Position;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.User.Color = lerp(PREV_User_Color, User_Color, SpawnInterp);
	Context.MapSpawn.Emitter.BeamVector = lerp(PREV_Emitter_BeamVector, Emitter_BeamVector, SpawnInterp);
	Context.MapSpawn.Emitter.BeamStart = lerp(PREV_Emitter_BeamStart, Emitter_BeamStart, SpawnInterp);
	Context.MapSpawn.Emitter.BeamStartEndLength = lerp(PREV_Emitter_BeamStartEndLength, Emitter_BeamStartEndLength, SpawnInterp);
	Context.MapSpawn.Emitter.BeamDirection = lerp(PREV_Emitter_BeamDirection, Emitter_BeamDirection, SpawnInterp);
	Context.MapSpawn.Emitter.BeamStartTangent = lerp(PREV_Emitter_BeamStartTangent, Emitter_BeamStartTangent, SpawnInterp);
	Context.MapSpawn.Emitter.BeamEnd = lerp(PREV_Emitter_BeamEnd, Emitter_BeamEnd, SpawnInterp);
	Context.MapSpawn.Emitter.BeamEndTangent = lerp(PREV_Emitter_BeamEndTangent, Emitter_BeamEndTangent, SpawnInterp);
	Context.MapSpawn.User.LaserWidth = lerp(PREV_User_LaserWidth, User_LaserWidth, SpawnInterp);
	Context.MapSpawn.User.End = lerp(PREV_User_End, User_End, SpawnInterp);
	Context.MapSpawn.User.ColorBoost = lerp(PREV_User_ColorBoost, User_ColorBoost, SpawnInterp);
	Context.MapSpawn.User.LaserPower = lerp(PREV_User_LaserPower, User_LaserPower, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float Constant7 = (0.0);
	Context.MapSpawn.Particles.RibbonLinkOrder = Constant7;
	float3 Constant8 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.BeamSplineTangent = Constant8;
	float3 Constant9 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.BeamSplineNormal = Constant9;
	float3 Constant10 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.BeamSplineBinormal = Constant10;
	NiagaraID Constant11 = (NiagaraID)0;
	Context.MapSpawn.Particles.RibbonID = Constant11;
	float Constant12 = (0.0);
	Context.MapSpawn.Particles.RibbonWidth = Constant12;
	float Constant13 = (0.0);
	Context.MapSpawn.Particles.RibbonTwist = Constant13;
	float3 Constant14 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Particles.RandomMovement = Constant14;
	float Constant15 = 0;
	Context.MapSpawn.Particles.Age = Constant15;
	float Constant16 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant16;

	bool Constant17 = true;
	bool Constant18 = false;
	bool Constant19 = false;
	bool Constant20 = false;
	float3 ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	ParticleOwnerPosition_Emitter_Func_(ParticleOwnerPosition_Emitter_Func_Output_OutPosition, Context);
	bool Constant23 = false;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant17;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant18;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant19;
	Context.MapSpawn.InitializeParticle.Position = ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant23;
	Context.MapSpawn.InitializeParticle.Color = Context.MapSpawn.User.Color;
	bool Constant24 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant24;
	bool Constant25 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant25;
	bool Constant26 = false;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant26;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant29 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant29;
	float Constant30 = 0;
	float Constant31 = 1;
	int Constant32 = -1;
	int Constant33 = 0;
	bool Constant34 = false;
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant30, Constant31, Constant32, Constant33, Constant34, RandomRangeFloat_Func_Output_Result, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	float Constant48 = (0.0);
	Context.MapSpawn.Local.SpawnBeam.NormalizedExecIndex = Constant48;
	float3 Constant49 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.SpawnBeam.BeamVector = Constant49;
	float3 Constant50 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.SpawnBeam.BeamDirection = Constant50;
	EnterStatScope(2 );
	SpawnBeam_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapSpawn.FloatFromCurve.CurveIndex = Context.MapSpawn.Particles.RibbonLinkOrder;
	Context.MapSpawn.FloatFromCurve.ScaleCurve = Context.MapSpawn.User.LaserWidth;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapSpawn.BeamWidth.BeamWidth = FloatFromCurve_Emitter_Func_Output_Value;
	EnterStatScope(3 );
	BeamWidth_Emitter_Func_(Context);
	ExitStatScope( );
	float3 SimulationPosition004_Emitter_Func_Output_SimulationPosition;
	SimulationPosition004_Emitter_Func_(SimulationPosition004_Emitter_Func_Output_SimulationPosition, Context);
	Context.MapSpawn.Subtract_Vector001.A = Context.MapSpawn.User.End;
	Context.MapSpawn.Subtract_Vector001.B = SimulationPosition004_Emitter_Func_Output_SimulationPosition;
	bool Constant59 = false;
	Context.MapSpawn.RandomVector002.ConstraintoAxis = Constant59;
	bool Constant60 = false;
	Context.MapSpawn.RandomVector002.OverrideRandomness = Constant60;
	int Constant61 = 0;
	Context.MapSpawn.RandomVector002.RandomnessMode = Constant61;
	bool Constant62 = false;
	Context.MapSpawn.RandomVector002.OverrideSeed = Constant62;
	bool Constant63 = false;
	Context.MapSpawn.RandomVector002.FixedRandomSeed = Constant63;
	float3 RandomVector002_Emitter_Func_Output_RandomVector;
	RandomVector002_Emitter_Func_(RandomVector002_Emitter_Func_Output_RandomVector, Context);
	float3 Subtract_Vector001_Emitter_Func_Output_Result;
	Subtract_Vector001_Emitter_Func_(Subtract_Vector001_Emitter_Func_Output_Result, Context);
	Context.MapSpawn.CrossProduct001.VectorA = RandomVector002_Emitter_Func_Output_RandomVector;
	Context.MapSpawn.CrossProduct001.VectorB = Subtract_Vector001_Emitter_Func_Output_Result;
	bool Constant87 = false;
	Context.MapSpawn.RandomVector001.ConstraintoAxis = Constant87;
	bool Constant88 = false;
	Context.MapSpawn.RandomVector001.OverrideRandomness = Constant88;
	int Constant89 = 0;
	Context.MapSpawn.RandomVector001.RandomnessMode = Constant89;
	bool Constant90 = false;
	Context.MapSpawn.RandomVector001.OverrideSeed = Constant90;
	bool Constant91 = false;
	Context.MapSpawn.RandomVector001.FixedRandomSeed = Constant91;
	float3 RandomVector001_Emitter_Func_Output_RandomVector;
	RandomVector001_Emitter_Func_(RandomVector001_Emitter_Func_Output_RandomVector, Context);
	bool Constant98 = true;
	Context.MapSpawn.CrossProduct001.NormalizeIncomingVectors = Constant98;
	float3 CrossProduct001_Emitter_Func_Output_CrossedVector;
	CrossProduct001_Emitter_Func_(CrossProduct001_Emitter_Func_Output_CrossedVector, Context);
	Context.MapSpawn.Add_Vector.A = RandomVector001_Emitter_Func_Output_RandomVector;
	Context.MapSpawn.Add_Vector.B = CrossProduct001_Emitter_Func_Output_CrossedVector;
	float3 Add_Vector_Emitter_Func_Output_Result;
	Add_Vector_Emitter_Func_(Add_Vector_Emitter_Func_Output_Result, Context);
	Context.MapSpawn.SetVariables_37EFE94048FF0092BAD12B9767DEC3B7.Particles.RandomMovement = Add_Vector_Emitter_Func_Output_Result;
	EnterStatScope(4 );
	SetVariables_37EFE94048FF0092BAD12B9767DEC3B7_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.Initial.Color = Context.MapSpawn.Particles.Color;

	Context.MapSpawn.Particles.Initial.RibbonWidth = Context.MapSpawn.Particles.RibbonWidth;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant99 = true;
	Context.MapUpdate.DataInstance.Alive = Constant99;
	Context.MapUpdate.UpdateAge.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.UpdateAge.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(5 );
	UpdateAge_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve001.ScaleCurve = Context.MapUpdate.User.ColorBoost;
	Context.MapUpdate.FloatFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.VectorFromFloat.Value = FloatFromCurve001_Emitter_Func_Output_Value;
	float3 VectorFromFloat_Emitter_Func_Output_Vec3;
	VectorFromFloat_Emitter_Func_(VectorFromFloat_Emitter_Func_Output_Vec3, Context);
	Context.MapUpdate.ScaleColor.ScaleRGB = VectorFromFloat_Emitter_Func_Output_Vec3;
	Context.MapUpdate.ScaleColor.ColorValueToScale = Context.MapUpdate.Particles.Initial.Color;
	float4 Constant103 = float4(1,1,1,1);
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Constant103;
	EnterStatScope(6 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Subtract_Float.A = Context.MapUpdate.Particles.RibbonLinkOrder;
	Context.MapUpdate.Subtract_Float.B = Context.MapUpdate.Particles.NormalizedAge;
	float Subtract_Float_Emitter_Func_Output_Result;
	Subtract_Float_Emitter_Func_(Subtract_Float_Emitter_Func_Output_Result, Context);
	Context.MapUpdate.FloatFromCurve002.CurveIndex = Subtract_Float_Emitter_Func_Output_Result;
	float FloatFromCurve002_Emitter_Func_Output_Value;
	FloatFromCurve002_Emitter_Func_(FloatFromCurve002_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.RibbonWidthScale.RibbonWidthScale = FloatFromCurve002_Emitter_Func_Output_Value;
	EnterStatScope(7 );
	RibbonWidthScale_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant105 = false;
	float3 SimulationPosition005_Emitter_Func_Output_SimulationPosition;
	SimulationPosition005_Emitter_Func_(SimulationPosition005_Emitter_Func_Output_SimulationPosition, Context);
	Context.MapUpdate.Subtract_Vector.A = Context.MapUpdate.User.End;
	Context.MapUpdate.Subtract_Vector.B = SimulationPosition005_Emitter_Func_Output_SimulationPosition;
	float3 Subtract_Vector_Emitter_Func_Output_Result;
	Subtract_Vector_Emitter_Func_(Subtract_Vector_Emitter_Func_Output_Result, Context);
	Context.MapUpdate.Multiply_VectorByFloat002.VECTOR_VAR = Subtract_Vector_Emitter_Func_Output_Result;
	Context.MapUpdate.Multiply_VectorByFloat002.FLOAT_VAR = Context.MapUpdate.Particles.RibbonLinkOrder;
	float3 SimulationPosition001_Emitter_Func_Output_SimulationPosition;
	SimulationPosition001_Emitter_Func_(SimulationPosition001_Emitter_Func_Output_SimulationPosition, Context);
	float3 Multiply_VectorByFloat002_Emitter_Func_Output_Result;
	Multiply_VectorByFloat002_Emitter_Func_(Multiply_VectorByFloat002_Emitter_Func_Output_Result, Context);
	Context.MapUpdate.Add_Vector001.A = SimulationPosition001_Emitter_Func_Output_SimulationPosition;
	Context.MapUpdate.Add_Vector001.B = Multiply_VectorByFloat002_Emitter_Func_Output_Result;
	float3 Add_Vector001_Emitter_Func_Output_Result;
	Add_Vector001_Emitter_Func_(Add_Vector001_Emitter_Func_Output_Result, Context);
	Context.MapUpdate.SetVariables_39F275A84050437F282DE79201AD7DEA.Particles.Position = Add_Vector001_Emitter_Func_Output_Result;
	EnterStatScope(8 );
	SetVariables_39F275A84050437F282DE79201AD7DEA_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant110 = false;
	Context.MapUpdate.RandomVector003.ConstraintoAxis = Constant110;
	bool Constant111 = false;
	Context.MapUpdate.RandomVector003.OverrideRandomness = Constant111;
	int Constant112 = 0;
	Context.MapUpdate.RandomVector003.RandomnessMode = Constant112;
	bool Constant113 = false;
	Context.MapUpdate.RandomVector003.OverrideSeed = Constant113;
	bool Constant114 = false;
	Context.MapUpdate.RandomVector003.FixedRandomSeed = Constant114;
	float3 RandomVector003_Emitter_Func_Output_RandomVector;
	RandomVector003_Emitter_Func_(RandomVector003_Emitter_Func_Output_RandomVector, Context);
	Context.MapUpdate.Add_Vector004.A = Context.MapUpdate.Particles.RandomMovement;
	Context.MapUpdate.Add_Vector004.B = RandomVector003_Emitter_Func_Output_RandomVector;
	float3 Add_Vector004_Emitter_Func_Output_Result;
	Add_Vector004_Emitter_Func_(Add_Vector004_Emitter_Func_Output_Result, Context);
	Context.MapUpdate.SetVariables_7D57B2E24F50E6866938178BEE961CBE.Particles.RandomMovement = Add_Vector004_Emitter_Func_Output_Result;
	EnterStatScope(9 );
	SetVariables_7D57B2E24F50E6866938178BEE961CBE_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve006.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve006_Emitter_Func_Output_Value;
	FloatFromCurve006_Emitter_Func_(FloatFromCurve006_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.Multiply_Float002.A = Context.MapUpdate.User.LaserPower;
	Context.MapUpdate.Multiply_Float002.B = FloatFromCurve006_Emitter_Func_Output_Value;
	float Multiply_Float002_Emitter_Func_Output_Result;
	Multiply_Float002_Emitter_Func_(Multiply_Float002_Emitter_Func_Output_Result, Context);
	Context.MapUpdate.FloatFromCurve005.CurveIndex = Context.MapUpdate.Particles.RibbonLinkOrder;
	Context.MapUpdate.FloatFromCurve005.ScaleCurve = Multiply_Float002_Emitter_Func_Output_Result;
	float FloatFromCurve005_Emitter_Func_Output_Value;
	FloatFromCurve005_Emitter_Func_(FloatFromCurve005_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.Multiply_VectorByFloat005.VECTOR_VAR = Context.MapUpdate.Particles.RandomMovement;
	Context.MapUpdate.Multiply_VectorByFloat005.FLOAT_VAR = FloatFromCurve005_Emitter_Func_Output_Value;
	float3 Multiply_VectorByFloat005_Emitter_Func_Output_Result;
	Multiply_VectorByFloat005_Emitter_Func_(Multiply_VectorByFloat005_Emitter_Func_Output_Result, Context);
	Context.MapUpdate.Add_Vector005.A = Context.MapUpdate.Particles.Position;
	Context.MapUpdate.Add_Vector005.B = Multiply_VectorByFloat005_Emitter_Func_Output_Result;
	float3 Add_Vector005_Emitter_Func_Output_Result;
	Add_Vector005_Emitter_Func_(Add_Vector005_Emitter_Func_Output_Result, Context);
	Context.MapUpdate.SetVariables_B8B0EADE49895CE1E100F6AAB756CA22.Particles.Position = Add_Vector005_Emitter_Func_Output_Result;
	EnterStatScope(10 );
	SetVariables_B8B0EADE49895CE1E100F6AAB756CA22_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(11 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.BeamSplineBinormal.x = 0.0f;
	Context.MapSpawn.Particles.BeamSplineBinormal.y = 0.0f;
	Context.MapSpawn.Particles.BeamSplineBinormal.z = 0.0f;
	Context.MapSpawn.Particles.BeamSplineNormal.x = 0.0f;
	Context.MapSpawn.Particles.BeamSplineNormal.y = 0.0f;
	Context.MapSpawn.Particles.BeamSplineNormal.z = 0.0f;
	Context.MapSpawn.Particles.BeamSplineTangent.x = 0.0f;
	Context.MapSpawn.Particles.BeamSplineTangent.y = 0.0f;
	Context.MapSpawn.Particles.BeamSplineTangent.z = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.r = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.g = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.b = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.RibbonWidth = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.RandomMovement.x = 0.0f;
	Context.MapSpawn.Particles.RandomMovement.y = 0.0f;
	Context.MapSpawn.Particles.RandomMovement.z = 0.0f;
	Context.MapSpawn.Particles.RibbonID.Index = 0;
	Context.MapSpawn.Particles.RibbonID.AcquireTag = 0;
	Context.MapSpawn.Particles.RibbonLinkOrder = 0.0f;
	Context.MapSpawn.Particles.RibbonTwist = 0.0f;
	Context.MapSpawn.Particles.RibbonWidth = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.User.Color = User_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Lifetime = Constants_Emitter_InitializeParticle_Lifetime;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass = Constants_Emitter_InitializeParticle_Mass;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize = Constants_Emitter_InitializeParticle_SpriteSize;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapSpawn.Emitter.BeamVector = Emitter_BeamVector;
	Context.MapSpawn.Emitter.BeamStart = Emitter_BeamStart;
	Context.MapSpawn.Emitter.BeamStartEndLength = Emitter_BeamStartEndLength;
	Context.MapSpawn.Emitter.BeamDirection = Emitter_BeamDirection;
	Context.MapSpawn.Emitter.BeamStartTangent = Emitter_BeamStartTangent;
	Context.MapSpawn.Emitter.BeamEnd = Emitter_BeamEnd;
	Context.MapSpawn.Emitter.BeamEndTangent = Emitter_BeamEndTangent;
	Context.MapSpawn.Constants.Emitter.SpawnBeam.SplinePositionErrorThreshold = Constants_Emitter_SpawnBeam_SplinePositionErrorThreshold;
	Context.MapSpawn.Emitter.UseBeamTangents = Emitter_UseBeamTangents;
	Context.MapSpawn.Emitter.BeamID = Emitter_BeamID;
	Context.MapSpawn.User.LaserWidth = User_LaserWidth;
	Context.MapSpawn.Constants.Emitter.BeamWidth.BeamTwistAmount = Constants_Emitter_BeamWidth_BeamTwistAmount;
	Context.MapSpawn.User.End = User_End;
	Context.MapSpawn.Constants.Emitter.RandomVector002.VectorScale = Constants_Emitter_RandomVector002_VectorScale;
	Context.MapSpawn.Constants.Emitter.RandomVector002.ConstraintVector = Constants_Emitter_RandomVector002_ConstraintVector;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapSpawn.Constants.Emitter.RandomVector002.RandomSeed = Constants_Emitter_RandomVector002_RandomSeed;
	Context.MapSpawn.Constants.Emitter.RandomVector001.VectorScale = Constants_Emitter_RandomVector001_VectorScale;
	Context.MapSpawn.Constants.Emitter.RandomVector001.ConstraintVector = Constants_Emitter_RandomVector001_ConstraintVector;
	Context.MapSpawn.Constants.Emitter.RandomVector001.RandomSeed = Constants_Emitter_RandomVector001_RandomSeed;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.User.ColorBoost = User_ColorBoost;
	Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleAlpha = Constants_Emitter_ScaleColor_ScaleAlpha;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve002.ScaleCurve = Constants_Emitter_FloatFromCurve002_ScaleCurve;
	Context.MapUpdate.User.End = User_End;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Constants.Emitter.RandomVector003.VectorScale = Constants_Emitter_RandomVector003_VectorScale;
	Context.MapUpdate.Constants.Emitter.RandomVector003.ConstraintVector = Constants_Emitter_RandomVector003_ConstraintVector;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Constants.Emitter.RandomVector003.RandomSeed = Constants_Emitter_RandomVector003_RandomSeed;
	Context.MapUpdate.User.LaserPower = User_LaserPower;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve006.ScaleCurve = Constants_Emitter_FloatFromCurve006_ScaleCurve;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineBinormal.x);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineBinormal.y);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineBinormal.z);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineNormal.x);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineNormal.y);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineNormal.z);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineTangent.x);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineTangent.y);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.BeamSplineTangent.z);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.r);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.g);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.b);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.a);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.Initial.RibbonWidth);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.RandomMovement.x);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.RandomMovement.y);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.RandomMovement.z);
	OutputDataInt(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.RibbonID.Index);
	OutputDataInt(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.RibbonID.AcquireTag);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.RibbonLinkOrder);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.RibbonTwist);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.RibbonWidth);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 37, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 38, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 39, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 40, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
