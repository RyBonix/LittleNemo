#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float Constants_Emitter_DynamicMaterialParameters_Index0Param2;
	float Constants_Emitter_DynamicMaterialParameters_Index0Param3;
	float Constants_Emitter_DynamicMaterialParameters_Index0Param4;
	float User_ColorBoost;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	float Constants_Emitter_FloatFromCurve002_ScaleCurve;
}

struct FParamMap0_VectorFromFloat002
{
	float Value;
};

struct FParamMap0_VectorFromFloat001
{
	float Value;
};

struct FParamMap0_User
{
	float ColorBoost;
};

struct FParamMap0_UpdateAge
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Transient
{
	float3 MeshScaleFactor;
	float4 ParticleColorScaleFactor;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float3 Scale;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	float4 DynamicMaterialParameter;
	FParamMap0_Particles_Initial Initial;
	float4 InitialRotation;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float4 MeshOrientation;
	float NormalizedAge;
	float3 Position;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
};

struct FParamMap0_OUTPUT_VAR_UpdateAge
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_UpdateAge UpdateAge;
};

struct FParamMap0_MeshSizeScale
{
	float3 InitialMeshScale;
	float3 ScaleFactor;
};

struct FParamMap0_FloatFromCurve003
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve002
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	int RandomSeed;
};

struct FParamMap0_DynamicMaterialParameters
{
	float Index0Param1;
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
	bool Param0WriteEnabled;
	bool Param1WriteEnabled;
	bool Param2WriteEnabled;
	bool Param3WriteEnabled;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve002
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_DynamicMaterialParameters
{
	float Index0Param2;
	float Index0Param3;
	float Index0Param4;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_FloatFromCurve002 FloatFromCurve002;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0
{
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_DynamicMaterialParameters DynamicMaterialParameters;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_FloatFromCurve002 FloatFromCurve002;
	FParamMap0_FloatFromCurve003 FloatFromCurve003;
	FParamMap0_MeshSizeScale MeshSizeScale;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_Transient Transient;
	FParamMap0_UpdateAge UpdateAge;
	FParamMap0_User User;
	FParamMap0_VectorFromFloat001 VectorFromFloat001;
	FParamMap0_VectorFromFloat002 VectorFromFloat002;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void UpdateAge_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterIndex0Param1FloatCurve(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void DynamicMaterialParameters_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterValueScaleRGBFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve003_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void VectorFromFloat002_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterValueScaleFactorFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void VectorFromFloat001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void MeshSizeScale_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void UpdateAge_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result = NiagaraAll(Context.Map.Particles.Age <= Context.Map.Engine.DeltaTime);
	Context.Map.OUTPUT_VAR.UpdateAge.FirstFrame = Result;
	float Result1 = Context.Map.Particles.Age + Context.Map.UpdateAge.DeltaTime;
	float Constant1 = 1e-05;
	float Result2 = max(Context.Map.UpdateAge.Lifetime, Constant1);
	float Constant2 = 0.0001;
	float Result3 = Result2 - Constant2;
	bool Result4 = NiagaraAll(Result1 < Result3);
	bool Constant3 = false;
	bool bool_IfResult;
	if(Result4)
	{
	bool_IfResult = Context.Map.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant3;
	}
	float Result5 = Result1 / Result2;
	Context.Map.DataInstance.Alive = bool_IfResult;
	Context.Map.Particles.Age = Result1;
	Context.Map.Particles.NormalizedAge = Result5;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterIndex0Param1FloatCurveOutput_Value;
	SampleCurve_EmitterIndex0Param1FloatCurve(Context.Map.FloatFromCurve001.CurveIndex, SampleCurve_EmitterIndex0Param1FloatCurveOutput_Value);
	float Result6 = SampleCurve_EmitterIndex0Param1FloatCurveOutput_Value * Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result6;
}

void DynamicMaterialParameters_Emitter_Func_(inout FSimulationContext Context)
{
	float X;
	float Y;
	float Z;
	float W;
	X = Context.Map.Particles.DynamicMaterialParameter.x;
	Y = Context.Map.Particles.DynamicMaterialParameter.y;
	Z = Context.Map.Particles.DynamicMaterialParameter.z;
	W = Context.Map.Particles.DynamicMaterialParameter.w;
	float float_IfResult;
	if(Context.Map.DynamicMaterialParameters.Param0WriteEnabled)
	{
	float_IfResult = Context.Map.DynamicMaterialParameters.Index0Param1;
	}
	else
	{
	float_IfResult = X;
	}
	float float_IfResult1;
	if(Context.Map.DynamicMaterialParameters.Param1WriteEnabled)
	{
	float_IfResult1 = Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param2;
	}
	else
	{
	float_IfResult1 = Y;
	}
	float float_IfResult2;
	if(Context.Map.DynamicMaterialParameters.Param2WriteEnabled)
	{
	float_IfResult2 = Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param3;
	}
	else
	{
	float_IfResult2 = Z;
	}
	float float_IfResult3;
	if(Context.Map.DynamicMaterialParameters.Param3WriteEnabled)
	{
	float_IfResult3 = Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param4;
	}
	else
	{
	float_IfResult3 = W;
	}
	float4 Output1;
	Output1.x = float_IfResult;
	Output1.y = float_IfResult1;
	Output1.z = float_IfResult2;
	Output1.w = float_IfResult3;
	Context.Map.Particles.DynamicMaterialParameter = Output1;
}

void FloatFromCurve003_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterValueScaleRGBFloatCurveOutput_Value;
	SampleCurve_EmitterValueScaleRGBFloatCurve(Context.Map.FloatFromCurve003.CurveIndex, SampleCurve_EmitterValueScaleRGBFloatCurveOutput_Value);
	float Result7 = SampleCurve_EmitterValueScaleRGBFloatCurveOutput_Value * Context.Map.FloatFromCurve003.ScaleCurve;
	Out_Value = Result7;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve(Context.Map.FloatFromCurve.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value);
	float Result8 = SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value * Context.Map.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result8;
}

void VectorFromFloat002_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output11;
	Output11.x = Context.Map.VectorFromFloat002.Value;
	Output11.y = Context.Map.VectorFromFloat002.Value;
	Output11.z = Context.Map.VectorFromFloat002.Value;
	Out_Vec3 = Output11;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant9 = 1;
	float4 Output0;
	Output0.r = Context.Map.ScaleColor.ScaleRGB.x;
	Output0.g = Context.Map.ScaleColor.ScaleRGB.y;
	Output0.b = Context.Map.ScaleColor.ScaleRGB.z;
	Output0.a = Constant9;
	float4 Result9 = Context.Map.Transient.ParticleColorScaleFactor * Output0;
	float4 Result10 = Context.Map.ScaleColor.ColorValueToScale * Result9;
	Context.Map.Particles.Color = Result10;
	Context.Map.Transient.ParticleColorScaleFactor = Result9;
}

void FloatFromCurve002_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value;
	SampleCurve_EmitterValueScaleFactorFloatCurve(Context.Map.FloatFromCurve002.CurveIndex, SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value);
	float Result11 = SampleCurve_EmitterValueScaleFactorFloatCurveOutput_Value * Context.Map.Constants.Emitter.FloatFromCurve002.ScaleCurve;
	Out_Value = Result11;
}

void VectorFromFloat001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output12;
	Output12.x = Context.Map.VectorFromFloat001.Value;
	Output12.y = Context.Map.VectorFromFloat001.Value;
	Output12.z = Context.Map.VectorFromFloat001.Value;
	Out_Vec3 = Output12;
}

void MeshSizeScale_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result12 = Context.Map.MeshSizeScale.ScaleFactor * Context.Map.Transient.MeshScaleFactor;
	float3 Result13 = Context.Map.MeshSizeScale.InitialMeshScale * Result12;
	Context.Map.Particles.Scale = Result13;
	Context.Map.Transient.MeshScaleFactor = Result12;
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = true;
	Context.Map.DataInstance.Alive = Constant;
	Context.Map.UpdateAge.DeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.UpdateAge.Lifetime = Context.Map.Particles.Lifetime;
	EnterStatScope(1 );
	UpdateAge_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant4 = false;
	bool Constant5 = false;
	bool Constant6 = true;
	Context.Map.FloatFromCurve001.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.Map.DynamicMaterialParameters.Param1WriteEnabled = Constant4;
	Context.Map.DynamicMaterialParameters.Param2WriteEnabled = Constant5;
	Context.Map.DynamicMaterialParameters.Param3WriteEnabled = Constant6;
	Context.Map.DynamicMaterialParameters.Index0Param1 = FloatFromCurve001_Emitter_Func_Output_Value;
	bool Constant7 = true;
	Context.Map.DynamicMaterialParameters.Param0WriteEnabled = Constant7;
	EnterStatScope(2 );
	DynamicMaterialParameters_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve003.ScaleCurve = Context.Map.User.ColorBoost;
	Context.Map.FloatFromCurve003.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve003_Emitter_Func_Output_Value;
	FloatFromCurve003_Emitter_Func_(FloatFromCurve003_Emitter_Func_Output_Value, Context);
	Context.Map.VectorFromFloat002.Value = FloatFromCurve003_Emitter_Func_Output_Value;
	Context.Map.FloatFromCurve.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	float3 VectorFromFloat002_Emitter_Func_Output_Vec3;
	VectorFromFloat002_Emitter_Func_(VectorFromFloat002_Emitter_Func_Output_Vec3, Context);
	Context.Map.ScaleColor.ScaleAlpha = FloatFromCurve_Emitter_Func_Output_Value;
	Context.Map.ScaleColor.ScaleRGB = VectorFromFloat002_Emitter_Func_Output_Vec3;
	Context.Map.ScaleColor.ColorValueToScale = Context.Map.Particles.Initial.Color;
	float4 Constant8 = float4(1,1,1,1);
	Context.Map.Transient.ParticleColorScaleFactor = Constant8;
	EnterStatScope(3 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve002.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve002_Emitter_Func_Output_Value;
	FloatFromCurve002_Emitter_Func_(FloatFromCurve002_Emitter_Func_Output_Value, Context);
	Context.Map.VectorFromFloat001.Value = FloatFromCurve002_Emitter_Func_Output_Value;
	float3 VectorFromFloat001_Emitter_Func_Output_Vec3;
	VectorFromFloat001_Emitter_Func_(VectorFromFloat001_Emitter_Func_Output_Vec3, Context);
	Context.Map.MeshSizeScale.ScaleFactor = VectorFromFloat001_Emitter_Func_Output_Vec3;
	Context.Map.MeshSizeScale.InitialMeshScale = Context.Map.Particles.Initial.Scale;
	float3 Constant10 = float3(1,1,1);
	Context.Map.Transient.MeshScaleFactor = Constant10;
	EnterStatScope(4 );
	MeshSizeScale_Emitter_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(5 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Particles.Age = InputDataFloat(0, 0);
	Context.Map.Particles.Color.r = InputDataFloat(0, 1);
	Context.Map.Particles.Color.g = InputDataFloat(0, 2);
	Context.Map.Particles.Color.b = InputDataFloat(0, 3);
	Context.Map.Particles.Color.a = InputDataFloat(0, 4);
	Context.Map.Particles.DynamicMaterialParameter.x = InputDataFloat(0, 5);
	Context.Map.Particles.DynamicMaterialParameter.y = InputDataFloat(0, 6);
	Context.Map.Particles.DynamicMaterialParameter.z = InputDataFloat(0, 7);
	Context.Map.Particles.DynamicMaterialParameter.w = InputDataFloat(0, 8);
	Context.Map.Particles.Initial.Color.r = InputDataFloat(0, 9);
	Context.Map.Particles.Initial.Color.g = InputDataFloat(0, 10);
	Context.Map.Particles.Initial.Color.b = InputDataFloat(0, 11);
	Context.Map.Particles.Initial.Color.a = InputDataFloat(0, 12);
	Context.Map.Particles.Initial.Scale.x = InputDataFloat(0, 13);
	Context.Map.Particles.Initial.Scale.y = InputDataFloat(0, 14);
	Context.Map.Particles.Initial.Scale.z = InputDataFloat(0, 15);
	Context.Map.Particles.InitialRotation.x = InputDataFloat(0, 16);
	Context.Map.Particles.InitialRotation.y = InputDataFloat(0, 17);
	Context.Map.Particles.InitialRotation.z = InputDataFloat(0, 18);
	Context.Map.Particles.InitialRotation.w = InputDataFloat(0, 19);
	Context.Map.Particles.Lifetime = InputDataFloat(0, 20);
	Context.Map.Particles.Mass = InputDataFloat(0, 21);
	Context.Map.Particles.MaterialRandom = InputDataFloat(0, 22);
	Context.Map.Particles.MeshOrientation.x = InputDataFloat(0, 23);
	Context.Map.Particles.MeshOrientation.y = InputDataFloat(0, 24);
	Context.Map.Particles.MeshOrientation.z = InputDataFloat(0, 25);
	Context.Map.Particles.MeshOrientation.w = InputDataFloat(0, 26);
	Context.Map.Particles.NormalizedAge = InputDataFloat(0, 27);
	Context.Map.Particles.Position.x = InputDataFloat(0, 28);
	Context.Map.Particles.Position.y = InputDataFloat(0, 29);
	Context.Map.Particles.Position.z = InputDataFloat(0, 30);
	Context.Map.Particles.Scale.x = InputDataFloat(0, 31);
	Context.Map.Particles.Scale.y = InputDataFloat(0, 32);
	Context.Map.Particles.Scale.z = InputDataFloat(0, 33);
	Context.Map.Particles.SpriteRotation = InputDataFloat(0, 34);
	Context.Map.Particles.SpriteSize.x = InputDataFloat(0, 35);
	Context.Map.Particles.SpriteSize.y = InputDataFloat(0, 36);
	Context.Map.Particles.UniqueID = InputDataInt(0, 37);
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param2 = Constants_Emitter_DynamicMaterialParameters_Index0Param2;
	Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param3 = Constants_Emitter_DynamicMaterialParameters_Index0Param3;
	Context.Map.Constants.Emitter.DynamicMaterialParameters.Index0Param4 = Constants_Emitter_DynamicMaterialParameters_Index0Param4;
	Context.Map.User.ColorBoost = User_ColorBoost;
	Context.Map.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.Map.Constants.Emitter.FloatFromCurve002.ScaleCurve = Constants_Emitter_FloatFromCurve002_ScaleCurve;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.Map.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.x);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.y);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.z);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Particles.DynamicMaterialParameter.w);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Particles.Initial.Color.r);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Particles.Initial.Color.g);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Particles.Initial.Color.b);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Particles.Initial.Color.a);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Particles.Initial.Scale.x);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Particles.Initial.Scale.y);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Particles.Initial.Scale.z);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Particles.InitialRotation.x);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Particles.InitialRotation.y);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Particles.InitialRotation.z);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Particles.InitialRotation.w);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Particles.Lifetime);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Particles.Mass);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Particles.MaterialRandom);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Particles.MeshOrientation.x);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Particles.MeshOrientation.y);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Particles.MeshOrientation.z);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Particles.MeshOrientation.w);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Particles.NormalizedAge);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Particles.Position.x);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Particles.Position.y);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Particles.Position.z);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Particles.Scale.x);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Particles.Scale.y);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Particles.Scale.z);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Particles.SpriteRotation);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Particles.SpriteSize.x);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.Particles.SpriteSize.y);
	OutputDataInt(0, 37, TmpWriteIndex, Context.Map.Particles.UniqueID);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
